<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux 开机流程</title>
    <link href="/2025/04/30/Linux-%E5%BC%80%E6%9C%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2025/04/30/Linux-%E5%BC%80%E6%9C%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="🧠-Linux-开机流程总体分为-4-个阶段："><a href="#🧠-Linux-开机流程总体分为-4-个阶段：" class="headerlink" title="🧠 Linux 开机流程总体分为 4 个阶段："></a>🧠 <strong>Linux 开机流程总体分为 4 个阶段：</strong></h3><hr><h4 id="第一阶段：BIOS-UEFI-初始化"><a href="#第一阶段：BIOS-UEFI-初始化" class="headerlink" title="第一阶段：BIOS&#x2F;UEFI 初始化"></a><strong>第一阶段：BIOS&#x2F;UEFI 初始化</strong></h4><ul><li><p>🔌 <strong>触发点</strong>：按下电源键</p></li><li><p>📦 <strong>工作内容</strong>：</p></li><li><ul><li>加载 <strong>BIOS&#x2F;UEFI</strong>，执行硬件自检（POST）</li><li>读取启动顺序，找到<strong>第一个可启动设备</strong></li></ul></li><li><p>💥 <strong>常见问题点</strong>：</p></li><li><ul><li>找不到启动设备（BIOS 设置错）</li><li>硬件检测失败（内存条没插好等）</li></ul></li></ul><hr><h4 id="第二阶段：Boot-Loader（如-grub2）加载"><a href="#第二阶段：Boot-Loader（如-grub2）加载" class="headerlink" title="第二阶段：Boot Loader（如 grub2）加载"></a><strong>第二阶段：Boot Loader（如 grub2）加载</strong></h4><ul><li><p>🔁 <strong>从启动设备读取 MBR 或 EFI 区块</strong></p></li><li><p>🚀 <strong>Boot Loader 功能</strong>：</p></li><li><ul><li>提供启动菜单</li><li>选择并加载对应的 Linux <strong>内核（vmlinuz）</strong></li></ul></li><li><p>💥 <strong>常见问题点</strong>：</p></li><li><ul><li>grub 配置错误</li><li>MBR 损坏或被覆盖（安装 Windows 后）</li></ul></li></ul><hr><h4 id="第三阶段：内核加载（Kernel）"><a href="#第三阶段：内核加载（Kernel）" class="headerlink" title="第三阶段：内核加载（Kernel）"></a><strong>第三阶段：内核加载（Kernel）</strong></h4><ul><li><p>🧬 <strong>功能</strong>：</p></li><li><ul><li>内核解压缩到内存中，开始运行</li><li>识别硬件信息，加载相应驱动</li></ul></li><li><p>🔧 <strong>输出</strong>：进入一个「最精简的操作系统」</p></li><li><p>💥 <strong>常见问题点</strong>：</p></li><li><ul><li>找不到根文件系统（rootfs）</li><li>initramfs 错误导致内核 panic</li></ul></li></ul><hr><h4 id="第四阶段：用户空间初始化（systemd）"><a href="#第四阶段：用户空间初始化（systemd）" class="headerlink" title="第四阶段：用户空间初始化（systemd）"></a><strong>第四阶段：用户空间初始化（systemd）</strong></h4><ul><li>🧩 <strong>由内核启动</strong> systemd（以前是 init）</li><li>🧭 <strong>执行流程</strong>（target 是 systemd 的阶段定义）：</li></ul><ol><li><ol><li><code>sysinit.target</code>：基础初始化（挂载文件系统、设置时钟）</li><li><code>basic.target</code>：准备系统基础功能（网络等）</li><li><code>multi-user.target</code>：启动服务器服务，如 sshd、network 等</li><li><code>/etc/rc.local</code>：用户自定义启动脚本</li><li><code>getty.target</code>：启动终端登录服务</li><li><code>graphical.target</code>：图形界面（若安装桌面环境）</li></ol></li></ol><ul><li><p>💥 <strong>常见问题点</strong>：</p></li><li><ul><li>systemd 配置错、服务启动失败</li><li>服务依赖配置错（启动顺序错）</li></ul></li></ul><hr><h3 id="✅-总结成一句话："><a href="#✅-总结成一句话：" class="headerlink" title="✅ 总结成一句话："></a>✅ <strong>总结成一句话：</strong></h3><p>开机流程是从 BIOS → Boot Loader → 内核加载 → systemd 初始化，一环扣一环，systemd 在后期占比最大，是系统能否正常启动的关键。</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework八大组件</title>
    <link href="/2022/08/21/Django-Rest-Framework%E5%85%AB%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/2022/08/21/Django-Rest-Framework%E5%85%AB%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>DRF整合了非常多的开发常用组件，认证，授权、限流等等，简单配置即可使用</p><h1 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><p>开启全局配置，只要请求后端接口，都需要进行认证才可以请求成功</p><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># DRF 组件配置</span><br>REST\_FRAMEWORK = &#123;<br><span class="hljs-comment"># 内部循环遍历注册的认证类，一旦成功，结束循环</span><br><span class="hljs-string">&#x27;DEFAULT\_AUTHENTICATION\_CLASSES&#x27;</span>: (<br><span class="hljs-comment"># &#x27;dfdemo.authentication.CustomAuthentication&#x27;, # 自定义认证</span><br><span class="hljs-string">&#x27;rest\_framework.authentication.SessionAuthentication&#x27;</span>, <span class="hljs-comment"># session 认证</span><br><span class="hljs-string">&#x27;rest\_framework.authentication.BasicAuthentication&#x27;</span>, <span class="hljs-comment"># 基本认证</span><br>),<br><span class="hljs-comment"># 权限配置</span><br><span class="hljs-string">&#x27;DEFAULT\_PERMISSION\_CLASSES&#x27;</span>: (<br><span class="hljs-comment"># 要认证才能请求</span><br><span class="hljs-string">&#x27;rest\_framework.permissions.IsAuthenticated&#x27;</span>,<br>),<br></code></pre></td></tr></table></figure><p>我们再去请求后端接口，在没有登录的情况下是无法请求成功的</p><p><a href="https://imgtu.com/i/qwhsg0"><img src="https://s1.ax1x.com/2022/03/27/qwhsg0.md.png"></a></p><p>登录管理员后，再去请求就成功了，获得了登录信息</p><p><a href="https://imgtu.com/i/qwhyvV"><img src="https://s1.ax1x.com/2022/03/27/qwhyvV.png"></a></p><p>但是，我们并不是后端所有接口都需要认证，比如在登录中的登录接口和验证码接口就不能要求认证，不然就是先有鸡先有蛋的问题出现了，这时候我们可以进行局部认证，让这两个接口不需要进行认证</p><h2 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 局部认证</span><br><span class="hljs-comment"># 登录接口，要取消所有的认证与权限规则，也就是要做局部禁用操作（空配置）</span><br>authentication\_classes = []<br>permission\_classes = []<br></code></pre></td></tr></table></figure><p>此时我们再去请求不需要做认证的接口</p><p><a href="https://imgtu.com/i/qwhbDO"><img src="https://s1.ax1x.com/2022/03/27/qwhbDO.png"></a></p><p>发现，没有进行登录也可以访问，访问没有做局部配置的接口，依旧需要认证</p><p>除了需要登录这个认证，部分接口是只有管理员才能访问的，所以我们对管理员接口进行局部配置，即使登陆了，不是管理员也不能访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 局部权限配置方式 管理员</span><br>authentication\_classes = [SessionAuthentication]<br>permission\_classes = [IsAdminUser]<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2022/03/27/qwhyvV.png"></p><p>创建的csq账号，是没有管理员权限的，所以即使是登录也不能请求成功这个接口</p><p><a href="https://imgse.com/i/vyNYgf"><img src="https://s1.ax1x.com/2022/08/21/vyNYgf.png"></a></p><p>换做luffy就可以了</p><p>还可以自定义一个认证类，实现一个接口的自定义认证，如下</p><p><code>authentication.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomAuthentication</span>(<span class="hljs-title class_ inherited__">BaseAuthentication</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">自定义认证</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">authenticate</span>(<span class="hljs-params">self, request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">认证方法</span><br><span class="hljs-string">:param request: 客户端发来的http对象</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>user = request.query\_params.get(<span class="hljs-string">&#x27;user&#x27;</span>)<br>pwd = request.query\_params.get(<span class="hljs-string">&#x27;pwd&#x27;</span>)<br><span class="hljs-keyword">if</span> user != <span class="hljs-string">&#x27;root&#x27;</span> <span class="hljs-keyword">or</span> pwd != <span class="hljs-string">&#x27;123456&#x27;</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><span class="hljs-comment"># get\_user\_model 获取当前系统中对应的用户模型类</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;调用用户自定义权限类&#x27;</span>)<br>user = get\_user\_model().objects.first()<br><span class="hljs-comment"># 按照固定的返回格式填写（用户模型，None）</span><br><span class="hljs-keyword">return</span> (user,<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>写的很简单，就是要再地址栏拼接上用户名和密码</p><p>目前做了全局认证和权限配置，必须登录能访问接口，现在我们把自定义的配置传到接口中测试，测试在未登录的情况下拼接地址能不能请求成功。</p><p><a href="https://imgse.com/i/vyNGCt"><img src="https://s1.ax1x.com/2022/08/21/vyNGCt.png"></a></p><p>发现请求成功，我们不这样拼接，直接登录超级管理员登录后，去请求该接口</p><p><a href="https://imgtu.com/i/qwhr3q"><img src="https://s1.ax1x.com/2022/03/27/qwhr3q.png"></a></p><p>发现请求失败，我们在PyCharm中也发现打印信息：</p><p><a href="https://imgtu.com/i/qwh04s"><img src="https://s1.ax1x.com/2022/03/27/qwh04s.png"></a></p><p>在全局配置中，配置的授权信息是认证就可以访问，现在我们可以自定义权限配置</p><p><code>permission.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IsXiaoMingPermissions</span>(<span class="hljs-title class_ inherited__">BasePermission</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">自定义权限，可全局，也可局部</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has</span>\_permission(<span class="hljs-variable language_">self</span>, request, view):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">试图权限 True 可以访问</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:param view:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>role = request.query\_params.get(<span class="hljs-string">&#x27;role&#x27;</span>)<br><span class="hljs-keyword">return</span> role == <span class="hljs-string">&#x27;xiaoming&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has</span>\_<span class="hljs-built_in">object</span>\_permission(<span class="hljs-variable language_">self</span>, request, view, obj):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">模型权限</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:param view:</span><br><span class="hljs-string">:param obj:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">permission\_classes = [IsXiaoMingPermissions] <span class="hljs-comment"># 自定义权限</span><br></code></pre></td></tr></table></figure><p>这样的局部配置完成后，要求请求这个类的接口都要符合 <code>IsXiaoMingPermissions.py</code>，否则即使是超级管理员也无法请求，测试如下：</p><p><a href="https://imgse.com/i/vyND5n"><img src="https://s1.ax1x.com/2022/08/21/vyND5n.png" alt="vyND5n.png"></a></p><p>用luffy这个超级管理员账户测试</p><p><a href="https://imgtu.com/i/qwhr3q"><img src="https://s1.ax1x.com/2022/03/27/qwhr3q.png"></a></p><p>即使登录的是超级管理员，也无法请求成功！必须是通过自定义的授权程序才能请求成功。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>全局配置决定了程序所有接口的认证和授权信息，但可以通过局部配置进行覆盖，生效的就是局部配置了</li><li>认证和授权联系紧密，在配置的时候要考虑两者之间的关系</li></ol><h1 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h1><h3 id="全局配置-1"><a href="#全局配置-1" class="headerlink" title="全局配置"></a>全局配置</h3><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 节流的配置列表</span><br><span class="hljs-string">&#x27;DEFAULT\_THROTTLE\_CLASSES&#x27;</span>: (<br><span class="hljs-string">&#x27;rest\_framework.throttling.AnonRateThrottle&#x27;</span>, <span class="hljs-comment"># 匿名未认证用户，使用IP区分用户</span><br><span class="hljs-string">&#x27;rest\_framework.throttling.UserRateThrottle&#x27;</span> <span class="hljs-comment"># 使用User id 来区分</span><br><span class="hljs-comment"># &#x27;rest\_framework.throttling.ScopeRateThrottle&#x27;, # 特定域限流</span><br>),<br><span class="hljs-comment"># 节流率</span><br><span class="hljs-string">&#x27;DEFAULT\_THROTTLE\_RATES&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;3/day&#x27;</span>, <span class="hljs-comment"># 匿名用户每天三次</span><br><span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 登录用户每天五次</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>未认证用户使用IP区分，已认证用户使用ID用于生成唯一的密钥以进行限制 。</p><p>节流率的时间可以用天，小时，分，秒等来进行限定</p><p>分别测试未登录和登录用户去请求</p><p><a href="https://imgtu.com/i/qwhDCn"><img src="https://s1.ax1x.com/2022/03/27/qwhDCn.png"></a></p><p>达到请求上限，得到预期效果</p><h3 id="局部配置-1"><a href="#局部配置-1" class="headerlink" title="局部配置"></a>局部配置</h3><p>假设全局并没有做限流操作，只是在某个接口中需要做限流，可以采用局部限流的方法，做法有两种</p><p>取消全局限流，保留限流率，对需要做限流的操作进行局部限流处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentReadOnlyModelViewSet</span>(<span class="hljs-title class_ inherited__">ReadOnlyModelViewSet</span>):<br>queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = StudentModelSerializer<br><span class="hljs-comment"># 局部限流</span><br>throttle\_classes = [AnonRateThrottle,UserRateThrottle]<br></code></pre></td></tr></table></figure><p>发现配置了局部限流的接口会受限流率的操作，没有配置的接口则不受限制</p><p>第二种方法是，在全局仍需限流操作的情况下，部分接口与全局限流率不一致，这是需要配置局部限流率了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 节流的配置列表</span><br><span class="hljs-string">&#x27;DEFAULT\_THROTTLE\_CLASSES&#x27;</span>: (<br><span class="hljs-string">&#x27;rest\_framework.throttling.AnonRateThrottle&#x27;</span>, <span class="hljs-comment"># 匿名未认证用户，使用IP区分用户</span><br><span class="hljs-string">&#x27;rest\_framework.throttling.UserRateThrottle&#x27;</span> <span class="hljs-comment"># 使用User id 来区分</span><br><span class="hljs-comment"># &#x27;rest\_framework.throttling.ScopeRateThrottle&#x27;, # 自定义限流域</span><br>),<br><span class="hljs-comment"># 节流率</span><br><span class="hljs-string">&#x27;DEFAULT\_THROTTLE\_RATES&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-string">&#x27;3/day&#x27;</span>, <span class="hljs-comment"># 匿名用户每天三次</span><br><span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-string">&#x27;5/day&#x27;</span>, <span class="hljs-comment"># 登录用户每天五次</span><br><span class="hljs-string">&#x27;Hom&#x27;</span>: <span class="hljs-string">&#x27;10/day&#x27;</span>,<br>&#125;,<br></code></pre></td></tr></table></figure><p>局部限流配置10次&#x2F;day，全局限流配置登录用户3次&#x2F;day</p><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest\_framework.throttling <span class="hljs-keyword">import</span> ScopedRateThrottle<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentReadOnlyModelViewSet</span>(<span class="hljs-title class_ inherited__">ReadOnlyModelViewSet</span>):<br>queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = StudentModelSerializer<br><span class="hljs-comment"># 局部限流 10/day</span><br>throttle\_classes = [ScopedRateThrottle]<br>throttle\_scope = <span class="hljs-string">&#x27;Hom&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED\_APPS = [<br>....<br><span class="hljs-string">&#x27;django\_filters&#x27;</span>,<span class="hljs-comment"># 注册主键</span><br>...<br>]<br><span class="hljs-comment"># 过滤查询，全局配置[过滤和排序公用一个配置项]</span><br><span class="hljs-string">&#x27;DEFAULT\_FILTER\_BACKENDS&#x27;</span>:<br>[<span class="hljs-string">&#x27;django\_filters.rest\_framework.DjangoFilterBackend&#x27;</span>],<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">filter</span>\_fields = [<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;classmate&#x27;</span>]<br></code></pre></td></tr></table></figure><p>简单的配置就是这样，全局开启过滤配置，具备设置过滤字段，就可以发送带参过滤Get请求了</p><p>还有很多强大的配置，等到时候工作用到了再去文档里看</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p><code>setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 过滤查询，全局配置[过滤和排序公用一个配置项]</span><br><span class="hljs-string">&#x27;DEFAULT\_FILTER\_BACKENDS&#x27;</span>:[<br><span class="hljs-string">&#x27;django\_filters.rest\_framework.DjangoFilterBackend&#x27;</span>, <span class="hljs-comment"># 过滤</span><br><span class="hljs-string">&#x27;rest\_framework.filters.OrderingFilter&#x27;</span>, <span class="hljs-comment"># 排序</span><br>],<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 局部配置排序</span><br><span class="hljs-comment"># 请求格式 ordering=-id - 表示倒序</span><br><span class="hljs-comment"># 多字段排序 ?ordering = -id,age 多字段排序</span><br>ordering\_fields = [<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>]<br></code></pre></td></tr></table></figure><p><a href="https://imgtu.com/i/qwhWE4"><img src="https://s1.ax1x.com/2022/03/27/qwhWE4.png"></a></p><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><h2 id="全局配置-2"><a href="#全局配置-2" class="headerlink" title="全局配置"></a>全局配置</h2><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 全局配置分页</span><br><span class="hljs-comment"># 页码分页器</span><br><span class="hljs-string">&#x27;DEFAULT\_PAGINATION\_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest\_framework.pagination.PageNumberPagination&#x27;</span>, <span class="hljs-comment"># page=页码&amp;page\_size=单页数据量</span><br><span class="hljs-comment"># 偏移量分页器</span><br><span class="hljs-comment"># &#x27;DEFAULT\_PAGINATION\_CLASS&#x27;: &#x27;rest\_framework.pagination.LimitOffsetPagination&#x27;, # limit=单页数据量&amp;offset=页码</span><br><span class="hljs-string">&#x27;PAGE\_SIZE&#x27;</span>: <span class="hljs-number">3</span>,<br></code></pre></td></tr></table></figure><p>这样配置，视图层只要是返回list就会分页</p><p><a href="https://imgse.com/i/qwhgDU"><img src="https://s1.ax1x.com/2022/03/27/qwhgDU.png"></a></p><p>但是通常不会设置全局分页，因为有很多业务是不需要分页的，我们需要配置局部分页</p><h2 id="局部配置-2"><a href="#局部配置-2" class="headerlink" title="局部配置"></a>局部配置</h2><p>局部配置就是自己写个自己的分页器，然后在需要进行分页的时候引入即可</p><p><code>pagiation.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentPageNumberPagination</span>(<span class="hljs-title class_ inherited__">PageNumberPagination</span>):<br>page\_size = <span class="hljs-number">10</span> <span class="hljs-comment"># 默认分页的每一页数据量</span><br><span class="hljs-built_in">max</span>\_page\_size = <span class="hljs-number">20</span> <span class="hljs-comment"># 客户端可调整最大单页数据量</span><br>page\_query\_param = <span class="hljs-string">&#x27;page&#x27;</span> <span class="hljs-comment"># 页码</span><br>page\_size\_query\_param = <span class="hljs-string">&#x27;page\_size&#x27;</span> <span class="hljs-comment"># 单页数据量</span><br></code></pre></td></tr></table></figure><p>在 <code>view.py</code>中引入自定义分页器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 分页器局部分页</span><br><span class="hljs-comment"># 声明自定义的分页配置类</span><br>pagination\_<span class="hljs-keyword">class</span> = StudentPageNumberPagination<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vyN2KU"><img src="https://s1.ax1x.com/2022/08/21/vyN2KU.png"></a></p><p><strong>注意：如果在视图内关闭分页功能，只需在视图内设置</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pagination\_<span class="hljs-keyword">class</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>DRF的 <code>Respone</code>已经给我们封装了很多错误信息，比如下面限流的</p><p>[<img src="https://s1.ax1x.com/2022/03/27/qwhDCn.png"></p><p>但是还是会有很多异常不能处理返回，一旦没有处理就之间返回错误页面，对前端是很不友好的，比如我们做一个除0操作</p><p><a href="https://imgtu.com/i/qwhh59"><img src="https://s1.ax1x.com/2022/03/27/qwhh59.png"></a></p><p>我们要对异常进行处理，就要自己去写个类，去处理 <code>Response</code>无法处理的异常</p><p><code>execeptions.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest\_framework.views <span class="hljs-keyword">import</span> exception\_handler<br><span class="hljs-keyword">from</span> rest\_framework <span class="hljs-keyword">import</span> status<br><span class="hljs-keyword">from</span> rest\_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> DatabaseError<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom</span>\_exception\_handle(exc,context):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">自定义异常函数 要注册到setting中</span><br><span class="hljs-string">:param exc: 异常对象</span><br><span class="hljs-string">:param context: 上下文，字典</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 先让drf处理</span><br>response = exception\_handler(exc,context)<br><span class="hljs-comment"># drf未识别的再自己处理</span><br><span class="hljs-keyword">if</span> response <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>view = context[<span class="hljs-string">&#x27;view&#x27;</span>]<br>request = context[<span class="hljs-string">&#x27;request&#x27;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(exc,DatabaseError):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%s]:%s&#x27;</span>%(view,exc))<br>response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>:<span class="hljs-string">&#x27;服务器内部错误&#x27;</span>&#125;,status=status.HTTP\_507\_INSUFFICIENT\_STORAGE)<br><span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(exc,ZeroDivisionError):<br>response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;算术异常&#x27;</span>&#125;, status=status.HTTP\_500\_INTERNAL\_SERVER\_ERROR)<br><span class="hljs-keyword">else</span>:<br>response = Response(&#123;<span class="hljs-string">&#x27;detail&#x27;</span>: <span class="hljs-string">&#x27;未捕获异常&#x27;</span>&#125;, status=status.HTTP\_500\_INTERNAL\_SERVER\_ERROR)<br><span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p>这个异常处理类最好写在父组件下，因为所有组件都需要这个全局异常处理</p><p>配置自定义异常处理 <code>setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自定义异常处理</span><br><span class="hljs-string">&#x27;EXCEPTION\_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;drfdemo.exceptions.custom\_exception\_handle&#x27;</span>,<br></code></pre></td></tr></table></figure><p>测试效果</p><p><a href="https://imgtu.com/i/qwh5CR"><img src="https://s1.ax1x.com/2022/03/27/qwh5CR.png"></a></p><h1 id="自动生成接口文档"><a href="#自动生成接口文档" class="headerlink" title="自动生成接口文档"></a>自动生成接口文档</h1><h2 id="coreapi"><a href="#coreapi" class="headerlink" title="coreapi"></a>coreapi</h2><p>需要先下载库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install coreapi<br></code></pre></td></tr></table></figure><p><code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自动生成接口文档</span><br><span class="hljs-string">&#x27;DEFAULT\_SCHEMA\_CLASS&#x27;</span>:<span class="hljs-string">&#x27;rest\_framework.schemas.AutoSchema&#x27;</span>,<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;docs/&#x27;</span>,include\_docs\_urls(title=<span class="hljs-string">&#x27;API文档&#x27;</span>)),<br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://127.0.0.1:8000/docs/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E4%BA%86%EF%BC%8C%E8%BF%98%E5%8F%AF%E4%BB%A5%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://127.0.0.1:8000/docs/，即可看到接口文档了，还可以进行测试</a></p><p><a href="https://imgtu.com/i/qwhTv6"><img src="https://s1.ax1x.com/2022/03/27/qwhTv6.md.png"></a></p><p><a href="https://imgtu.com/i/qwhogx"><img src="https://s1.ax1x.com/2022/03/27/qwhogx.md.png"></a></p><h2 id="swagger"><a href="#swagger" class="headerlink" title="swagger"></a>swagger</h2><p>SpringBoot常用的API接口文档就是Swagger，DRF也可以整合Swagger</p><p>下载库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install drf\_yasg<br></code></pre></td></tr></table></figure><p>添加组件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED\_APPS = [<br>...<br><span class="hljs-string">&#x27;drf\_yasg&#x27;</span>,<br>...<br>]<br></code></pre></td></tr></table></figure><p><code>swagger_setting.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">schema\_view = get\_schema\_view(<br>openapi.Info(<br>title=<span class="hljs-string">&quot;接口文档平台&quot;</span>, <span class="hljs-comment"># 必传</span><br>default\_version=<span class="hljs-string">&#x27;v1&#x27;</span>, <span class="hljs-comment"># 必传</span><br>description=<span class="hljs-string">&quot;文档描述&quot;</span>,<br>terms\_of\_service=<span class="hljs-string">&#x27;&#x27;</span>,<br>contact=openapi.Contact(email=<span class="hljs-string">&quot;389783961@qq.com&quot;</span>),<br>license=openapi.License(name=<span class="hljs-string">&quot;BSD LICENSE&quot;</span>)<br>),<br>public=<span class="hljs-literal">True</span>,<br><span class="hljs-comment"># permission\_classes=(rest\_framework.permissions.AllowAny) # 权限类</span><br>)<br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>path(<span class="hljs-string">&#x27;stu/&#x27;</span>, include(<span class="hljs-string">&#x27;students.urls&#x27;</span>)),<br>path(<span class="hljs-string">&#x27;req/&#x27;</span>, include(<span class="hljs-string">&#x27;req.urls&#x27;</span>)),<br><span class="hljs-comment"># path(&#x27;docs/&#x27;,include\_docs\_urls(title=&#x27;API文档&#x27;)),</span><br>path(<span class="hljs-string">&#x27;swagger/&#x27;</span>, schema\_view.<span class="hljs-keyword">with</span>\_ui(<span class="hljs-string">&#x27;swagger&#x27;</span>, cache\_timeout=<span class="hljs-number">0</span>), name=<span class="hljs-string">&#x27;schema-swagger&#x27;</span>),<br>path(<span class="hljs-string">&#x27;redoc/&#x27;</span>, schema\_view.<span class="hljs-keyword">with</span>\_ui(<span class="hljs-string">&#x27;redoc&#x27;</span>, cache\_timeout=<span class="hljs-number">0</span>), name=<span class="hljs-string">&#x27;schema-redoc&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure><p>浏览器访问<a href="http://127.0.0.1:8000/swagger/">http://127.0.0.1:8000/swagger/</a></p><p><a href="https://imgtu.com/i/qwhI81"><img src="https://s1.ax1x.com/2022/03/27/qwhI81.png"></a></p><hr><h1 id="DRF系列总结"><a href="#DRF系列总结" class="headerlink" title="DRF系列总结"></a>DRF系列总结</h1><p>作为Django的插件，DRF对API的封装非常完美，但是有时候又显得很鸡肋，不够相比它带给我们的便利，就不值一提了。</p><p>drfdemo源码</p><p><a href="https://q1mi.github.io/Django-REST-framework-documentation/#_3">DRF中文官方文档</a></p><p>2022年3月27日10点06分完结！</p>]]></content>
    
    
    
    <tags>
      
      <tag>DRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework请求响应视图路由</title>
    <link href="/2022/08/21/Django-Rest-Framework%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%A7%86%E5%9B%BE%E8%B7%AF%E7%94%B1/"/>
    <url>/2022/08/21/Django-Rest-Framework%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E8%A7%86%E5%9B%BE%E8%B7%AF%E7%94%B1/</url>
    
    <content type="html"><![CDATA[<p>DRF封装了很多关于请求信息的参数，我们可以通过 <code>request</code>获取，响应 <code>Response</code> 也有着规定的模板，让接口响应更加规范。</p><p>在视图中，封装了非常多的视图类，便于简化视图层操作。</p><ul><li><code>APIView</code>是DRF中提供的所有视图类的积累，它继承于<code>django.views.View</code>，传入的请求是DRF的 <code>Request</code>实例，任何<code>APIException</code>异常都会被捕获，并且传递给合适的响应 ，业务代码需要自己写</li><li><code>ViewSet</code>，继承自<code>APIView</code>，没有继承拓展类，业务逻辑还得自己去写，提供action参数，进行视图和路由 的绑定，不再使用http请求作为视图方法 get post put delete 可以自己指定路由和方法绑定，实现把关于一个模型的操作都写在一个类里</li><li><code>GenericViewSet</code>，继承自<code>GenericAPIView</code>，没有继承拓展类，业务逻辑还得自己去写，把部分公共代码实现了服用。不再使用http请求作为视图方法 get post put delete 可以自己指定路由和方法绑定，实现把关于一个模型的操作都写在一个类里</li></ul><p>两个拓展视图集：</p><ul><li><code>ModelViewSet</code>（增删改查都可以实现了），继承了<code>GenericAPIView</code>，继承了五个拓展类</li><li><code>ReadOnlyModelViewSet</code>（实现了获取多个数据对象和获取单一数据对象），继承了<code>GenericAPIView</code>、<code>ListModelMixin</code> 和 <code>RetrieveModelMixin</code>。</li></ul><p>路由…</p><h1 id="请求响应"><a href="#请求响应" class="headerlink" title="请求响应"></a>请求响应</h1><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><p>新建一个req应用，用于专门编写本次实验的例子，视图层代码如下；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">request：&lt;rest\_framework.request.Request: GET &#x27;/req/s1&#x27;&gt; 用的drf</span><br><span class="hljs-string">request.\_request：&lt;WSGIRequest: GET &#x27;/req/s1&#x27;&gt;</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;request：<span class="hljs-subst">&#123;request&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;request.\_request：<span class="hljs-subst">&#123;request.\_request&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;drf提供的request常用操作-------------------------------------&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;用户：<span class="hljs-subst">&#123;request.user&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;地址栏参数：<span class="hljs-subst">&#123;request.query\_params&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;地址栏参数转字典：<span class="hljs-subst">&#123;request.query\_params.<span class="hljs-built_in">dict</span>()&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;msg&#x27;</span>:<span class="hljs-string">&#x27;ok&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">请求体：&lt;QueryDict: &#123;&#x27;name&#x27;: [&#x27;小王&#x27;], &#x27;files&#x27;: [&lt;InMemoryUploadedFile: 1\_Request.txt (text/plain)&gt;, &lt;InMemoryUploadedFile: 1\_Response.txt (text/plain)&gt;]&#125;&gt;</span><br><span class="hljs-string">请求体转字典：&#123;&#x27;name&#x27;: &#x27;小王&#x27;, &#x27;files&#x27;: &lt;InMemoryUploadedFile: 1\_Response.txt (text/plain)&gt;&#125;</span><br><span class="hljs-string">&#123;&lt;InMemoryUploadedFile: 1\_Response.txt (text/plain)&gt;&#125;</span><br><span class="hljs-string">请求体中的文件列表：&lt;MultiValueDict: &#123;&#x27;files&#x27;: [&lt;InMemoryUploadedFile: 1\_Request.txt (text/plain)&gt;, &lt;InMemoryUploadedFile: 1\_Response.txt (text/plain)&gt;]&#125;&gt;</span><br><span class="hljs-string">&#123;&#x27;ALLUSERSPROFILE&#x27;: &#x27;C:\\ProgramData&#x27;, &#x27;APPDATA&#x27;: &#x27;C:\\Users\\Luffy\\AppData\\Roaming&#x27;, 省略&#125;</span><br><span class="hljs-string">NSFOCUS</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;请求体：<span class="hljs-subst">&#123;request.data&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;请求体转字典：<span class="hljs-subst">&#123;request.data.<span class="hljs-built_in">dict</span>()&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(&#123;request.data.<span class="hljs-built_in">dict</span>().get(<span class="hljs-string">&#x27;files&#x27;</span>)&#125;)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;请求体中的文件列表：<span class="hljs-subst">&#123;request.FILES&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># 获取请求头</span><br><span class="hljs-built_in">print</span>(request.\_request.META)<br><span class="hljs-comment"># 自定义请求头 要用HTTP\_大写单词获取</span><br><span class="hljs-built_in">print</span>(request.\_request.META.get(<span class="hljs-string">&#x27;HTTP\_COMPANY&#x27;</span>))<br><span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;ok&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>请求中很多键值对的数据类型并不是用的Python的字典，所以需要获取值的时候要转为字典再获取</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><p><code>Response(data, status=None, template_name=None, headers=None, content_type=None)</code></p><p>返回的模板如上，举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">return</span> Response(data=serializer.data,status=status.HTTP\_201\_CREATED,headers=&#123;<span class="hljs-string">&#x27;company&#x27;</span>:<span class="hljs-string">&#x27;NSFOCUS&#x27;</span>&#125;,content\_<span class="hljs-built_in">type</span>=<span class="hljs-string">&#x27;application/json&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个每个固定的，知道里面需要传的参数即可</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>在开篇也已经说到了各个视图类的基本内容，直接上代码：</p><h2 id="APIView"><a href="#APIView" class="headerlink" title="APIView"></a>APIView</h2><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;stu3/&lt;int:pk&gt;/&#x27;</span>,TeacherInfoAPIView.<span class="hljs-keyword">as</span>\_view()), <span class="hljs-comment"># 单个</span><br>path(<span class="hljs-string">&#x27;stu3/&#x27;</span>,TeacherListAPIView.<span class="hljs-keyword">as</span>\_view()), <span class="hljs-comment"># 多个</span><br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherListAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;APIView不支持自定义方法，只支持get post put delete的https请求&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取list</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>teacher = Teacher.objects.<span class="hljs-built_in">all</span>()<br>serializer = TeacherModelSerializer(instance=teacher, many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">self,request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">新增数据</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>serializer = TeacherModelSerializer(data=request.data.<span class="hljs-built_in">dict</span>())<br>serializer.<span class="hljs-keyword">is</span>\_valid(<span class="hljs-keyword">raise</span>\_exception=<span class="hljs-literal">True</span>)<br>serializer.save()<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_201\_CREATED)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherInfoAPIView</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self,request,pk</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;根据id查询老师信息&#x27;&#x27;&#x27;</span><br>teacher = Teacher.objects.get(pk=pk)<br>serializer = TeacherModelSerializer(instance=teacher)<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">put</span>(<span class="hljs-params">self,request,pk</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;根据id更新&#x27;&#x27;&#x27;</span><br>data = request.data.<span class="hljs-built_in">dict</span>()<br>teacher = Teacher.objects.get(pk=pk)<br>serializer = TeacherModelSerializer(instance=teacher,data=data)<br>serializer.<span class="hljs-keyword">is</span>\_valid(<span class="hljs-keyword">raise</span>\_exception=<span class="hljs-literal">True</span>)<br>serializer.save()<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">self,request,pk</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;根据id删除，这里直接删了，因为数据库中没有isDeleted字段&#x27;&#x27;&#x27;</span><br>data = request.data.<span class="hljs-built_in">dict</span>()<br>teacher = Teacher.objects.get(pk=pk)<br>teacher.delete()<br><span class="hljs-keyword">return</span> Response(status=status.HTTP\_200\_OK)<br></code></pre></td></tr></table></figure><h2 id="ViewSet"><a href="#ViewSet" class="headerlink" title="ViewSet"></a>ViewSet</h2><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;stu4&#x27;</span>,TeacherViewSet.<span class="hljs-keyword">as</span>\_view(actions=&#123;<span class="hljs-string">&#x27;get&#x27;</span>:<span class="hljs-string">&#x27;list&#x27;</span>,<br><span class="hljs-string">&#x27;post&#x27;</span>:<span class="hljs-string">&#x27;add&#x27;</span>,<br>&#125;)),<br>path(<span class="hljs-string">&#x27;stu4/&lt;int:pk&gt;/&#x27;</span>, TeacherViewSet.<span class="hljs-keyword">as</span>\_view(actions=&#123;<span class="hljs-string">&#x27;get&#x27;</span>: <span class="hljs-string">&#x27;get\_teacherById&#x27;</span>,<br>&#125;)),<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherViewSet</span>(<span class="hljs-title class_ inherited__">ViewSet</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">没有继承拓展类，业务逻辑还得自己去写，提供action参数，进行视图和路由 的绑定，</span><br><span class="hljs-string">不再使用http请求作为视图方法 get post put delete 可以自己指定路由和方法绑定，</span><br><span class="hljs-string">实现把关于一个模型的操作都写在一个类里</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self,request</span>):<br>teacher = Teacher.objects.<span class="hljs-built_in">all</span>()<br>serializer = TeacherModelSerializer(instance=teacher, many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self,request</span>):<br>serializer = TeacherModelSerializer(data=request.data.<span class="hljs-built_in">dict</span>())<br>serializer.<span class="hljs-keyword">is</span>\_valid(<span class="hljs-keyword">raise</span>\_exception=<span class="hljs-literal">True</span>)<br>serializer.save()<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_201\_CREATED)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>\_teacherById(<span class="hljs-variable language_">self</span>,request,pk):<br><span class="hljs-string">&#x27;&#x27;&#x27;根据id查询老师信息&#x27;&#x27;&#x27;</span><br>teacher = Teacher.objects.get(pk=pk)<br>serializer = TeacherModelSerializer(instance=teacher)<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br></code></pre></td></tr></table></figure><p>写了几个，就是可以自定义函数方法了</p><h2 id="GenericViewSet"><a href="#GenericViewSet" class="headerlink" title="GenericViewSet"></a>GenericViewSet</h2><p>可以把我们经常写的模型和序列化器代码抽取出来</p><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;stu5&#x27;</span>, TeacherGenericViewSet.<span class="hljs-keyword">as</span>\_view(actions=&#123;<span class="hljs-string">&#x27;get&#x27;</span>: <span class="hljs-string">&#x27;list&#x27;</span>,<br><span class="hljs-string">&#x27;post&#x27;</span>: <span class="hljs-string">&#x27;create&#x27;</span>,<br>&#125;)),<br>path(<span class="hljs-string">&#x27;stu5/&lt;int:pk&gt;/&#x27;</span>, TeacherGenericViewSet.<span class="hljs-keyword">as</span>\_view(actions=&#123;<span class="hljs-string">&#x27;get&#x27;</span>: <span class="hljs-string">&#x27;get\_one&#x27;</span>,<br>&#125;)),<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherGenericViewSet</span>(<span class="hljs-title class_ inherited__">GenericViewSet</span>):<br>queryset = Teacher.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = TeacherModelSerializer<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">list</span>(<span class="hljs-params">self, request</span>):<br>serializer = <span class="hljs-variable language_">self</span>.get\_serializer(instance=<span class="hljs-variable language_">self</span>.get\_queryset(), many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(serializer.data)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, request</span>):<br>serializer = <span class="hljs-variable language_">self</span>.get\_serializer(data=request.data)<br>serializer.<span class="hljs-keyword">is</span>\_valid(<span class="hljs-keyword">raise</span>\_exception=<span class="hljs-literal">True</span>)<br>serializer.save()<br><span class="hljs-keyword">return</span> Response(serializer.data, status=status.HTTP\_201\_CREATED)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>\_one(<span class="hljs-variable language_">self</span>, request, pk):<br><span class="hljs-keyword">try</span>:<br>instance = <span class="hljs-variable language_">self</span>.get\_<span class="hljs-built_in">object</span>()<br><span class="hljs-comment"># 实例化序列化器对象</span><br>serializer = <span class="hljs-variable language_">self</span>.get\_serializer(instance=instance)<br><span class="hljs-keyword">return</span> Response(data=serializer.data, status=status.HTTP\_200\_OK)<br><span class="hljs-keyword">except</span> Student.DoesNotExist:<br><span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&#x27;msg&#x27;</span>: <span class="hljs-string">&#x27;老师不存在&#x27;</span>&#125;, status=status.HTTP\_404\_NOT\_FOUND)<br></code></pre></td></tr></table></figure><h2 id="ModelViewSet"><a href="#ModelViewSet" class="headerlink" title="ModelViewSet"></a>ModelViewSet</h2><p>实现了五个拓展类，所以写两行代码即可有5个http接口</p><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest\_framework.routers <span class="hljs-keyword">import</span> DefaultRouter,SimpleRouter<br>router = DefaultRouter()<br><span class="hljs-comment"># 注册试图（访问前缀，视图集，调用别名）</span><br>router.register(prefix=<span class="hljs-string">&#x27;s9&#x27;</span>,viewset=StudentMixinViewSet,basename=<span class="hljs-string">&#x27;s9&#x27;</span>)<br><span class="hljs-comment"># 路由列表</span><br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentModelViewSet</span>(<span class="hljs-title class_ inherited__">ModelViewSet</span>):<br>queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = StudentModelSerializer<br></code></pre></td></tr></table></figure><h2 id="ReadOnlyModelViewSet"><a href="#ReadOnlyModelViewSet" class="headerlink" title="ReadOnlyModelViewSet"></a>ReadOnlyModelViewSet</h2><p>只能读</p><p><code>url.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest\_framework.routers <span class="hljs-keyword">import</span> DefaultRouter,SimpleRouter<br>router = DefaultRouter()<br><span class="hljs-comment"># 注册试图（访问前缀，视图集，调用别名）</span><br>router.register(prefix=<span class="hljs-string">&#x27;stu6&#x27;</span>,viewset=StudentModelViewSet,basename=<span class="hljs-string">&#x27;stu6&#x27;</span>)<br>router.register(prefix=<span class="hljs-string">&#x27;stu7&#x27;</span>,viewset=StudentReadOnlyModelViewSet,basename=<span class="hljs-string">&#x27;stu7&#x27;</span>)<br><span class="hljs-comment"># 路由列表</span><br>urlpatterns += router.urls<br></code></pre></td></tr></table></figure><p><code>view.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">ViewSet</span><br><span class="hljs-string">GenericViewSet</span><br><span class="hljs-string">ModelViewSet = GenericViewSet + ListModelMixin + CreateModelMixin + UpdateModelMixin+</span><br><span class="hljs-string">RetrieveModelMixin + DestoryModelMixin</span><br><span class="hljs-string">ReadOnlyModelViewSet = GenericViewSet + ListModelMixin + RetrieveModelMixin</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentReadOnlyModelViewSet</span>(<span class="hljs-title class_ inherited__">ReadOnlyModelViewSet</span>):<br>queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = StudentModelSerializer<br></code></pre></td></tr></table></figure><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>REST框架添加了对自动URL路由到Django的支持，并为你提供了一种简单、快速和一致的方式来将视图逻辑连接到一组URL。</p><p>在上面编写视图用例的已经写到了两种路由，第一种和Django类似，但是通过 <code>as_view()</code>，自适应路由（我这样理解的，不清楚对不对），就是可以根据试图层的http接口自己生成路由，在 <code>APIView</code>中不需要写参数。但在GenericViewSet中或者继承了GenericViewSet的视图模板中，不仅仅有http借口，此时就可以添加参数action来进行视图和路由的匹配。</p><p>对于ModelViewSet和ReadOnlyModelViewSet可以使用DefaultRouter和SimpleRouter，DefaultRouter和SimpleRouter两者简单的区别就是前者提供API页面，SimpleRouter后者只是简单的数据返回。</p><p>关于DRF路由的写法，还有自定义路由等等，可以参考中文官方文档</p><p><a href="https://q1mi.github.io/Django-REST-framework-documentation/api-guide/routers_zh/">Django REST framework 中文文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>DRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework序列化器</title>
    <link href="/2022/08/21/Django-Rest-Framework%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    <url>/2022/08/21/Django-Rest-Framework%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在返回json数据时，整合DRF后并没有取出QuerySet中的数据，再转字典，也能直接返回json，这就是序列化器的功劳。</p><ul><li>序列化，序列化器会把模型对象转换成字典，经过response以后变成json字符串</li><li>反序列化,把客户端发送过来的数据,经过request以后变成字典,序列化器可以把字典转成模型</li><li>反序列化,完成数据校验功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Student<br><span class="hljs-comment"># 序列化字段</span><br><span class="hljs-comment"># 全部</span><br>fields = <span class="hljs-string">&#x27;\_\_all\_\_&#x27;</span><br><span class="hljs-comment"># 一个一个写</span><br><span class="hljs-comment"># fields =[&#x27;id&#x27;,&#x27;name&#x27;]</span><br></code></pre></td></tr></table></figure><p>student序列化器继承了 <code>serializers.ModelSerializer</code>，这是转为数据库中的表设计的，一一对应，帮我们重写了create()和update()方法，所以与数据库中的表一一对应的字段我们可以直接继承该类，简化代码</p><p>对于不是表对应的字段，我们则需要继承 <code>serializers.Serializer</code></p><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p><strong>ModelSerializer</strong></p><p>定义的序列化器，继承 <code>serializers.ModelSerializer</code>，在里面声明Meta类，通过指定对应的模型类和序列化字段即可完成最简单的序列化器编写。</p><p>对于单表查询这是非常快的，但是很多情况下我们都是需要在多个表之间进行联合查询。我们对model进行补充，设计外键进行约束，方便联合查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>SEX\_OPTION = (<br>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;保密&#x27;</span>),<br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>)<br>name = models.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">20</span>,verbose\_name=<span class="hljs-string">&#x27;姓名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;姓名&#x27;</span>)<br>age = models.SmallIntegerField(verbose\_name=<span class="hljs-string">&#x27;年龄&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>sex = models.SmallIntegerField(choices=SEX\_OPTION,verbose\_name=<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;性别，0-&gt;保密，1-&gt;男，2-&gt;女，&#x27;</span>)<br>classmate = models.CharField(db\_column=<span class="hljs-string">&#x27;classmate&#x27;</span>,<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">13</span>,verbose\_name=<span class="hljs-string">&#x27;班级&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;班级&#x27;</span>)<br>description = models.TextField(null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>,verbose\_name=<span class="hljs-string">&#x27;个性签名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;个性签名，可以为空&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>db\_table = <span class="hljs-string">&#x27;db\_student&#x27;</span><br>verbose\_name = <span class="hljs-string">&#x27;学生信息&#x27;</span><br>verbose\_name\_plural = verbose\_name<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span>(models.Model):<br>name = models.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">52</span>,verbose\_name=<span class="hljs-string">&#x27;课程名称&#x27;</span>)<br>teacher = models.ForeignKey(<span class="hljs-string">&#x27;Teacher&#x27;</span>,on\_delete=models.DO\_NOTHING,related\_name=<span class="hljs-string">&#x27;course&#x27;</span>,db\_constraint=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meat</span>:<br>db\_stable = <span class="hljs-string">&#x27;db\_course&#x27;</span><br><span class="hljs-keyword">def</span> \_\_<span class="hljs-built_in">str</span>\_\_(<span class="hljs-variable language_">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span>(models.Model):<br>name = models.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">50</span>,verbose\_name=<span class="hljs-string">&#x27;姓名&#x27;</span>)<br>sex = models.BooleanField(default=<span class="hljs-literal">False</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>db\_table = <span class="hljs-string">&#x27;db\_teacher&#x27;</span><br><span class="hljs-keyword">def</span> \_\_<span class="hljs-built_in">str</span>\_\_(<span class="hljs-variable language_">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Achievement</span>(models.Model):<br>score = models.DecimalField(default=<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>\_digits=<span class="hljs-number">4</span>,decimal\_places=<span class="hljs-number">1</span>,verbose\_name=<span class="hljs-string">&#x27;成绩&#x27;</span>)<br>student = models.ForeignKey(Student,on\_delete=models.DO\_NOTHING,related\_name=<span class="hljs-string">&#x27;s\_achievement&#x27;</span>,db\_constraint=<span class="hljs-literal">False</span>)<br>course = models.ForeignKey(Course,on\_delete=models.DO\_NOTHING,related\_name=<span class="hljs-string">&#x27;c\_achievement&#x27;</span>,db\_constraint=<span class="hljs-literal">False</span>)<br>create\_time = models.DateTimeField(auto\_created=datetime.now)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>db\_table = <span class="hljs-string">&#x27;db\_achievement&#x27;</span><br><span class="hljs-keyword">def</span> \_\_<span class="hljs-built_in">str</span>\_\_(<span class="hljs-variable language_">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.score<br></code></pre></td></tr></table></figure><p>重新进行模型迁移和数据导入，写入几条测试数据</p><p><strong>功能编写：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Course<br>fields = [<span class="hljs-string">&#x27;name&#x27;</span>]<br><span class="hljs-comment"># 第一种外键查 外面写个序列化器</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherCourseModelSerializer</span>(serializers.ModelSerializer):<br>course = CourseModelSerializer(many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Teacher<br>fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;course&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>\_teacher\_course(<span class="hljs-variable language_">self</span>,request):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">查询老师代课信息</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>teacher = Teacher.objects.<span class="hljs-built_in">all</span>()<br>serializer = TeacherCourseModelSerializer(instance=teacher,many=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">return</span> Response(data=serializer.data,status=status.HTTP\_200\_OK)<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vyYvOe"><img src="https://s1.ax1x.com/2022/08/21/vyYvOe.png"></a></p><p>这是第一种，需要外面写个序列化器，代码显得很冗余，第二种直接写里面，第三种是指明嵌套深度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherCourseModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-comment"># 第一种</span><br><span class="hljs-comment"># course = CourseModelSerializer(many=True)</span><br><span class="hljs-comment"># 第二种直接在里面写</span><br><span class="hljs-comment"># course =serializers.CharField(source=&#x27;course.name&#x27;)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Teacher<br>fields = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;course&#x27;</span>]<br><span class="hljs-comment"># 第三种 写个嵌套深度即可</span><br>depth = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>第四种是通过外键指明深度，直接访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第四种</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudenAchievementModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Student<br><span class="hljs-comment"># s\_achievement 外键名称</span><br>fields = [<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;s\_achievement&#x27;</span>]<br>depth = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这四种实现的效果类似，都有层层嵌套，不好识别的问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>SEX\_OPTION = (<br>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;保密&#x27;</span>),<br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>)<br>name = models.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">20</span>,verbose\_name=<span class="hljs-string">&#x27;姓名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;姓名&#x27;</span>)<br>age = models.SmallIntegerField(verbose\_name=<span class="hljs-string">&#x27;年龄&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>sex = models.SmallIntegerField(choices=SEX\_OPTION,verbose\_name=<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;性别，0-&gt;保密，1-&gt;男，2-&gt;女，&#x27;</span>)<br>classmate = models.CharField(db\_column=<span class="hljs-string">&#x27;classmate&#x27;</span>,<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">13</span>,verbose\_name=<span class="hljs-string">&#x27;班级&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;班级&#x27;</span>)<br>description = models.TextField(null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>,verbose\_name=<span class="hljs-string">&#x27;个性签名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;个性签名，可以为空&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>db\_table = <span class="hljs-string">&#x27;db\_student&#x27;</span><br>verbose\_name = <span class="hljs-string">&#x27;学生信息&#x27;</span><br>verbose\_name\_plural = verbose\_name<br><span class="hljs-keyword">def</span> \_\_<span class="hljs-built_in">str</span>\_\_(<span class="hljs-variable language_">self</span>):<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.name<br><span class="hljs-meta">@property</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">achievement</span>(<span class="hljs-params">self</span>):<br>queryset = <span class="hljs-variable language_">self</span>.s\_achievement.<span class="hljs-built_in">all</span>()<br>ret = [&#123;<span class="hljs-string">&#x27;score&#x27;</span>: item.score, <span class="hljs-string">&#x27;course&#x27;</span>: item.course.name, <span class="hljs-string">&#x27;teacher&#x27;</span>: item.course.teacher.name&#125; <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span><br>queryset]<br><span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第五种方法 自定义属性 更加灵活 不像上面嵌套太多了 套娃</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentAchievement2ModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Student<br>fields = [<span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;achievement&#x27;</span>]<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vyYzeH"><img src="https://s1.ax1x.com/2022/08/21/vyYzeH.png"></a></p><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p><strong>Serializer</strong></p><p>Serializer的数据并不是来自数据库，所以我们在使用该类时需要自己去声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 声明序列化器，所有的序列化器都要直接或者间接继承于Serializer</span><br><span class="hljs-comment"># 其中，ModelSerializer是Serializer的子类，ModerlSerializer在Serializer的基础上进行了代码简化</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentSerializer</span>(serializers.Serializer):<br><span class="hljs-comment"># 学生序列转换器</span><br><span class="hljs-comment"># 1.需要进行数据转换的字段</span><br><span class="hljs-built_in">id</span> = serializers.IntegerField(read\_only=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 用户提交数据进行反序列化时，序列化器进行序列化转换数据给客户端时才转给客户端</span><br>name = serializers.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">20</span>,required=<span class="hljs-literal">True</span>)<br>classmate = serializers.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">4</span>,required=<span class="hljs-literal">True</span>)<br>age = serializers.IntegerField()<br>sex = serializers.IntegerField(validators= [check\_sex,])<br>description = serializers.CharField(required=<span class="hljs-literal">False</span>,default=<span class="hljs-string">&#x27;这家伙很懒，什么也没写！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>和ModelSerializer类似，因为ModelSerializer的数据来自数据库，所以直接与model关联即可，但Serializer的数据并不是来自数据库，需要手动声明。</p><p>在进行添加和更新数据操作时，ModelSerializer已经帮我们实现了create()和update()方法，但Serializer并没有实现，需要我们手动实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4. 编写模型的添加和更新代码</span><br><span class="hljs-comment"># 添加操作 save() 要实现save</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">self, validated\_data</span>):<br><span class="hljs-comment"># 添加数据的实现方法</span><br>student = Student.objects.create(\*\*validated\_data)<br><span class="hljs-comment"># 要是字段多了，不匹配，就要拿出来</span><br><span class="hljs-comment"># student = Student.objects.create(</span><br><span class="hljs-comment"># name = validated\_data.get(&#x27;name&#x27;)</span><br><span class="hljs-comment"># .....</span><br><span class="hljs-comment"># )</span><br><span class="hljs-comment"># 返回添加后的模型</span><br><span class="hljs-keyword">return</span> student<br><span class="hljs-comment"># 更新操作要实现update()</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">update</span>(<span class="hljs-params">self, instance, validated\_data</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">:param instance: 更新的模型对象数据</span><br><span class="hljs-string">:param validated\_data: 新数据</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> validated\_data.get(<span class="hljs-string">&#x27;name&#x27;</span>):<br>instance.name = validated\_data.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br><span class="hljs-keyword">if</span> validated\_data.get(<span class="hljs-string">&#x27;age&#x27;</span>):<br>instance.age = validated\_data.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br><span class="hljs-keyword">if</span> validated\_data.get(<span class="hljs-string">&#x27;sex&#x27;</span>):<br>instance.sex = validated\_data.get(<span class="hljs-string">&#x27;sex&#x27;</span>)<br><span class="hljs-keyword">if</span> validated\_data.get(<span class="hljs-string">&#x27;classmate&#x27;</span>):<br>instance.classmate = validated\_data.get(<span class="hljs-string">&#x27;classmate&#x27;</span>)<br><span class="hljs-keyword">if</span> validated\_data.get(<span class="hljs-string">&#x27;description&#x27;</span>):<br>instance.description = validated\_data.get(<span class="hljs-string">&#x27;description&#x27;</span>)<br>instance.save()<br><span class="hljs-keyword">return</span> instance<br></code></pre></td></tr></table></figure><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 3.验证代码</span><br><span class="hljs-comment"># 3.1 对单个字段进行验证</span><br><span class="hljs-comment"># 格式： 方法名必须以‘valiidate\_&lt;字段名&gt;’作为验证方法名，否则is\_valid找不到</span><br><span class="hljs-comment"># 验证方法执行时，is\_valid会把当前客户端提交的字段传递给验证方法，然后校验</span><br><span class="hljs-comment"># 验证方法把返回值回传给序列化，否则数据会丢失</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>\_name(<span class="hljs-variable language_">self</span>,data):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;验证参数：<span class="hljs-subst">&#123;data&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">if</span> data == <span class="hljs-string">&#x27;Python&#x27;</span>:<br><span class="hljs-comment"># 抛异常</span><br><span class="hljs-keyword">raise</span> serializers.ValidationError(code=<span class="hljs-string">&#x27;name&#x27;</span>,detail=<span class="hljs-string">&#x27;当前输入存在敏感数据&#x27;</span>)<br><span class="hljs-keyword">return</span> data<br><span class="hljs-comment"># 3.2 对多个字段的数据进行验证</span><br><span class="hljs-comment"># 格式：一个序列化器只能有0or1个多字段校验，方法名位于</span><br><span class="hljs-comment"># 方法名必须叫 validate(self,data)，否则is\_valid找不到</span><br><span class="hljs-comment"># 步骤：接收参数 验证 返回</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):<br>age = attrs.get(<span class="hljs-string">&#x27;age&#x27;</span>)<br>classmate = attrs.get(<span class="hljs-string">&#x27;classmate&#x27;</span>)<br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">20</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">str</span>(classmate).startswith(<span class="hljs-string">&#x27;5&#x27;</span>):<br><span class="hljs-keyword">raise</span> serializers.ValidationError(<span class="hljs-string">&#x27;对不起！年龄20以下不能加入到5字开头的班级中&#x27;</span>)<br><span class="hljs-keyword">return</span> attrs<br></code></pre></td></tr></table></figure><p>做校验的数据是从客户端发来的，有的并不和数据库中字段一一对应，所以就不能用model声明的约束去控制了，需要手动判断。</p><h2 id="序列化器的使用"><a href="#序列化器的使用" class="headerlink" title="序列化器的使用"></a>序列化器的使用</h2><p>当编写完序列化器后，可以在视图层是直接视图</p><p><strong>更新和删除</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">student = Student.objects.get(pk=pk)<br>serializer = StudentModelSerializer(instance=student,data=params)<br>serializer.<span class="hljs-keyword">is</span>\_valid(<span class="hljs-keyword">raise</span>\_exception=<span class="hljs-literal">True</span>)<br>serializer.save()<br></code></pre></td></tr></table></figure><p>这段是更新student的代码，通过接受的id去查询原信息，然后把原信息和客户端提交的信息放入序列化器，<code>instance</code>传入数据库查到的数据，<code>data</code>传入客户端提交的信息，<code>is_valid</code>进行参数校验，<code>raise_exception=True</code>是设置抛出异常，最后调用序列化器的<code>save</code>保存数据。</p><p>对于删除操作，很多时候并不是在数据库中把数据给删除掉，相反是修改<code>IsDeleted</code>的值，与更新操作类似</p><p><strong>查询list和根据ID查询</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">teacher = Teacher.objects.<span class="hljs-built_in">all</span>()<br>serializer = TeacherCourseModelSerializer(instance=teacher,many=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>需要在放入序列化器的时候传入 <code>many=True</code>，内部会调用循环返回所有查询到的数据</p><p>根据ID查询某单个数据，不传 <code>many</code>即可，默认是 <code>False</code></p><p><strong>添加操作</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">param = request.data.dict()<br>serializer = TeacherModelSerializer(data=param)<br>serializer.is\_valid(raise\_exception=True)<br>serializer.save()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>DRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django Rest Framework入门</title>
    <link href="/2022/08/21/Django-Rest-Framework%E5%85%A5%E9%97%A8/"/>
    <url>/2022/08/21/Django-Rest-Framework%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>Python应用非常广泛，人工智能领域、自动化、Web开发中都有着不错的生态支持。</p><p>在Web开发领域，Djang和Flask作为目前主流的Web框架社区热度非常高，Django比Flask体积大很多，可以搭建大型的Web应用服务器，所以最近也在学这个框架。</p><p>其实Django东西并不多，相反写起来有点复杂。Django REST framework（后面简称DRF）就出现了，以<strong>RESTful</strong>作为接口命名规范，在操作数据时加入序列化器简化数据校验，字段返回等操作，封装视图层简化接口编写和参数返回，提供<strong>认证、权限、限流、过滤、排序、分页、异常处理、API接口文档</strong>等组件，功能非常强大，可以说仅仅Django是一个基石，DRF才是真正的开发必备。</p><p>下面从0到1，总结自己学习DRF的过程。</p><ul><li><strong>Django REST framework 入门</strong></li><li><strong>Django REST framework 序列化器</strong></li><li><strong>Django REST framework 请求响应 视图 路由</strong></li><li><strong>Django REST framework 八大组件</strong></li></ul><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>Windows 10</li><li>Python 3.6</li><li>Mysql 5.7</li><li>Django 3.2</li><li>Pycharm 2019.3</li></ul><p>安装好Python3.6后，安装pipenv做虚拟环境，以后的库就放在虚拟环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs shell">Microsoft Windows [版本 10.0.18363.1556]<br>(c) 2019 Microsoft Corporation。保留所有权利。<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建<span class="hljs-built_in">env</span>目录作为虚拟环境地址</span><br>D:\Environment\env&gt;dir<br>驱动器 D 中的卷是 Program<br>卷的序列号是 654B-777A<br>D:\Environment\env 的目录<br>2022/03/24 09:56 &lt;DIR&gt; .<br>2022/03/24 09:56 &lt;DIR&gt; ..<br>0 个文件 0 字节<br>2 个目录 283,803,500,544 可用字节<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装pipenv</span><br>D:\Environment\env&gt;pip install pipenv<br>Looking in indexes: http://pypi.douban.com/simple<br>Requirement already satisfied: pipenv in d:\python3.6\lib\site-packages (2022.1.8)<br>Requirement already satisfied: virtualenv-clone&gt;=0.2.5 in d:\python3.6\lib\site-packages (from pipenv) (0.5.7)<br>Requirement already satisfied: certifi in d:\python3.6\lib\site-packages (from pipenv) (2021.10.8)<br>Requirement already satisfied: pip&gt;=18.0 in d:\python3.6\lib\site-packages (from pipenv) (21.3.1)<br>Requirement already satisfied: virtualenv in d:\python3.6\lib\site-packages (from pipenv) (20.13.3)<br>Requirement already satisfied: setuptools&gt;=36.2.1 in d:\python3.6\lib\site-packages (from pipenv) (59.6.0)<br>Requirement already satisfied: importlib-metadata&gt;=0.12 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (4.8.3)<br>Requirement already satisfied: importlib-resources&gt;=1.0 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (5.4.0)<br>Requirement already satisfied: platformdirs&lt;3,&gt;=2 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (2.4.0)<br>Requirement already satisfied: filelock&lt;4,&gt;=3.2 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (3.4.1)<br>Requirement already satisfied: six&lt;2,&gt;=1.9.0 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (1.11.0)<br>Requirement already satisfied: distlib&lt;1,&gt;=0.3.1 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (0.3.4)<br>Requirement already satisfied: typing-extensions&gt;=3.6.4 in d:\python3.6\lib\site-packages (from importlib-metadata&gt;=0.12-&gt;virtualenv-&gt;pipenv) (4.1.1)<br>Requirement already satisfied: zipp&gt;=0.5 in d:\python3.6\lib\site-packages (from importlib-metadata&gt;=0.12-&gt;virtualenv-&gt;pipenv) (3.6.0)<br>D:\Environment\env&gt;pipenv graph<br>Warning: No virtualenv has been created for this project yet! Consider running `pipenv install` first to automatically generate one for you or see `pipenv install --help` for further instructions.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装Django，不加版本就是默认最新版</span><br>D:\Environment\env&gt;pipenv install django<br>Creating a virtualenv for this project...<br>Pipfile: D:\Environment\env\Pipfile<br>Using D:/python3.6/python.exe (3.6.2) to create virtualenv...<br>[ =] Creating virtual environment...created virtual environment CPython3.6.2.final.0-64 in 3139ms<br>creator CPython3Windows(dest=C:\Users\Luffy\.virtualenvs\env-cX5X2ZN8, clear=False, no\_vcs\_ignore=False, global=False)<br>seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app\_data\_dir=C:\Users\Luffy\AppData\Local\pypa\virtualenv)<br>added seed packages: pip==21.3.1, setuptools==59.6.0, wheel==0.37.1<br>activators BashActivator,BatchActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator<br>Successfully created virtual environment!<br>Virtualenv location: C:\Users\Luffy\.virtualenvs\env-cX5X2ZN8<br>Creating a Pipfile for this project...<br>Installing django...<br>Adding django to Pipfile&#x27;s [packages]...<br>Installation Succeeded<br>Pipfile.lock not found, creating...<br>Locking [dev-packages] dependencies...<br>Locking [packages] dependencies...<br>Locking...Building requirements...<br>Resolving dependencies...<br>Success!<br>Updated Pipfile.lock (85c883)!<br>Installing dependencies from Pipfile.lock (85c883)...<br>================================ 0/0 - 00:00:00<br>To activate this project&#x27;s virtualenv, run pipenv shell.<br>Alternatively, run a command inside the virtualenv with pipenv run.<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看虚拟环境中安装的库</span><br>D:\Environment\env&gt;pipenv graph<br>Django==3.2.12<br>- asgiref [required: &gt;=3.3.2,&lt;4, installed: 3.4.1]<br>- typing-extensions [required: Any, installed: 4.1.1]<br>- pytz [required: Any, installed: 2022.1]<br>- sqlparse [required: &gt;=0.2.2, installed: 0.4.2]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入虚拟环境</span><br>D:\Environment\env&gt;pipenv shell<br>Launching subshell in virtual environment...<br>Microsoft Windows [版本 10.0.18363.1556]<br>(c) 2019 Microsoft Corporation。保留所有权利。<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看虚拟环境实际位置</span><br>(env-cX5X2ZN8) D:\Environment\env&gt;pipenv --venv<br>C:\Users\Luffy\.virtualenvs\env-cX5X2ZN8<br>(env-cX5X2ZN8) D:\Environment\env&gt;<br></code></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>直接使用pipenv创建Django项目，然后用PyCharm打开即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">(env-cX5X2ZN8) D:\Environment\env&gt;django-admin startproject drfdemo<br>(env-cX5X2ZN8) D:\Environment\env&gt;dir<br>驱动器 D 中的卷是 Program<br>卷的序列号是 654B-777A<br>D:\Environment\env 的目录<br>2022/03/24 10:53 &lt;DIR&gt; .<br>2022/03/24 10:53 &lt;DIR&gt; ..<br>2022/03/24 10:53 &lt;DIR&gt; drfdemo<br>2022/03/24 10:51 151 Pipfile<br>2022/03/24 10:51 2,069 Pipfile.lock<br>2 个文件 2,220 字节<br>3 个目录 283,753,816,064 可用字节<br>(env-cX5X2ZN8) D:\Environment\env&gt;<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vyJy8K"><img src="https://s1.ax1x.com/2022/08/21/vyJy8K.png"></a></p><p>在 <code>settings.py</code> 中导入os包，启动Django项目，即可在浏览器中看到启动成功</p><p><a href="https://imgse.com/i/vyJ6gO"><img src="https://s1.ax1x.com/2022/08/21/vyJ6gO.png"></a></p><h2 id="常规配置"><a href="#常规配置" class="headerlink" title="常规配置"></a>常规配置</h2><p><strong>语言和时区</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">LANGUAGE\_CODE = <span class="hljs-string">&#x27;zh-Hans&#x27;</span><br>TIME\_ZONE = <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br></code></pre></td></tr></table></figure><p>关掉csrf防御</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># &#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;,</span><br></code></pre></td></tr></table></figure><p>数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">DATABASES = &#123;<br><span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br><span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;django.db.backends.mysql&#x27;</span>,<br><span class="hljs-string">&#x27;HOST&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br><span class="hljs-string">&#x27;PORT&#x27;</span>: <span class="hljs-number">3306</span>,<br><span class="hljs-string">&#x27;USER&#x27;</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br><span class="hljs-string">&#x27;PASSWORD&#x27;</span>: <span class="hljs-string">&#x27;123456&#x27;</span>,<br><span class="hljs-string">&#x27;NAME&#x27;</span>: <span class="hljs-string">&#x27;drf&#x27;</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>连接MySql还需要下载库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipenv install pymysql<br></code></pre></td></tr></table></figure><p>在主项目下的 <code>__init__.py</code>中加入连接数据库配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br>pymysql.install\_<span class="hljs-keyword">as</span>\_MySQLdb()<br></code></pre></td></tr></table></figure><p>基本上到现在，一个Django项目的常用配置就好了</p><p><a href="https://imgse.com/i/vyJWbd"><img src="https://s1.ax1x.com/2022/08/21/vyJWbd.png"></a></p><h2 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h2><p>创建一个students的应用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py startapp students<br></code></pre></td></tr></table></figure><p>注册应用到 <code>settings.py</code>中去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">INSTALLED\_APPS = [<br><span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,<br><span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,<br><span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,<br><span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,<br><span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,<br><span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,<br><span class="hljs-string">&#x27;students&#x27;</span>,<br>]<br></code></pre></td></tr></table></figure><p>编写model类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>(models.Model):<br>SEX\_OPTION = (<br>(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;保密&#x27;</span>),<br>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;男&#x27;</span>),<br>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;女&#x27;</span>),<br>)<br>name = models.CharField(<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">20</span>,verbose\_name=<span class="hljs-string">&#x27;姓名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;姓名&#x27;</span>)<br>age = models.SmallIntegerField(verbose\_name=<span class="hljs-string">&#x27;年龄&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;年龄&#x27;</span>)<br>sex = models.SmallIntegerField(choices=SEX\_OPTION,verbose\_name=<span class="hljs-string">&#x27;性别&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;性别，0-&gt;保密，1-&gt;男，2-&gt;女，&#x27;</span>)<br>classmate = models.CharField(db\_column=<span class="hljs-string">&#x27;classmate&#x27;</span>,<span class="hljs-built_in">max</span>\_length=<span class="hljs-number">13</span>,verbose\_name=<span class="hljs-string">&#x27;班级&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;班级&#x27;</span>)<br>description = models.TextField(null=<span class="hljs-literal">True</span>,blank=<span class="hljs-literal">True</span>,verbose\_name=<span class="hljs-string">&#x27;个性签名&#x27;</span>,<span class="hljs-built_in">help</span>\_text=<span class="hljs-string">&#x27;个性签名，可以为空&#x27;</span>)<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>db\_table = <span class="hljs-string">&#x27;db\_student&#x27;</span><br>verbose\_name = <span class="hljs-string">&#x27;学生信息&#x27;</span><br>verbose\_name\_plural = verbose\_name<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">迁移模型<br>python manage.py makemigrations<br>数据导入<br>python manage.py migrate<br></code></pre></td></tr></table></figure><p>打卡数据库，可以发现我们刚刚创建的表，对于字段的一些配置参数，就不解释了，可以查看官网model的编写</p><p>通过下面命令，创建超级管理员，可以用于登录django自带的管理员界面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python manage.py createsuperuser<br></code></pre></td></tr></table></figure><p><a href="https://imgse.com/i/vyJsC6"><img src="https://s1.ax1x.com/2022/08/21/vyJsC6.png"></a></p><h2 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h2><p>简单编写一个测试接口，测试与数据库是否连接成功</p><p><code>drfdemo/urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>path(<span class="hljs-string">&#x27;stu/&#x27;</span>, include(<span class="hljs-string">&#x27;students.urls&#x27;</span>)),<br>]<br></code></pre></td></tr></table></figure><p><code>students/urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>path(<span class="hljs-string">&#x27;test/&#x27;</span>,StudentsViews.test),<br>]<br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentsViews</span>(<span class="hljs-title class_ inherited__">View</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>stus = Student.objects.<span class="hljs-built_in">all</span>()<br><span class="hljs-keyword">for</span> stu <span class="hljs-keyword">in</span> stus:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;姓名：<span class="hljs-subst">&#123;stu.name&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;姓名：<span class="hljs-subst">&#123;stu.age&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;姓名：<span class="hljs-subst">&#123;stu.sex&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># print(f&#x27;QuerrySet：&#123;stu&#125;&#x27;)</span><br><span class="hljs-keyword">return</span> JsonResponse(data=&#123;<span class="hljs-string">&#x27;msg&#x27;</span>:<span class="hljs-string">&#x27;ok&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><p>请求结果，打印在控制台：</p><p><a href="https://imgse.com/i/vytmwj"><img src="https://s1.ax1x.com/2022/08/21/vytmwj.png" alt="vytmwj.png"></a></p><p>测试通过</p><h2 id="整合DRF"><a href="#整合DRF" class="headerlink" title="整合DRF"></a>整合DRF</h2><p>DRF简化Django的操作，没有DRF，Django也能完成，只是编码会复杂一些，这里整合DRF做一个简单的例子，先不用理解里面的内容。</p><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pipenv install djangorestframework django-filter<br></code></pre></td></tr></table></figure><p>把组件加入到<code>setting.py</code>中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#x27;rest\_framework&#x27;,<br>&#x27;django\_filters&#x27;,<br></code></pre></td></tr></table></figure><p>编写序列化器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentModelSerializer</span>(serializers.ModelSerializer):<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Meta</span>:<br>model = Student<br><span class="hljs-comment"># 序列化字段</span><br><span class="hljs-comment"># 全部</span><br>fields = <span class="hljs-string">&#x27;\_\_all\_\_&#x27;</span><br><span class="hljs-comment"># 一个一个写</span><br><span class="hljs-comment"># fields =[&#x27;id&#x27;,&#x27;name&#x27;]</span><br></code></pre></td></tr></table></figure><p><code>urls.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;stu/&#x27;</span>,StudentsGenericAPIView.<span class="hljs-keyword">as</span>\_view()),<br></code></pre></td></tr></table></figure><p><code>views.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentsGenericAPIView</span>(<span class="hljs-title class_ inherited__">GenericAPIView</span>):<br>queryset = Student.objects.<span class="hljs-built_in">all</span>()<br>serializer\_<span class="hljs-keyword">class</span> = StudentModelSerializer<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">获取多条数据</span><br><span class="hljs-string">:param request:</span><br><span class="hljs-string">:return:</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># 获取模型对象列表，实例化序列化器对象</span><br>serializer = <span class="hljs-variable language_">self</span>.serializer\_<span class="hljs-keyword">class</span>(instance=<span class="hljs-variable language_">self</span>.get\_queryset(), many=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 返回序列化的数据列表</span><br><span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p>测试结果<br><a href="https://imgse.com/i/vyJD4x"><img src="https://s1.ax1x.com/2022/08/21/vyJD4x.png"></a></p><p>可以发现，自带页面，而且以json格式返回，写过Django的同学知道要是没用DRF，返回json格式是特别痛苦的一件事，要取出来遍历放入字典再返回，但是用了DRF通过序列化器，就直接能返回json数据，特别方便！</p>]]></content>
    
    
    
    <tags>
      
      <tag>DRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python环境相关的问题</title>
    <link href="/2022/03/16/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/16/Python%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>困扰我很多天的<strong>Python环境问题</strong>终于得到解决了，今天把遇到的问题做个复盘</p><h2 id="Python库安装很慢"><a href="#Python库安装很慢" class="headerlink" title="Python库安装很慢"></a>Python库安装很慢</h2><p>这个问题其实很常见，当我们只是安装了Python3.X的基础运行环境，所拉取库镜像是在国外的，受网速的影响，下一些大一点的可以就很慢，常常下载失败。</p><p>常遇到：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Could not fetch URL https://pypi.tuna.tsinghua.edu.cn/simple/numpy/<br></code></pre></td></tr></table></figure><p><strong>第一个解决办法：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install xxx --index-url http://pypi.douban.com/simple/ --trusted-host pypi.douban.com<br></code></pre></td></tr></table></figure><p>这是临时的一种方法，可以解燃眉之急</p><p><strong>第二种解决办法：</strong></p><p>在本地机器新建配置文件，加入国内镜像网站</p><p><img src="https://s2.loli.net/2022/03/16/7bKAuCNYwTdkzlh.png"></p><p>要在用户的目录下新建个pip文件夹，在里面新建个pip.ini，文件内容配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = http://pypi.douban.com/simple<br><span class="hljs-section">[install]</span><br><span class="hljs-attr">trusted-host</span>=pypi.douban.com<br></code></pre></td></tr></table></figure><p>这样就可以把镜像拉取地址改到国内了，国内其他的镜像网站如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">清华：https://pypi.tuna.tsinghua.edu.cn/simple<br>阿里云：http://mirrors.aliyun.com/pypi/simple/<br>中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/<br>华中理工大学：http://pypi.hustunique.com/<br>山东理工大学：http://pypi.sdutlinux.org/<br>豆瓣：http://pypi.douban.com/simple/<br></code></pre></td></tr></table></figure><p>阿里云的有点慢，个人感觉豆瓣和清华的很快！</p><h2 id="Python手动安装库"><a href="#Python手动安装库" class="headerlink" title="Python手动安装库"></a>Python手动安装库</h2><p>大多数库修改了镜像拉去地址都可以安装成功的，而且速度也很快，但是也有很多库依旧无法安装，比如mysqlclient这种，这时候就需要手动安装了，先去网上找到whl文件，下载下来安装即可</p><p>有两个下载网站：</p><p><a href="https://pypi.org/">pypi.org</a> 和 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">www.lfd.uci.edu</a></p><p>第一个网站并不需要机型版本的选择，直接选择库版本下载即可</p><p>第二个就需要了，所以需要先查看自己机器适合库的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本</span><br>pip debug --verbose<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/03/16/wy43AXIzb76GraH.png"></p><p>通过第二个网站进行查找，找到合适版本即可，这里以安装mysqlclient为例</p><p><img src="https://s2.loli.net/2022/03/16/Cjg2FNAd4ySW3eZ.png"></p><p>下载下来，直接在某个文件夹安装即可，因为python都是加入环境变量了的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install XXX.whl<br></code></pre></td></tr></table></figure><p>当然，也有很大不是whl格式的而是压缩包格式的，方法是一样的，只是安装命令不一样，这里以snowNLP安装为例（snowNLP直接用pip install安装也是可以的）</p><p><img src="https://s2.loli.net/2022/03/16/U5IrExoZSpCi4d8.png"></p><p>本地解压，进入解压文件夹，命令行安装即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">python setup.py install<br></code></pre></td></tr></table></figure><h2 id="Python环境和Anaconda3"><a href="#Python环境和Anaconda3" class="headerlink" title="Python环境和Anaconda3"></a>Python环境和Anaconda3</h2><p>Anaconda3自带了绝大部分Python常用第三方库，非常方便，而Python在刚安装时是没有第三方库的，下载会遇到网络的问题，所以很多时候都会选择Anaconda3，使用pip install 是用的Python的pip工具，用conda install是用的Anaconda3的pip工具，有时候有些第三方库并不支持Anaconda3，就需要使用Python去安装，比如哈工大的分词器pyltp，我在配置系统环境变量的时候，把Anaconda3的配置顺序弄到Python的前面去了，导致每次我pip intsall都是用的Anaconda3去安装。</p><p>如何切换成python的呢？很简单，把Python在Path中的变量配置提到Anaconda3之前就行了。</p><p>其实这样才是最正确的选择，pip用python的，而Anaconda3有自己的conda，就不会安装错了</p><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><p>pipenv是一个python包管理工具，它能同时管理python虚拟环境和python依赖，官方推荐。</p><p>还有virtuanenv，但是比较老了。可以说pipenv&#x3D;pip + virtualenv，下面介绍pipenv搭建虚拟环境，实现每个项目一个环境。</p><p>下面我新建个文件夹，重新搭建个虚拟环境，整合进Pycharm做环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs shell">Microsoft Windows [版本 10.0.18363.1556]<br>(c) 2019 Microsoft Corporation。保留所有权利。<br><span class="hljs-meta prompt_"># </span><span class="language-bash">pip安装pipenv</span><br>D:\&gt;pip install pipenv<br>Looking in indexes: http://pypi.douban.com/simple<br>Requirement already satisfied: pipenv in d:\python3.6\lib\site-packages (2022.1.8)<br>Requirement already satisfied: virtualenv-clone&gt;=0.2.5 in d:\python3.6\lib\site-packages (from pipenv) (0.5.7)<br>Requirement already satisfied: setuptools&gt;=36.2.1 in d:\python3.6\lib\site-packages (from pipenv) (59.6.0)<br>Requirement already satisfied: certifi in d:\python3.6\lib\site-packages (from pipenv) (2021.10.8)<br>Requirement already satisfied: pip&gt;=18.0 in d:\python3.6\lib\site-packages (from pipenv) (21.3.1)<br>Requirement already satisfied: virtualenv in d:\python3.6\lib\site-packages (from pipenv) (20.13.3)<br>Requirement already satisfied: importlib-resources&gt;=1.0 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (5.4.0)<br>Requirement already satisfied: six&lt;2,&gt;=1.9.0 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (1.11.0)<br>Requirement already satisfied: importlib-metadata&gt;=0.12 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (4.8.3)<br>Requirement already satisfied: platformdirs&lt;3,&gt;=2 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (2.4.0)<br>Requirement already satisfied: distlib&lt;1,&gt;=0.3.1 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (0.3.4)<br>Requirement already satisfied: filelock&lt;4,&gt;=3.2 in d:\python3.6\lib\site-packages (from virtualenv-&gt;pipenv) (3.4.1)<br>Requirement already satisfied: zipp&gt;=0.5 in d:\python3.6\lib\site-packages (from importlib-metadata&gt;=0.12-&gt;virtualenv-&gt;pipenv) (3.6.0)<br>Requirement already satisfied: typing-extensions&gt;=3.6.4 in d:\python3.6\lib\site-packages (from importlib-metadata&gt;=0.12-&gt;virtualenv-&gt;pipenv) (4.1.1)<br>D:\&gt;pip show pipenv<br>Name: pipenv<br>Version: 2022.1.8<br>Summary: Python Development Workflow for Humans.<br>Home-page: https://github.com/pypa/pipenv<br>Author: Pipenv maintainer team<br>Author-email: distutils-sig@python.org<br>License: MIT<br>Location: d:\python3.6\lib\site-packages<br>Requires: certifi, pip, setuptools, virtualenv, virtualenv-clone<br>Required-by:<br>D:\&gt;cd Environment<br>D:\Environment&gt;cd data-envs<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在该文件夹中创建pipenv配置文件，以后要配置该虚拟环境就直接进入这个环境用pipenv命令即可</span><br>D:\Environment\data-envs&gt;pipenv install<br>Creating a virtualenv for this project...<br>Pipfile: D:\Environment\data-envs\Pipfile<br>Using D:/python3.6/python.exe (3.6.2) to create virtualenv...<br>[ ==] Creating virtual environment...created virtual environment CPython3.6.2.final.0-64 in 2892ms<br>creator CPython3Windows(dest=C:\Users\Luffy\.virtualenvs\data-envs-EwQ4Zbmy, clear=False, no\_vcs\_ignore=False, global=False)<br>seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app\_data\_dir=C:\Users\Luffy\AppData\Local\pypa\virtualenv)<br>added seed packages: pip==21.3.1, setuptools==59.6.0, wheel==0.37.1<br>activators BashActivator,BatchActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator<br>Successfully created virtual environment!<br>Virtualenv location: C:\Users\Luffy\.virtualenvs\data-envs-EwQ4Zbmy<br>Creating a Pipfile for this project...<br>Pipfile.lock not found, creating...<br>Locking [dev-packages] dependencies...<br>Locking [packages] dependencies...<br>Updated Pipfile.lock (ca72e7)!<br>Installing dependencies from Pipfile.lock (ca72e7)...<br>================================ 0/0 - 00:00:00<br>To activate this project&#x27;s virtualenv, run pipenv shell.<br>Alternatively, run a command inside the virtualenv with pipenv run.<br>D:\Environment\data-envs&gt;dir<br>驱动器 D 中的卷是 Program<br>卷的序列号是 654B-777A<br>D:\Environment\data-envs 的目录<br>2022/03/16 15:33 &lt;DIR&gt; .<br>2022/03/16 15:33 &lt;DIR&gt; ..<br>2022/03/16 15:33 138 Pipfile<br>2022/03/16 15:33 453 Pipfile.lock<br>2 个文件 591 字节<br>2 个目录 284,097,318,912 可用字节<br><span class="hljs-meta prompt_"># </span><span class="language-bash">windows 没有vi vim，所以直接进文件夹用记事本打开查看即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看虚拟环境位置</span><br>D:\Environment\data-envs&gt;pipenv --venv<br>C:\Users\Luffy\.virtualenvs\data-envs-EwQ4Zbmy<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看安装的库</span><br>D:\Environment\data-envs&gt;pipenv graph<br><span class="hljs-meta prompt_"># </span><span class="language-bash">虚拟环境中安装库</span><br>D:\Environment\data-envs&gt;pipenv install pandas numpy<br>Installing pandas...<br>Adding pandas to Pipfile&#x27;s [packages]...<br>Installation Succeeded<br>Installing numpy...<br>Adding numpy to Pipfile&#x27;s [packages]...<br>Installation Succeeded<br>Pipfile.lock (ca72e7) out of date, updating to (e86322)...<br>Locking [dev-packages] dependencies...<br>Locking [packages] dependencies...<br>Locking...Building requirements...<br>Resolving dependencies...<br>Success!<br>Updated Pipfile.lock (e86322)!<br>Installing dependencies from Pipfile.lock (e86322)...<br>================================ 0/0 - 00:00:00<br>To activate this project&#x27;s virtualenv, run pipenv shell.<br>Alternatively, run a command inside the virtualenv with pipenv run.<br>D:\Environment\data-envs&gt;pipenv graph<br>pandas==1.1.5<br>- numpy [required: &gt;=1.15.4, installed: 1.19.5]<br>- python-dateutil [required: &gt;=2.7.3, installed: 2.8.2]<br>- six [required: &gt;=1.5, installed: 1.16.0]<br>- pytz [required: &gt;=2017.2, installed: 2021.3]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">激活环境，进入环境，环境中可以直接运行python程序</span><br>D:\Environment\data-envs&gt;pipenv shell<br>Launching subshell in virtual environment...<br>Microsoft Windows [版本 10.0.18363.1556]<br>(c) 2019 Microsoft Corporation。保留所有权利。<br>(data-envs-EwQ4Zbmy) D:\Environment\data-envs&gt;exit<br>D:\Environment\data-envs&gt;pipenv --venv<br>C:\Users\Luffy\.virtualenvs\data-envs-EwQ4Zbmy<br>D:\Environment\data-envs&gt;<br></code></pre></td></tr></table></figure><p>C:\Users\Luffy.virtualenvs\data-envs-EwQ4Zbmy 是虚拟环境命令，我们要整合进Pycharm只需要</p><p><img src="https://s2.loli.net/2022/03/16/5iVfWMFXZz3ud6H.png"></p><h2 id="虚拟环境安装配置运行streamlit"><a href="#虚拟环境安装配置运行streamlit" class="headerlink" title="虚拟环境安装配置运行streamlit"></a>虚拟环境安装配置运行streamlit</h2><p>streamlit可以快速搭建web服务器，在做机器学习可视化的时候非常方便，但是streamlit的安装非常难搞，本人搞了两天才搞好。</p><p>之前是在自己台式机搭建好了环境，streamlit这些都弄好了，但是要来图书馆，所以要在自己笔记本也搭建下环境，要学习Django+DRF，要整合虚拟环境，干脆在虚拟环境中安装streamlit</p><p>安装配置虚拟环境，前面已经说了，现在重点是安装streamlit，运行streamlit做的应用</p><p>streamlit非常不好装，用在线拉去镜像每次都失败，只能通过离线，加载whl的形式进行安装。安装好后，把虚拟环境整合进Pycharm，但是我发现用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">streamlit run app.py<br></code></pre></td></tr></table></figure><p>报错了，但是在安装成功后调用实例是可以的，所以我发现应该是运行地方的错误，琢磨了以后，进入虚拟环境，用命令启动应用即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">D:\Environment\envs&gt;pipenv shell<br>Launching subshell in virtual environment...<br>Microsoft Windows [版本 10.0.18363.1556]<br>(c) 2019 Microsoft Corporation。保留所有权利。<br>(envs-f-7jKLmf) D:\Environment\envs&gt;streamlit run D:/pycharm-code-2022/Test/app.py<br>You can now view your Streamlit app in your browser.<br>Local URL: http://localhost:8501<br>Network URL: http://10.176.178.83:8501<br>Stopping...<br>(envs-f-7jKLmf) D:\Environment\envs&gt;<br></code></pre></td></tr></table></figure><p>运行的文件需要用绝对路径，到这就搭建好虚拟环境去运行streamlit应用了</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python环境搭建</title>
    <link href="/2021/12/23/Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/12/23/Python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。</p><p>Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于 1991 年。</p><h1 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h1><p>Python主要的版本分支是3.X和2.X，2.X和3.X分支是不兼容的，可以说是相互独立的，所以在安装环境的时候，一定要注意版本问题。</p><p>这里我选的3.6这个大版本</p><h1 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h1><p>这里很简单，贴个官网连接，选个适合自己电脑系统和位数的文件就行了</p><p><a href="https://www.python.org/downloads/">Python安装官网</a></p><p>下载下来，需要注意的是在安装中需要勾选把Python环境加入PATH中，一直点下一步就行了，安装完成后可以在开始中找到新增的四个模块：</p><p><img src="https://s2.loli.net/2021/12/24/vGYpIP4zVixt2Qh.png"></p><p>也可以通过在CMD界面中输入python检验是否安装成功</p><p><img src="https://s2.loli.net/2021/12/24/sLdh7inaNrJVt4l.png"></p><p>点开IDLE，Python自带的IDE就可以编写Python程序了，但我们通常编写程序还是用的Pycharm</p><h1 id="Pycharm安装与配置"><a href="#Pycharm安装与配置" class="headerlink" title="Pycharm安装与配置"></a>Pycharm安装与配置</h1><p>Pycharm和Idea都是 JetBrains的软件，都是收费的，当然Pycharm的简单版本是免费的，但后面做项目是需要更多功能支持的，这里还是需要安装专业版。</p><p>网上找个下载链接下载安装破解就行了，这里就不过多赘述。</p><p>Pycharm很重要的一个配置就是开发环境的配置</p><p><img src="https://s2.loli.net/2021/12/24/wS7ebudlFsGnLYH.png"></p><p>就是需要把Python的编译器告诉Pycharm的位置，但是会发现我并没有用Python默认的编译器，而是选择的<strong>Anaconda3</strong>。</p><h1 id="Anaconda的安装和配置"><a href="#Anaconda的安装和配置" class="headerlink" title="Anaconda的安装和配置"></a>Anaconda的安装和配置</h1><p><strong>Anaconda</strong>指的是一个开源的<a href="https://so.csdn.net/so/search?from=pc_blog_highlight&q=Python">Python</a>发行版本，其包含了conda、Python等180多个科学包及其依赖项。 因为包含了大量的科学包，Anaconda 的下载文件比较大（约 531 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和 Python）。</p><p>因为我在写Python程序的适合，会安装一些其他的库，但是用pip命令经常安装失败，报错也解决不了，于是网上看就推荐用Anaconda，自带了很多库函数，很方便。</p><p><a href="https://www.anaconda.com/">Anaconda官网</a></p><p>选个版本下载安装就行了。</p><p>现在我们已经装上Anaconda，可以发现它自带了很多东西，其中有很常用的Jupyter Notebook，Python的交互式程序运行格式。</p><p><img src="https://s2.loli.net/2021/12/24/JpZrz2FkPb35xgO.png" alt="image.png"></p><p>那么如何在Pycharm配置我们的Anaconda呢？</p><p>很简单，我们配置下System Interpreter，然后把它添加到环境中就行了</p><p><img src="https://s2.loli.net/2021/12/24/vi67nEmXOVgLyjI.png"></p><p><img src="https://s2.loli.net/2021/12/24/BhUYy3D6ulpV4O7.png"></p><p>就这样，我们就把Pycharm的运行环境切换到Anaconda，我们运行一个程序试试</p><p><img src="https://s2.loli.net/2021/12/24/6zWYITc2fNuLbtZ.png"></p><p>可以看到已经使用的Anaconda的python.exe去运行程序了。</p><p>当我们需要安装Anaconda没有的库，我们可以直接使用Pycharm去安装</p><p><img src="https://s2.loli.net/2021/12/24/NhWAqLxHp7U2KsI.png"></p><p>就这样，我们Python的基本环境就安装好了，可以愉快的编写Python程序了！</p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>仰望星空，脚踏实地</title>
    <link href="/2021/10/23/%E4%BB%B0%E6%9C%9B%E6%98%9F%E7%A9%BA%EF%BC%8C%E8%84%9A%E8%B8%8F%E5%AE%9E%E5%9C%B0/"/>
    <url>/2021/10/23/%E4%BB%B0%E6%9C%9B%E6%98%9F%E7%A9%BA%EF%BC%8C%E8%84%9A%E8%B8%8F%E5%AE%9E%E5%9C%B0/</url>
    
    <content type="html"><![CDATA[<p>这几天闲的无聊，又不想看论文，索性就把自己这大半年的经历记录下来吧，希望对以后要校招的同学有用！</p><p>分四个部分：考研or就业，专业素养的培养，求职历程和总结，技术相关的我就一笔带过了，让这篇随笔更具大众化。</p><h2 id="考研or就业？"><a href="#考研or就业？" class="headerlink" title="考研or就业？"></a>考研or就业？</h2><p>这是每个本科生都会面临的一个选择，可能很多同学在大一都抱着考研的心态，甚至是更早。</p><p>那我想说的就是假如到大三了有这个困惑，不得不在考研和就业中做个选择，说明你还是有自己的想法，懂得为自己的前程着想，结果都不会太差！</p><p>我也是经历过这个时期，考虑了很多，接下来就把我认为重要的两个要素列举下来吧：</p><ul><li>时间线</li><li>动机</li></ul><p>时间线的意思是不要过早去想考研这件事情，特别是很多同学大一入校来就想着考研，啥活动也不参加，只知道学习。这里我以两个例子来论证：</p><p>第一个就是我大一的时候，采访了我们学院的考研寝室，当时是作为学生会的身份去采访他，然后做一期推文，因为是自己和部长一起去的，所以记忆非常深刻，这篇推文还在管院微信发出来了，链接：<a href="https://mp.weixin.qq.com/s/0Co7VAFDvp8VGIo91V0unA">【考研】我不想做一个空想家</a>，第一个问题就是考研时间线的把握，<strong>应该是正式考研的前一年的9月开始选择和关注考研，然后当年3月开始，一直到12月上战场</strong>。学长告诫就是不要把战线拉的太长了，这样很少能坚持下来。大一就多参加些活动，充实自己的大学生活。</p><p>第二个就是我的好朋友，本科北外的，今年上岸的商务部直属研究院，当然她的事迹没有广泛性，这里只是提一下。她本科新闻的，因为北京疫情5月才去学习，然后才开始准备考研的，跨考金融，自学线代概率论……，因为新闻是不学数学的，考研就是完全自学的。问了下她，她说可能脑袋比较聪明吧，毕竟当时高考分数是可以去985的，因为兴趣选择了北外，后面确定考研方向，就专心高效率备考。</p><p>总的来说就是时间线，不能拉太长，这样很少能抗住高强度学习的，到真正准备考研冲刺阶段就心有力而力不足了。</p><p>动机，其实我刚进学习就是抱着找工作的心态，不想考研，因为自己有严重的考试焦虑症！</p><p>但父母因为文化不高，就想着多读点书总归是好的，就让我再想想考研的事情。去年10月我想了整整一个月吧，多方咨询，最终选择直接找工作。</p><p>我就是把考研的优势，劣势都列举出来，然后去请教考研和就业的学长学姐，然后自己再把建议综合，可能方法笨笨的，但感觉很有效！</p><p><img src="https://i.loli.net/2021/10/23/YGRdlevNUO5JswH.png"></p><p>最开始是17级的学长学姐，几个都是考研的，都叫我考研。然后问了16级在百度工作的学姐，我把我的情况给她说了，她也没直接说考研还是就业，但带着考试焦虑症去考研风险太大了，趁这个时候去多刷题，做做项目可能会是一个很好的选择。我也思考了几天，最终决定不考研，找工作了！</p><p>其次，我还了解到一些关于这块的信息，现在985211高校保研率太高了，占到了60%~70%，外校想考进去，难度很大，个别专业就是神仙打架。另外，要是想借助考研，来找到个好一点的工作，这动机不强，很容易在中途崩溃的！对于生化环材料医学等专业，不考研，基本上没出路，就断了找工作的念想，就不得不拿出破釜沉舟的决心了。</p><h2 id="专业素养的培养"><a href="#专业素养的培养" class="headerlink" title="专业素养的培养"></a>专业素养的培养</h2><p>什么叫专业素养？说通俗点就是外人听不懂，内行之间交流用的东西。我以为专业素养包括专业技能知识和行业领域的信息，就比如互联网的农民工肯定知道什么叫虚拟机，微服务，DDD等等，这些可以在学习技术的时候学到。</p><p>但整个行业领域的情况信息就不一定能在学习技能的时候看到了，就比如今年双减政策对K12企业发展的影响，有多少公司裁员了？裁员后的补偿措施如何？再比如一门技术的发展前景，客户端其实现在学的意义就不大，安卓也是，因为面太狭隘了，对标岗位少。</p><p>我平时对行业领域信息的摄取包括微信公众号，知乎和掘金这种论坛，其实我不怎么爱看长篇大论，所以选择概括性和总结性毕竟强的公众号去阅读是一种不错的选择，比如36氪等等。</p><h2 id="求职历程"><a href="#求职历程" class="headerlink" title="求职历程"></a>求职历程</h2><p>分春招实习和秋招吧</p><p>因为我是22届毕业生，所以今年的春招只能投实习，不能投正式批（正式批要求21届），具体内容我就不展开了，因为确实蛮枯燥无味。总的来说就是<strong>规划+自律</strong>。</p><p>需要简单介绍下秋招和春招，秋招是当年的7-11月，企业最多，岗位最多，招聘人数最多，所以一定要把握好秋招。春招是次年的3-6月，企业和岗位就蛮少了，有的企业在秋招招满的情况下，就不会进行春招了。</p><p>规划，因为自己从20年上半年的疫情就开始在家学习，学了大半年，也有一定技术沉淀了，就知道自己接下来应该做什么，是继续学还是做个项目出来检验下自己这段时间的收获。</p><p>我是意向岗位是Java研发工程师，准备的东西包括：</p><ul><li>Java基础</li><li>JVM</li><li>Mysql</li><li>Redis</li><li>Linux</li><li>操作系统</li><li>计算机网络</li><li>数据结构和算法</li><li>项目</li><li>框架，包括Spring全家桶，微服务等等</li></ul><p>哈哈哈，上面的东西要是看不懂可以直接跳过，因为术业有专攻，你懂的，可能我也不懂，做好自己就好了！</p><p>因为20年时间就抓的比较紧，所以使用这块没啥大问题，但因为是非科班，所以计算机底层知识就需要恶补了，所以21年就恶补底层知识，再刷算法题，准备项目，修改简历，投递简历。</p><p><img src="https://i.loli.net/2021/10/23/i3HYbLJCzenq6BU.png"></p><p><img src="https://i.loli.net/2021/10/23/mjUVJd9RXwkB82T.png"></p><p>自己也搜集了很多资源，大部分都看过，其中包括b站和本地200多G的，也不知道写了多少行代码……</p><p>4月5月开始找实习，自己投的第一家公司是字节跳动，是一位朋友内推的，很遗憾，简历没过，哈哈哈哈</p><p>阿里也投了，都笔试了，但简历没过。也把剩下的大厂投了给遍，基本上都是石沉大海或者收到感谢信，太难了。</p><p><img src="https://i.loli.net/2021/10/23/vLqnhm54HGMA7oI.png"></p><p>自己就问了下已经在工作的学长学姐，叫我不要盯着大厂投，我们学校不好，很难给面试机会的，找实习去试试中小厂吧。于是换了给方向，拿了几个中小厂的实习offer，最终选择了武汉的一家公司实习。</p><p>实习也就一个月吧，感觉和我想得不一样，就辞了，准备秋招提前批。</p><p>自己也搭建了一个博客，没事就写一些东西</p><p><img src="https://i.loli.net/2021/10/23/KhEBkwRY3uAlbLj.png"></p><p>每天都会在Leetcode上刷算法题，牛客上刷算法题、编程基础和SQL训练</p><p>Leetcode</p><p><img src="https://i.loli.net/2021/10/23/vka5BXgMhHLQqb3.png"></p><p>牛客网</p><p><img src="https://i.loli.net/2021/10/23/mZAwB6RH3hDavuj.png"></p><p>找工作的同学一定要下个牛客网，里面很多内推和面经的，比BOSS招聘等APP流程快</p><p>说实话我真以为秋招的黄金时间是9月和10月，但当我关注的企业招聘公众号给我推送提前批开启了，还是7月初，我人傻了，这是不是太早了啊，相继有很多家企业都开了提前批，于是我不得不加快步伐，准备投简历了。</p><p>7月8月自己申请留校学习了，因为疫情，完全封校，压根出不去，食堂只开一楼，天天都是那几个菜，差点把我吃吐了。</p><p>每天都是刷题，背面经，刷题，背面经，晚上一上床都能睡着，真的太累了！当时是在513自习室，其实里面都是考研的，就我一个找工作的在里面蹭空调，每天早7晚9的生活，活得跟个考研人一样，可能目标很明确吧，其实有时候并感觉不到累。</p><p><img src="https://i.loli.net/2021/10/23/Y5IJvazXsuqVhKF.png"></p><p>我每周五下午就是个疲惫期，我那个时候不会学习，就看看电影，有时候一看就是一下午和一晚上。因为我一直坚信学习不是拼时间，而是拼效率，状态不好就要休息下。</p><p><img src="https://i.loli.net/2021/10/23/w7G8xluM5hqVIAi.jpg"></p><p>我不仅仅是一名Java选手，还是一名感谢信收割机！</p><p><img src="https://i.loli.net/2021/10/23/zheERuj6MoXdf23.jpg"></p><p>虽然很累，坚持下去就一定会有结果，虽然笔试这么多久，就几家给面了，但给面的基本上都拿下了，最终选择了比较心仪的一家。其实后面还在等其它的，但一直没有比这家好的，秋招也接近尾声，坑位都满了，自己也没更好的选择，就躺平了。</p><p><img src="https://i.loli.net/2021/10/23/Er3Q2BHOtUJDi45.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从确定走这个方向，就一直没有改变过，可能中途会怀疑自己的能力，但及时调整方向就好了。</p><p>对于我这个职业，技术更新迭代非常快，需要一直学习。这就需要保持终生学习的好习惯，其实现在很多行业都这样，没有一门技术从入职到老的，都需要不断学习，不断改进。</p><p>最后，<strong>希望找工作的同学一切顺利，考研的同学一战成硕！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绿盟研发一二三面 已OC</title>
    <link href="/2021/09/02/%E7%BB%BF%E7%9B%9F%E7%A0%94%E5%8F%91%E4%B8%80%E4%BA%8C%E4%B8%89%E9%9D%A2-%E5%B7%B2OC/"/>
    <url>/2021/09/02/%E7%BB%BF%E7%9B%9F%E7%A0%94%E5%8F%91%E4%B8%80%E4%BA%8C%E4%B8%89%E9%9D%A2-%E5%B7%B2OC/</url>
    
    <content type="html"><![CDATA[<h1 id="绿盟科技"><a href="#绿盟科技" class="headerlink" title="绿盟科技"></a>绿盟科技</h1><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><blockquote><p>2021年8月19日 10:00-10:42 HR电话提前约了面试时间，通过邮箱发了腾讯会议ID，面试官很准时，而且是个姐姐 哈哈哈</p></blockquote><ol><li><p>自我介绍+项目，这里讲了很久，讲了自己在每个项目的角色和任务分工，提到了数据库设计</p></li><li><p>就讲了下自己在开发中遇到的数据库设计，以及自己开发中遇到数据库设计遇到的坑</p></li><li><p>SQL优化，面试必问—&gt;查询字段，数据库设计，走索引，索引失效，创建索引，单表数据过大要分表</p></li><li><p>绿盟主要业务？卧槽，这个真不知道，海投的，后面查了下是和阿里云，奇安信，深信服并列的网络安全公司</p></li><li><p>都是SpringBoot项目对吧，如何考虑一个SpringBoot项目的安全？（绿盟就是国内数一数二的做安全的企业），我就说了下平时注意的：</p><ul><li>server.port 不用常用端口</li><li>数据库角色，不直接使用root</li><li>密码，用网站随机生成</li><li>token+拦截器</li><li>统一异常返回</li><li>假如有富文本编辑器输入，要转义，防止XSS</li></ul></li><li><p>SpringBoot如何解决跨域？平时开发常常用，讲了下跨域就是对源地址和端口的限定，一般解决方案是在Controller的接口那加上@CorssOrigin（自己试过，没成功），自己一直是写的WebCorsConfig，配置全局跨域请求，就是设置源地址，请求头和方法的配置</p></li><li><p>那说说CSRF吧 ？解决方案? 跨站请求伪造</p></li><li><p>Mybatis分页插件用过吗？底层实现看过没？ PageHelper嘛，用过，不过没看过底层，不过知道Mysql如何分页：</p><ul><li>select * from table limit pageSize offset PageNo</li><li>表的数据过多，借助id分页，select * from table where id &gt; pageNo * pageSize limit pageSize</li></ul><p>PageHelper底层应该也是这样的</p></li><li><p>存储过程是什么？我说了下，这个东西说实话应该是不会用了吧，所以复习的时候都没看，但自己写过存储过程，还是知道一点，下面详细解释下：</p><p>一组为了完成特定功能的SOL语句集，存储在数据库中，经过一次编译后不需要再次编译。用户通过指定存储过程的名字并给出参数来执行它。存储过程是数据库中的对象。</p><p>可以通过一个命令对象来调用存储过程；也可以供外部调用，比如java程序。</p><p>其优点是：经过预编译，执行效率高；代码直接存在数据库，通过存储过程名调用，减少网络通信；安全性高，执行存储过程需要有一定权限的用户；可重复使用，减少开发人员工作量。</p><p>其缺点是移植性差。</p><p>存储过程中的优化思路有：</p><ul><li>尽量利用sql语句替代小循环</li><li>中间结果存放于临时表，加索引</li><li>少使用游标</li><li>事务越短越好，事务过长或隔离级别过高会造成并发操作阻塞。死锁，导致查询及慢、CPU占用率极低</li><li>使用trycatch处理错误异常</li><li>查询语句尽量不要放在循环内</li></ul></li><li><p>Redis缓存雪崩？解决方案？</p></li><li><p>考虑转语言？ 啥意思，面试官说看自愿，写了几年Java了，暂时不考虑转，但公司需要可以考虑</p></li><li><p>平时开发环境？ 代码是windows下编写，假如只是自己的demo，那就只是idea运行了，假如要让大家访问那就部署服务器了。什么服务器？最开始没学Linux的时候是Windows服务器，但一段时间就很卡，后面自学了Linux就买了阿里云的服务器。说说Liunx常用命令？新建文件，文件负责等等，其实部署主要是Docker？Docker用到什么地步？会DockerFile吗？ 这个还是没问题，之前实习就是DockerFile打包的。</p></li><li><p>现在需要把在一台服务器的应用镜像，运行在另一台服务器上，这么做？自己没试过，不过应该是把镜像下载下载下来，然后传到另外一台服务器上，docker load即可，感觉Docker还是需要多看看</p></li><li><p>讲讲自己运用专业知识解决的实际问题？讲了未开始的设置数据库连接编码UTF-8，然后再将最近抢红包的一个项目</p></li></ol><p><strong>反问</strong></p><ol><li>面试官是什么部门的，什么业务？</li><li>还是谈到转语言，说Java Python都有，其实想全栈，但这对校招生要求太高了，所以可以只管后台开发</li><li>要是转会给时间吗？那肯定，Java转Python的，面试官说没见过没转成功的，我就说了自己的毕业设计是基于深度学习的TF开发的推荐系统</li><li>然后面试官是后面会有二面，好好准备下，我说好，继续聊了会</li><li>一共几面？1-2轮技术面，一轮总监面</li><li>又聊了会，面试预定的是半小时，实际42分钟，面试体验非常好！</li></ol><blockquote><p>PageHelper原理</p></blockquote><ol><li>使用PageHelper.startPage()时在当前线程上下文中设置一个ThreadLocal变量</li><li>在 ThreadLocal中设置了分页参数，之后在查询执行的时候，获取当前线程中的分页参数</li><li>执行查询的时候通过拦截器在sql语句中添加分页参数，之后实现分页查询，查询结束后在 finally 语句中清除ThreadLocal中的查询参数</li></ol><p>PageHelper方法使用了静态的ThreadLocal参数，分页参数和线程是绑定的。只要可以保证在PageHelper方法调用后紧跟 MyBatis 查询方法，这就是安全的。因为PageHelper在finally代码段中自动清除了ThreadLocal存储的对象。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><blockquote><p>2021年8月23日 14:35-15:09 面试官迟到了几分钟，当时我有点急，因为预定就是半小时，然后奇安信15:00的笔试，哈哈，好在也就几分钟就来了，面试体验非常好！</p></blockquote><ol><li>自我介绍？包括学校，专业，主修课程，掌握的技能，每次都要强调下我们学校的电子商务是偏技术的</li><li>说说项目吧，都是学校的吗？没有实习吗？项目都是学校和同学打比赛写的，有实习，因为疫情管控和通勤时间太长了就辞了。挑一个说说项目中的难点，如何解决，当时的心情怎么样？这个就不说了，项目烂大街啊哈哈哈，但反映的是项目必须准备充分，有1-2个可以讲的，讲解你遇到的困难，怎么解决的，这个过程你去如何阐述，这其实不仅仅检查你的开发能力，还能考验语言表述能力。不然你说项目没啥，那就狂问基础，直到你趴下为止……</li><li>挖了很久项目，那我们现在来聊聊基础，讲讲jvm中新生代和老年代的转换吧<ul><li>大对象直接到老年代</li><li>分配担保机制：当Eden区没有足够内存时，发起MinorGC，若此时存活对象无法存入Survivor区，这通过分配担保机制把新生代的对象提前转移到老年代去；</li><li>Survivor To被填满，将所有的对象转移到老年代</li><li>Survivor To中一半以上对象的年龄相等，直接转</li><li>Survivor To中对象年龄达到阈值（默认15）</li></ul></li><li>讲讲Spring，SpringMVC，SpringBoot，SpringCloud的区别和联系</li><li>都是关系型数据库对吧，还有非关系型呢，那说说常用的关联查询？Mysql有内连接Inner Join，left Join，Right Join，没有全连接，Sql Server有全连接</li><li>网络怎么样？正打算说OSI七层协议，面试官说给个场景，说说浏览器请求一个搜狐的网站，到用户显示用到的协议吧。首先，域名，搜狐是<strong>HTTPS</strong>的，拿到域名就要进行域名和IP的转换，<strong>IP协议</strong>，用到了<strong>DNS协议</strong>，底层是<strong>UDP协议</strong>，然后是<strong>TCP协议</strong>的三次握手建立连接，请求后端，拿到数据，渲染页面</li><li>平时怎么学习提升自己的？千里培训—&gt;看b站视频学习—&gt;看博客和公众号(举了几个博主和美团技术团队的博客)—&gt;看书，因为前面的都是别人嚼碎的东西，要想深入底层，只有看书，最近在看《深入理解JVM》，平时看书也会做读书笔记（电子档的），这个是方便后面查找知识点</li></ol><p>反问：</p><ol><li>进去真的要转语言吗？其实我知道答案，我只是想继续聊会，语言只是工具，有学习能力才是最重要的</li><li>请面试官评价下我今天的表现？记不太清他咋说了，反正没有直接说怎么怎么样</li><li>又聊了会，说等会人事会通知你后面的面试流程，今天就这样吧</li></ol><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><blockquote><p>2021年8月27日 16:35-17:04 太紧张了，一想到是VP就紧张的要是，看牛客上说VP气场十足！搞得中午都没睡着，下午进腾讯会议，发现是面试官挺年轻啊，应该是部门老大吧，很和蔼的！全程基本上是聊天，面试体验巨好</p></blockquote><ol><li>自我介绍+专业介绍+项目+比赛，期间也在问我一些东西</li><li>说一下你觉得最有成就感的事？就讲了下自己自学经历，里面学到什么，面试官就笑了</li><li>平时有关注什么技术论坛吗？美团技术团队，还有很多UP主，博主等等</li><li>为什么选择武汉？</li></ol><p><strong>反问</strong></p><ol><li>面试官您在选候选人的时候，看重什么？ 一面二面三面不一样的，哈哈，记得最清楚的是一面就是看和简历匹配度，写了精通的话，那就不好意思了，那就要好好问问你，我当时也笑了，我说这是对技术的不尊重，他说没个10年这些精通的都是作死，笑死我了！</li><li>对我的评价怎么样？</li></ol><p>然后聊了很久，面试官说，你有啥想聊的都可以跟我聊啊，哈哈哈，确实面试官技术人很好，技术广度很广的，反复强调数据结构和设计模式</p><ol><li>于是我就说这个数据结构和算法我还好，设计模式，因为没怎么写企业的项目，积累很少，他说这个是时间换来的，你已经很不错了</li><li>公司培养体系？只能说非常完善！</li><li>薪资？不是BAT那种企业，公司是自研软件，然后卖钱，盈利模式不一样，但薪资是中上游</li></ol><h2 id="OC"><a href="#OC" class="headerlink" title="OC"></a>OC</h2><p>HR给我打电话的时候，我还在深信服笔试，微信小程序把手机锁了，我猜想应该是绿盟的，还看了电话是武汉的，就接了，当时在自习室，我很小声，HR问我放不方便，我说等会吧，现在不方便，约定了半小时后她再打来。</p><p>后面聊了15分钟，就发offer了~</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>刷面经</title>
    <link href="/2021/08/16/%E5%88%B7%E9%9D%A2%E7%BB%8F/"/>
    <url>/2021/08/16/%E5%88%B7%E9%9D%A2%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p><strong>七大参数：</strong></p><ul><li><p>核心线程数量大小</p></li><li><p>最大线程数量大小</p></li><li><p>等待时间</p></li><li><p>等待时间单位</p></li><li><p>阻塞队列</p><p>ArrayBlockingQueue（基于数组），LinkedBlockingQueue（基于链表，无界队列，可传入参数构建有界队列），PriorityBlockingQueue（支持优先级的无界阻塞队列，因为是无界，所以put不会阻塞）</p></li><li><p>构建工厂 一般都是默认</p></li><li><p>拒绝策略（<strong>四大策略</strong>）</p><p>满了就抛异常（默认），满了就不管，满了就抛弃队列最早的，满了就由调用该方法的线程去执行</p><p>​</p></li></ul><p><strong>为什么不用Excutor创建线程？</strong></p><p><strong>Excutor</strong>是创建线程池的工具类，有四个</p><ul><li>SingleThreadPool</li><li>FixedThreadPool</li><li>CacheThreadPool</li><li>ScheduleThreadPool</li></ul><p>前两个是会创建固定的线程数，但是阻塞队列是无边界的，会导致请求的堆积，最终OOM</p><p>后两个会创建Integer.MAX_VALUE个线程，导致OOM</p><p><strong>向线程池添加任务后线程池的处理逻辑</strong></p><ol><li>首先判断当前线程池任务量有没有达到核心线程数大小，没有达到就创建线程来执行任务</li><li>到达了，就看阻塞队列满没满，没满就放到阻塞队列里</li><li>满了，就判断当前线程数是不是达到最大线程数，没有就创建线程去执行</li><li>达到最大线程数了，那就要执行拒绝策略了</li></ol><h1 id="HashMap老八股文"><a href="#HashMap老八股文" class="headerlink" title="HashMap老八股文"></a>HashMap老八股文</h1><p><strong>底层数据结构？</strong></p><blockquote><p>JDK1.7 数组+链表 —&gt;JDK1.8数组+链表+红黑树</p></blockquote><p>头插法—&gt;尾插法</p><blockquote><p>头插法在单线程下不会让链表变成环状，多线程下可能会发生节点的互相引用，造成链表的环状，以至于再get()时会发生死循环</p><p>尾插法就不会，但这并不是HashMap的BUG，因为HashMap并不是线程安全的，要在多线程环境下就用ConcurentMap</p></blockquote><p><strong>转红黑树的条件？</strong></p><blockquote><p>链表长度大于8并且桶的大小达到64才会转红黑树，即使链表长度大于8，桶的大小未达到64，是先扩容的</p></blockquote><p><strong>put()操作</strong></p><blockquote><p>1.获取hash，扰动函数，高16位&amp;低16位，更加散列，减少hash碰撞</p><p>2.寻址算法：hash&amp;bin.length-1，找到桶的位置</p><p>3.hashmap是懒加载机制，用到才会初始化，所以第一步是检查hashmao有不有初始化，没有就先初始化，默认16</p><p>4.已经初始化的hashmap，下面就是put的操作了，当找到的桶的位置为空，那就直接放上去即可</p><p>5.桶的位置不为空，桶的第一个元素与插入的key一样，那就进行替换操作（用&#x3D;&#x3D;或者equals()）</p><p>6.当前已经树化了，创造树型节点插入红黑树中，这个我就不深究了，红黑树还是难</p><p>7.当前已经链化了，那就next，一个一个找，一个一个equals()去比较，直到最后也没发现相同的key，那就直接把Node放在链表尾部，也就是尾插法，判断链表长度是否大于 8， 大于的话链表转换为红黑树</p><p>8.++size，如果++size()&gt;扩容阈值，就立即进行resize()</p></blockquote><p><strong>get()操作</strong></p><blockquote><p>1.如果链表为空或者对应桶为是空的，那就直接返回null</p><p>2.如果不为空，并且桶的头元素就是要找的key，那就直接返回value</p><p>3.桶已经树化了，就在红黑树上找</p><p>4.桶已经链化了，就在链表上找，找到就直接返回，到最后也没找到，就直接返回null</p></blockquote><p><strong>resize()操作</strong></p><blockquote><ol><li><p>如果链表已经到底Integer.MAX_VALUE，就不再进行扩容了</p></li><li><p>否则就翻倍扩容*2</p><p>rehash()</p></li><li><p>现在就要进行数组的迁移操作了，头节点不为空，就把当前桶位置为空</p></li><li><p>当前桶只有一个原始，直接进行寻址算法，找到新的桶位置</p></li><li><p>已经树化了，也是重新找桶的位置</p></li><li><p>已经链化了，就分高位链表和低位链表，低位链表存放在扩容之后的数组下标的位置，与当前数组下标位置一致的元素，高位链表存放在扩容之后的数组下标的位置为当前数组下标位置+ 扩容之前数组长度的元素，进行链表的拼接</p></li></ol></blockquote><p><strong>如果是一个Object作为hashMap的key的话这个对象需要满足什么条件？</strong></p><blockquote><p>Hashmap不允许有重复的key，所以要重写它的hashcode和equals方法，以便确认key是否重复。重写hashCode()是因为需要计算存储数据的存储位置，重写equals()方法目的是为了保证key在哈希表中的唯一性</p></blockquote><p><strong>红黑树查找和插入时间复杂度</strong></p><blockquote><p>查找和插入都是O(logN)</p></blockquote><h1 id="ConcurrentHashMap老八股文"><a href="#ConcurrentHashMap老八股文" class="headerlink" title="ConcurrentHashMap老八股文"></a>ConcurrentHashMap老八股文</h1><p>线程安全的HashMap</p><p><strong>底层数据结构？</strong></p><blockquote><p>JDK1.7 Segment+HashEntry分段锁实现</p><p>JDK1.8抛弃Segment，采用CAS+Sync+数组+链表+红黑树，</p></blockquote><p><strong>详细讲解分段锁吧</strong></p><blockquote><p>Segment继承于ReentrantLock，Segment则包含HashEntry的数组，HashEntry本身就是⼀个链表的结构，具有保存key、value的能⼒能指向下⼀个节点的指针。</p><p>Segment就是HashMap，默认是16个，也就是说支持16个线程的并发写，Segment之间相互不受到影响,每一段都使用分段锁，当一个线程占用锁访问其中一段数据时，其他端数据也能被其他线程访问。</p></blockquote><p><strong>get()会加锁吗？（JDK1.7）</strong></p><blockquote><p>不会，通过Key定位到Segment，再遍历链表上的元素，获取到的value是volatile的，所以get是不需要加锁的</p></blockquote><p><strong>put()操作？</strong></p><blockquote><p>1.和hashmap类锁，先通过计算hash，定位到Segment，如果当前Segment是空的，就初始化</p><p>2.使用ReentrantLock加锁，如果尝试获取锁失败就尝试自选，如果自旋锁超过一定次数就阻塞，保证一定能获取到锁</p><p>3.遍历HashEntry，和HashMap一样，有就替换，没有就加上</p></blockquote><p><strong>JDK1.8中具体怎么实现ConcurrentHashMap再说详细点</strong></p><blockquote><p>采用CAS+Syn来保证并发的线程安全，put时，通过hash计算数组位置，若为空，就通过CAS操作直接添加。若不为空就Sync加锁，进行添加操作。Sync之锁定当前链表或红黑树的首节点，只要Hash不冲突，就不会产生并发，效率大大提示</p><p>get没有进行同步操作，支持不并发操作</p></blockquote><p><strong>说说为什么1.8抛弃了1.7的分段锁吧</strong></p><blockquote><ol><li>Segment继承自ReentrantLock，有了锁的功能，是分段的，当Segment越来越大，锁的粒度也越来越大</li><li>分段锁优势在于操作不同的Segment是并发的，不需要锁，操作同一个Segment是需要锁的，相对于对整个map加锁是有优势的</li><li>缺点在于分成很多段是会比较浪费内存空间（不连续，碎片化）；操作map时竞争同一个分段锁的概率非常小时，分段锁反而会造成更新等操作的长时间等待; 当某个段很大时，分段锁的性能会下降。</li></ol></blockquote><p><strong>为什么不用ReentrantLock而用Sync?</strong></p><blockquote><ol><li>减少内存开销:如果使用ReentrantLock则需要节点继承AQS来获得同步支持，增加内存开销，而1.8中只有头节点需要进行同步。</li><li>内部优化:synchronized则是JVM直接支持的，JVM能够在运行时作出相应的优化措施：锁粗化、锁消除、锁自旋等等。</li></ol></blockquote><h1 id="SQL优化"><a href="#SQL优化" class="headerlink" title="SQL优化"></a>SQL优化</h1><blockquote><p>这个基本上也是必问的一道题，先说思路和维度</p></blockquote><ul><li>分析语句，是否加载了不必要的字段和数据</li><li>分析SQL执行计划，是否命中索引？这时候可以讲讲适合创建索引的字段，索引失效的情况，</li><li>如果SQL很复杂，优化SQL结构</li><li>如果单表数据数据量过大，可以考虑分表？水平分表？hash或者range</li></ul><h2 id="1-优化表结构"><a href="#1-优化表结构" class="headerlink" title="1. 优化表结构"></a>1. 优化表结构</h2><ul><li><p>尽量使用数字型字段</p><p>若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符型，而对数字型只需要一次比较即可</p></li><li><p>能用char就用char，存取更快（会问char和varchar的区别，char是固定长度，英文1个字节，中文2个字节，varchar是变长的，中英文都是2个字节）</p></li><li><p>当索引列出现大量重复数据，离散性不好，比如性别，状态等，就需要删掉索引</p></li></ul><h2 id="2-优化查询"><a href="#2-优化查询" class="headerlink" title="2. 优化查询"></a>2. 优化查询</h2><p><strong>适合创建索引的列</strong></p><ol><li>主键(默认就是聚簇索引)</li><li>经常查</li><li>非空</li><li>需要order by，group by</li><li>非空、唯一</li><li>经常范围查询</li></ol><p><strong>不适合创建索引的列</strong></p><ol><li>很少查询的列</li><li>定义为text，bit，image的数据类型</li><li>有null的</li><li>修改性能远远大于检索时，不应该创建索引</li></ol><p><strong>索引失效的情况</strong></p><ol><li>where中存在函数类型转换，比如select * from news where year(publish_time) &lt; 2017</li><li>遇到null</li><li>！&#x3D; ，not in ，not exits会走索引，in也不一定都会走索引，假如in中的集合包含了很多数据，innodb判断性能还不如直接扫表，那就不会走索引了</li><li>like，对于where filed like ‘%luffy%’，不会走索引，但where filed like ‘luffy%’会走索引，取决于%的位置</li><li>遇到运行 比如where id * 3 &#x3D; 100，不会走，可以优化成where id &#x3D; 100 &#x2F; 3</li></ol><p>需要注意<strong>覆盖查询</strong>，防止回表查询。复合索引符合最<strong>左前缀原则</strong></p><h2 id="3-优化索引"><a href="#3-优化索引" class="headerlink" title="3.优化索引"></a>3.优化索引</h2><ul><li>对作为查询条件和order by的字段建立索引</li><li>避免过多的建立索引，多使用组合索引</li></ul><p>接下是个重头戏了，<strong>分析执行计划Expain SQL</strong></p><ol><li>id 查询的序号</li><li>select_type 简单查询还是复杂查询</li><li>table 在哪个表上进行操作</li><li>type 最重要的一个参考之一，表示关联类型或者访问类型，即返回MySql决定如何查找表中的数据。从最优到最差分别为：system—&gt;const—&gt;eq_ref—&gt; ref—&gt; fulltext—&gt; ref_or_null—&gt; index_merge—&gt; unique_subquery—&gt; index_subquery—&gt; range—&gt; index—&gt;All</li><li>pussible_keys 显示查询可能使用哪些索引来查询</li><li>key 实际采用了哪个索引</li><li>key_len 显示mysql在索引中使用的字节数，通过这个值可以算出具体使用了索引中的哪些列</li><li>ref 显示了在key列记录的索引中，表查找值所用到的列或常量。常见的有：const(常量)、func，NULL，字段名</li><li>rows mysql估计要读取并检测的行数，不是结果集的行数</li><li>Extra 显示额外信息，Using index,Using where,Using temporary等</li></ol><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><p>这个东西这没啥好说的，多敲就行，但一段时间不用，基本上全忘了，面试也会问开发环境，那就一定要说下Linux，毕竟企业部署都是在Linux上，这里也只是说下Java工程师常用命令，多的感觉没必要去记，用到去查就是</p><blockquote><p>切换root用户</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -i<br></code></pre></td></tr></table></figure><blockquote><p>文件常用操作</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs shell">~~ 新建文件夹<br>[root@centos7-luffy ~]# mkdir /root/testLinux<br>~~ 进入文件夹<br>[root@centos7-luffy ~]# cd testLinux/<br>~~ 显示当前文件夹内的文件信息<br>[root@centos7-luffy testLinux]# ls<br>~~ 打印当前路径<br>[root@centos7-luffy testLinux]# pwd<br>/root/testLinux<br>~~ 平铺文件信息<br>[root@centos7-luffy testLinux]# ll<br>总用量 0<br>~~ 创建文件，若文件存在就更新文件访问时间和修改时间<br>[root@centos7-luffy testLinux]# touch a.txt<br>~~ 编辑文件<br>[root@centos7-luffy testLinux]# vim a.txt<br>~~ 预览文件<br>[root@centos7-luffy testLinux]# cat a.txt<br>&quot;I love Linux&quot;<br>~~ 显示文件前10行<br>[root@centos7-luffy testLinux]# head -10 a.txt<br>&quot;I love Linux&quot;<br>~~ 显示文件后10行<br>[root@centos7-luffy testLinux]# tail -10 a.txt<br>&quot;I love Linux&quot;<br>~~ 把数据写入文件<br>[root@centos7-luffy testLinux]# echo &quot;wdnmd&quot; &gt;&gt; a.txt<br>[root@centos7-luffy testLinux]# cat a.txt<br>&quot;I love Linux&quot;<br>wdnmd<br>[root@centos7-luffy testLinux]# cd ../<br>[root@centos7-luffy ~]# ls<br>anaconda-ks.cfg initial-setup-ks.cfg msql mysql temp test testLinux 公共 模板 视频 图片 文档 下载 音乐 桌面<br>[root@centos7-luffy ~]# cd test<br>[root@centos7-luffy test]# ls<br>b.txt<br>~~ 删除文件 -f 强制删除，不用确认 rm -r 文件夹名字，用来删除文件夹<br>[root@centos7-luffy test]# rm -f b.txt<br>[root@centos7-luffy test]# cd ../testLinux/<br>[root@centos7-luffy testLinux]# ls<br>a.txt<br>~~ 复制文件 cp 文件 复制到的路径<br>[root@centos7-luffy testLinux]# cp a.txt /root/test<br>[root@centos7-luffy testLinux]# cd /root/test<br>[root@centos7-luffy test]# ls<br>a.txt<br>[root@centos7-luffy test]# cat a.txt<br>&quot;I love Linux&quot;<br>wdnmd<br>~~ 移动文件 可以用来重命名哟 mv 指定文件路径 目标文件路径<br>[root@centos7-luffy test]# mv a.txt rename.txt<br>[root@centos7-luffy test]# ls<br>rename.txt<br>[root@centos7-luffy test]# mv rename.txt /root/testLinux/<br>[root@centos7-luffy test]# ls<br>[root@centos7-luffy test]# cd ../testLinux/<br>[root@centos7-luffy testLinux]# ls<br>a.txt rename.txt<br>[root@centos7-luffy testLinux]# cat rename.txt<br>&quot;I love Linux&quot;<br>wdnmd<br>~~ 重启系统<br>[root@centos7-luffy testLinux]# reboot<br>~~ 传了个压缩包到该文件夹，用来演示文件解压和压缩操作<br>[root@centos7-luffy testLinux]# ls<br>apache-maven-3.6.3-bin.tar.gz a.txt rename.txt<br>~~ 文件解压<br>[root@centos7-luffy testLinux]# tar zxvf apache-maven-3.6.3-bin.tar.gz<br>apache-maven-3.6.3/README.txt<br>apache-maven-3.6.3/LICENSE<br>apache-maven-3.6.3/NOTICE<br>apache-maven-3.6.3/lib/<br>apache-maven-3.6.3/lib/cdi-api.license<br>apache-maven-3.6.3/lib/commons-cli.license<br>apache-maven-3.6.3/lib/commons-io.license<br>apache-maven-3.6.3/lib/commons-lang3.license<br>apache-maven-3.6.3/lib/guava.license<br>······<br>[root@centos7-luffy testLinux]# ls<br>apache-maven-3.6.3 apache-maven-3.6.3-bin.tar.gz a.txt rename.txt<br>~~ 删除之前的压缩包，用文件夹压缩得到压缩包<br>[root@centos7-luffy testLinux]# rm -f apache-maven-3.6.3-bin.tar.gz<br>[root@centos7-luffy testLinux]# ls<br>apache-maven-3.6.3 a.txt rename.txt<br>~~ 文件压缩 tar -zvcf 压缩包文件名 要压缩的文件夹<br>[root@centos7-luffy testLinux]# tar -zcvf apache-maven-3.6.3.tar.gz apache-maven-3.6.3<br>apache-maven-3.6.3/<br>apache-maven-3.6.3/README.txt<br>apache-maven-3.6.3/LICENSE<br>apache-maven-3.6.3/NOTICE<br>apache-maven-3.6.3/lib/<br>apache-maven-3.6.3/lib/cdi-api.license<br>apache-maven-3.6.3/lib/commons-cli.license<br>apache-maven-3.6.3/lib/commons-io.license<br>apache-maven-3.6.3/lib/commons-lang3.license<br>apache-maven-3.6.3/lib/guava.license<br>apache-maven-3.6.3/lib/guice.license<br>apache-maven-3.6.3/lib/jansi.license<br>apache-maven-3.6.3/lib/javax.inject.license<br>apache-maven-3.6.3/lib/jcl-over-slf4j.license<br>apache-maven-3.6.3/lib/jsoup.license<br>apache-maven-3.6.3/lib/jsr250-api.license<br>apache-maven-3.6.3/lib/org.eclipse.sisu.inject.license<br>apache-maven-3.6.3/lib/org.eclipse.sisu.plexus.license<br>apache-maven-3.6.3/lib/plexus-cipher.license<br>apache-maven-3.6.3/lib/plexus-component-annotations.license<br>apache-maven-3.6.3/lib/plexus-interpolation.license<br>······<br>[root@centos7-luffy testLinux]# ls<br>apache-maven-3.6.3 apache-maven-3.6.3.tar.gz a.txt rename.txt<br>[root@centos7-luffy testLinux]#<br></code></pre></td></tr></table></figure><blockquote><p>关于网络的</p></blockquote><p>netstat 命令用于显示各种网络相关信息，如网络连接，路由表，网络连接状态。命令格式：<code>netstat [-options]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">options 参数解析<br>-a (all)显示所有选项，默认不显示 Listen 相关<br>-t (tcp)仅显示tcp相关选项<br>-u (udp)仅显示udp相关选项<br>-n 拒绝显示别名，能显示数字的全部转化成数字。<br>-l 仅列出有在 Listen (监听) 的服務状态<br>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如uid等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该netstat命令<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">netstat -pt</span><br>Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name<br>tcp 0 0 localhost:30037 \*:\* LISTEN 2109/firefox<br>....<br>------各项指标解析----------------------------------------<br>Proto 协议<br>Recv-Q 接收队列 ，一般都应该是0。如果不是则表示软件包正在队列中堆积<br>Send-Q 发送队列，一般都应该是0。如果不是则表示软件包正在队列中堆积<br>Local Address 本地地址+port<br>Foreign Address 远端地址+port<br>State 状态<br>PID 进程pid<br>Program name 进程名<br></code></pre></td></tr></table></figure><p>netstat 常用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain"># netstat -anp<br># netstat -tunlp<br></code></pre></td></tr></table></figure><p>lsof（List Open Files） 用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。命令格式 <code>lsof ［options］ filename</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">options 参数解释<br>-a 列出打开文件存在的进程<br>-c&lt;进程名&gt; 列出指定进程所打开的文件(常用)<br>-p&lt;进程号&gt; 列出指定进程号所打开的文件(常用)<br>-g 列出属于gid的进程详情<br>-u&lt;uname/uid&gt; 显示归属uname或uid的进程情况<br>-d&lt;fd文件号&gt; 列出占用该文件号的进程<br>+d&lt;目录&gt; 列出目录下被打开的文件<br>+D&lt;目录&gt; 递归列出目录下被打开的文件<br>-n&lt;目录&gt; 列出使用NFS的文件<br>-i&lt;条件&gt; 列出符合条件的进程。（ip4/ip6协议、端口、 @ip ）<br>-u 列出UID号进程详情<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain"># lsof<br>command PID USER FD type DEVICE SIZE NODE NAME<br>init 1 root txt REG 8,2 43496 6121706 /sbin/init<br>---------各项指标解析-----------------------<br>COMMAND 进程的名称<br>PID 进程标识符<br>USER 进程所有者<br>FD 文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等<br>TYPE 文件类型，如DIR、REG等<br>DEVICE 指定磁盘的名称<br>SIZE 文件的大小<br>NODE 索引节点（文件在磁盘上的标识）<br>NAME 打开文件的确切名称<br></code></pre></td></tr></table></figure><p>lsof 示例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">~~ 显示所有打开80端口的进程<br># lsof -i:80<br>~~ 那个进程在占用/etc/passwd<br># lsof /etc/passwd<br>~~ 显示使用fd为1211的进程<br># lsof -d 1211<br>~~ 显示那些文件被pid为 1211 的进程打开<br># lsof -p 1211<br>~~ 查看sendmail进程的文件使用情况<br># lsof -c sendmail<br></code></pre></td></tr></table></figure><blockquote><p>系统状况</p></blockquote><p>top 命令是用来监控Linux系统状况，比如cpu、内存，进程等资源使用情况。命令格式：<code>top [-options]</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plain">options 选项参数<br>-i&lt;时间&gt; 设置刷新间隔时间<br>-u&lt;用户名&gt; 指定用户名<br>-p&lt;进程号&gt; 指定进程<br>-H 开启线程查看<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">top</span><br>top - 18:20:27 up 26 days, 8:30, 2 users, load average: 0.04, 0.09, 0.13<br>Tasks: 168 total, 1 running, 167 sleeping, 0 stopped, 0 zombie<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s): 0.3 us, 0.5 sy, 0.0 ni, 99.1 <span class="hljs-built_in">id</span>, 0.0 wa, 0.0 hi, 0.1 si, 0.0 st</span><br>KiB Mem: 32762356 total, 14675196 used, 18087160 free, 884 buffers<br>KiB Swap: 2103292 total, 0 used, 2103292 free. 6580028 cached Mem<br>PID USER PR NI VIRT RES SHR S %CPU %MEM TIME+ COMMAND<br>1260 root 20 0 7933492 1.173g 14004 S 0.333 3.753 58:20.74 java<br>1503 root 20 0 69172 2240 1412 S 0.333 0.007 0:48.05 httpd<br>1520 daemon 20 0 358140 3980 776 S 0.333 0.012 6:19.55 httpd<br>2323 mysql 20 0 19.918g 4.538g 9404 S 0.333 14.52 352:51.44 mysqld<br>.......<br>---------各项指标解析---------------------------------------------------<br>第一行统计信息区<br>18:20:27 当前时间<br>up 25 days, 17:29 系统运行时间，格式为时:分<br>1 user 当前登录用户数<br>load average: 0.04, 0.09, 0.13 系统负载，三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值<br>Tasks：进程相关信息<br>running 正在运行的进程数<br>sleeping 睡眠的进程数<br>stopped 停止的进程数<br>zombie 僵尸进程数<br>Cpu(s)：CPU相关信息<br><span class="hljs-meta prompt_">%</span><span class="language-bash">us：表示用户空间程序的cpu使用率（没有通过<span class="hljs-built_in">nice</span>调度）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">sy：表示系统空间的cpu使用率，主要是内核程序</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">ni：表示用户空间且通过<span class="hljs-built_in">nice</span>调度过的程序的cpu使用率</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash"><span class="hljs-built_in">id</span>：空闲cpu</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">wa：cpu运行时在等待io的时间</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">hi：cpu处理硬中断的数量</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">si：cpu处理软中断的数量</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">st：被虚拟机偷走的cpu</span><br>Mem 内存信息<br>total 物理内存总量<br>used 使用的物理内存总量<br>free 空闲内存总量<br>buffers 用作内核缓存的内存量<br>Swap 内存信息<br>total 交换区总量<br>used 使用的交换区总量<br>free 空闲交换区总量<br>cached 缓冲的交换区总量<br>~~ 常用的指标<br>PID 进程id<br>PPID 父进程id<br>UID 进程所有者的用户id<br>USER 进程所有者的用户名<br>GROUP 进程所有者的组名<br>TTY 启动进程的终端名。不是从终端启动的进程则显示为 ?<br>PR 优先级<br>NI nice值。负值表示高优先级，正值表示低优先级<br>P 最后使用的CPU，仅在多CPU环境下有意义<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU 上次更新到现在的CPU时间占用百分比</span><br>TIME 进程使用的CPU时间总计，单位秒<br>TIME+ 进程使用的CPU时间总计，单位1/100秒<br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM 进程使用的物理内存百分比</span><br>VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。<br>RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>CODE 可执行代码占用的物理内存大小，单位kb<br>DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb<br>SHR 共享内存大小，单位kb<br>S 进程状态; 相关枚举值解释查看 ps -ef S 项解释<br>COMMAND 进程启动执行的命令行<br></code></pre></td></tr></table></figure><p>top 命令下，查看信息常用快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs plain">h 显示快捷键帮助<br>k 终止一个进程<br>i 开/关忽略闲置和僵死进程<br>q 退出程序<br>r 重新安排一个进程的优先级别<br>S 切换到累计模式<br>s 更改刷新间隔时间，单位秒<br>f,F 从当前显示中添加或者删除项目<br>o,O 改变显示项目的顺序<br>l 切换显示平均负载和启动时间信息<br>m 切换显示内存信息<br>t 切换显示进程和CPU状态信息<br>c 切换显示命令名称和完整命令行<br>M 根据内存使用大小排序<br>P 根据CPU使用率进行排序 （默认排序）<br>T 根据时间/累计时间进行排序<br>1 展开多核cpu显示<br>H 线程查看模式切换为开或关<br></code></pre></td></tr></table></figure><p>文件的读写情况、系统调用的使用情况、磁盘I&#x2F;O、CPU效率、内存使用状况、进程活动及 IPC 有关的活动等。命令格式：<code>sar [options] [-A] [-o file] delay [count]</code>。delay 为采样间隔，count 为采样次数，默认值是1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs plain">options 选项参数<br>-A 所有报告的总和<br>-o file 表示将命令结果以二进制格式存放在文件中，file 是文件名<br>-u 输出CPU使用情况的统计信息<br>-v 输出inode、文件和其他内核表的统计信息<br>-d 输出每一个块设备的活动信息<br>-b 显示I/O和传送速率的统计信息（相对-d 是汇总信息）<br>-r 输出内存和交换空间的统计信息<br>-R 输出内存页面的统计信息<br>-a 文件读写情况<br>-q 队列长度和平均负载<br>-c 输出进程统计信息，每秒创建的进程数<br>-y 终端设备活动情况<br>-w 输出系统交换活动信息<br>-x &lt;pid&gt; 显示给定进程的统计信息<br>-n &lt;关键词&gt; 统计网络信息<br>关键词可以是：<br>DEV 网卡<br>EDEV 网卡 (错误)<br>NFS NFS 客户端<br>NFSD NFS 服务器<br>SOCK Sockets (套接字) (v4)<br>SOCK6 Sockets (套接字) (v6)<br>IP IP 流 (v4)<br>EIP IP 流 (v4) (失败信息)<br>ICMP ICMP 流 (v4)<br>EICMP ICMP 流 (v4) (失败信息)<br>TCP TCP 流 (v4)<br>ETCP TCP 流 (v4) (失败信息)<br>UDP UDP 流 (v4)<br>IP6 IP 流 (v6)<br>EIP6 IP 流 (v6) (失败信息)<br>ICMP6 ICMP 流 (v6)<br>EICMP6 ICMP 流 (v6) (失败信息)<br>UDP6 UDP 流 (v6)<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sar -u 1 2</span><br>Linux 3.10.0-862.el7.x86\_64 (8f57ec39327b) 07/11/2021 \_x86\_64\_ (6 CPU)<br>07:02:04 PM CPU %user %nice %system %iowait %steal %idle<br>07:02:05 PM all 23.90 3.22 7.97 5.25 0.00 59.66<br>07:02:06 PM all 26.53 4.76 8.84 5.95 0.00 53.91<br>Average: all 25.21 3.99 8.40 5.60 0.00 56.79<br>------各项指标解析---------------------------------<br><span class="hljs-meta prompt_">%</span><span class="language-bash">user 用户空间的CPU使用</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash"><span class="hljs-built_in">nice</span> 改变过优先级的进程的CPU使用率</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">system 内核空间的CPU使用率</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">iowait CPU等待IO的百分比</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">steal 虚拟机的虚拟机CPU使用的CPU</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">idle 空闲的CPU</span><br></code></pre></td></tr></table></figure><p>查看内存使用情况 <code>sar -r</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sar -r 1 2</span><br>Linux 3.10.0-862.el7.x86\_64 (8f57ec39327b) 07/11/2021 \_x86\_64\_ (6 CPU)<br>07:05:16 PM kbmemfree kbmemused %memused kbbuffers kbcached kbcommit %commit kbactive kbinact kbdirty<br>07:05:17 PM 299596 32398396 99.08 2084 7615088 37900868 115.91 27267692 3809860 672<br>07:05:18 PM 298932 32399060 99.09 2084 7615848 37900100 115.91 27267828 3810252 488<br>Average: 299264 32398728 99.08 2084 7615468 37900484 115.91 27267760 3810056 580<br>------各项指标解析--------------------<br>kbmemfree 空闲的物理内存大小<br>kbmemused 使用中的物理内存大小<br><span class="hljs-meta prompt_">%</span><span class="language-bash">memused 物理内存使用率</span><br>kbbuffers 内核中作为缓冲区使用的物理内存大小，kbbuffers和kbcached:这两个值就是free命令中的buffer和cache.<br>kbcached 缓存的文件大小<br>kbcommit 保证当前系统正常运行所需要的最小内存，即为了确保内存不溢出而需要的最少内存（物理内存+Swap分区）<br>commit 这个值是kbcommit与内存总量（物理内存+swap分区）的一个百分比的值<br></code></pre></td></tr></table></figure><p>查看 IO 和传递速率：<code>sar -b</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sar -b 1 2</span><br>Linux 3.10.0-862.el7.x86\_64 (8f57ec39327b) 07/11/2021 \_x86\_64\_ (6 CPU)<br>07:06:08 PM tps rtps wtps bread/s bwrtn/s<br>07:06:09 PM 171.00 0.00 171.00 0.00 3431.00<br>07:06:10 PM 163.00 0.00 163.00 0.00 2620.00<br>Average: 167.00 0.00 167.00 0.00 3025.50<br>------各项指标解析--------------------<br>tps 磁盘每秒钟的IO总数，等于iostat中的tps<br>rtps 每秒钟从磁盘读取的IO总数<br>wtps 每秒钟从写入到磁盘的IO总数<br>bread/s 每秒钟从磁盘读取的块总数<br>bwrtn/s 每秒钟此写入到磁盘的块总数<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>百度提前批一面</title>
    <link href="/2021/08/05/%E7%99%BE%E5%BA%A6%E6%8F%90%E5%89%8D%E6%89%B9%E4%B8%80%E9%9D%A2/"/>
    <url>/2021/08/05/%E7%99%BE%E5%BA%A6%E6%8F%90%E5%89%8D%E6%89%B9%E4%B8%80%E9%9D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="百度MEG提前批一面-base-上海"><a href="#百度MEG提前批一面-base-上海" class="headerlink" title="百度MEG提前批一面 base 上海"></a>百度MEG提前批一面 base 上海</h1><blockquote><p>08.05 14:50-15:50 面试官提前加的我微信，商量了面试时间，面试用的百度的自研的Web视频会议网站</p></blockquote><ol><li><p>自我介绍，项目介绍</p></li><li><p>算法题：</p><ul><li>根号三的小数点后10位 —&gt;没整出来</li><li>快排</li><li>线程安全的单例（懒汉和饿汉式）</li></ul></li><li><p>hashmap八股 1.7-&gt;1.8 寻址算法 <strong>get的过程</strong></p></li><li><p>hashmap是线程安全的?怎么用线程安全map？—&gt;hashtable hashmap加锁 concurentHashmap(首选)</p></li><li><p>concurentHashmap底层实现 1.7—&gt;1.8 <strong>讲讲分段锁吧</strong></p></li><li><p>sql的优化 —&gt;前一篇面经已经说了，这里就再赘述</p></li><li><p>Spring的Aop？底层实现？ 底层实现当时紧张答成了反射？？？wc</p></li><li><p>Spring的作用域？只说了原型，单例，还有几个忘了</p></li><li><p>Redis基本数据类型，底层实现，简单说下应用场景，你常用的是什么，项目中怎么用到的？</p></li><li><p>Redis常用命令，没说几个，因为都是用的Spring的RedisTemplate，要恶补下啊</p></li><li><p>Redis的缓存击穿，缓存穿透，缓存雪崩是什么？怎么解决？</p></li><li><p>DockerFile常用命令 —&gt;项目中提到DockerFile打包成镜像，刚好面试官就是在MEG做容器的，淦！！！</p><p>有点晚了，害，这段时间的复习都没看这个</p></li><li><p>反问：</p><ul><li>部门的技术栈？ SpringBoot+Mybatis+Redis+ES+Docker，有时候会用到微服务</li><li>今天的面试怎么样？我自己都觉得自己没答好！！ 面试官说简历上写的起码还是能说一些，有很多虽然看着是原理性的东西，但实际开发是经常用到的，比如AOP，呜呜呜</li><li>因为知道面试官是做容器的了，就没问是干嘛的，就直接问K8s和Docker的区别</li></ul></li></ol><p>反思：两次提前批应该都是凉了，但也在我预期内，我就是拿来练练手，能发现自己的不足是最好的，就目前看来我的目的是完全达到了，知道自己的薄弱处和复习的应该注意的点了！！！秋招，继续冲！</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二叉搜索树、平衡二叉树、红黑树、B+树性能对比</title>
    <link href="/2021/07/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%E3%80%81B-%E6%A0%91%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/07/29/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E3%80%81%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91%E3%80%81%E7%BA%A2%E9%BB%91%E6%A0%91%E3%80%81B-%E6%A0%91%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<p>前言：BST、AVL、RBT、B-tree都是动态结构，查找时间基本都在O(longN)数量级上。下面做出详细对比。</p><h1 id="二叉查找树（Binary-Search-Tree）"><a href="#二叉查找树（Binary-Search-Tree）" class="headerlink" title="二叉查找树（Binary Search Tree）"></a>二叉查找树（Binary Search Tree）</h1><p>二叉查找树又称二叉搜索树，二叉排序树，特点如下:</p><ol><li>左子树上所有结点值均小于根结点</li><li>右子树上所有结点值均大于根结点</li><li>结点的左右子树本身又是一颗二叉查找树</li><li>二叉查找树<strong>中序遍历</strong>得到结果是递增排序的结点序列。</li></ol><h2 id="BST-的操作代价分析："><a href="#BST-的操作代价分析：" class="headerlink" title="BST 的操作代价分析："></a>BST 的操作代价分析：</h2><h3 id="查找代价："><a href="#查找代价：" class="headerlink" title="查找代价："></a><strong>查找代价</strong>：</h3><p>任何一个数据的查找过程都需要从根结点出发，沿某一个路径朝叶子结点前进。因此查找中数据比较次数与树的形态密切相关。<br>当树中每个结点左右子树高度大致相同时，<strong>树高为logN</strong>。则<strong>平均查找长度与logN成正比</strong>，查找的平均时间复杂度在O(logN)数量级上。<br>当先后插入的关键字有序时，<strong>BST退化成单支树结构（退化成链表）</strong>。此时树高n。平均查找长度为(n+1)&#x2F;2，查找的平均时间复杂度在O(N)数量级上。</p><h3 id="插入代价"><a href="#插入代价" class="headerlink" title="插入代价"></a>插入代价</h3><p>新结点插入到树的叶子上，完全不需要改变树中原有结点的组织结构。当树中**每个节点左右子树高度大致相同时，插入的平均时间复杂度是O(logN)**；若退化成单链表了，插入的时间复杂度是O(N)。</p><h3 id="删除代价"><a href="#删除代价" class="headerlink" title="删除代价"></a>删除代价</h3><p>当删除一个结点P，首先需要定位到这个结点P，这个过程需要一个查找的代价。然后稍微改变一下树的形态。<strong>如果被删除结点的左、右子树只有一个存在</strong>，则改变形态的代价仅为O(1)。如果被<strong>删除结点的左、右子树均存在</strong>，只需要将当P的左孩子的右孩子的右孩子的…的右叶子结点与P互换，在改变一些左右子树即可。因此删除操作的**时间复杂度最大不会超过O(logN)**。</p><h3 id="BST效率总结"><a href="#BST效率总结" class="headerlink" title="BST效率总结 :"></a><strong>BST效率总结</strong> :</h3><p>查找最好时间复杂度O(logN)，最坏时间复杂度O(N)。<br>插入删除操作算法简单，时间复杂度与查找差不多。</p><h1 id="平衡二叉查找树-Balanced-Binary-Search-Tree"><a href="#平衡二叉查找树-Balanced-Binary-Search-Tree" class="headerlink" title="平衡二叉查找树 ( Balanced Binary Search Tree )"></a>平衡二叉查找树 ( Balanced Binary Search Tree )</h1><p>二叉查找树在最差情况（退化成链表）下竟然和顺序查找效率相当，这是无法仍受的。事实也证明，当存储数据足够大的时候，树的结构对某些关键字的查找效率影响很大。当然，造成这种情况的**主要原因就是BST不够平衡(左右子树高度差太大)**。既然如此，那么我们就需要通过一定的算法，将不平衡树改变成平衡树。因此，AVL树就诞生了。</p><h2 id="AVL-的操作代价分析："><a href="#AVL-的操作代价分析：" class="headerlink" title="AVL 的操作代价分析："></a>AVL 的操作代价分析：</h2><h3 id="查找代价"><a href="#查找代价" class="headerlink" title="查找代价"></a>查找代价</h3><p>AVL是严格平衡的BST（平衡因子不超过1）。那么查找过程与BST一样，只是AVL不会出现最差情况的BST(单支树)。因此查找效率最好，最坏情况都是O(logN)数量级的。</p><h3 id="插入代价-1"><a href="#插入代价-1" class="headerlink" title="插入代价"></a>插入代价</h3><p>AVL必须要保证严格平衡(|bf|&lt;&#x3D;1)，那么每一次插入数据使得AVL中某些结点的平衡因子超过1就必须进行旋转操作。事实上，<strong>AVL的每一次插入结点操作最多只需要旋转1次(**单旋转或双旋转)。因此，总体上插入操作的代价仍然在</strong>O(logN)**级别上(插入结点需要首先查找插入的位置)。</p><h3 id="删除代价："><a href="#删除代价：" class="headerlink" title="删除代价："></a><strong>删除代价</strong>：</h3><p>AVL删除结点的算法可以参见BST的删除结点，但是<strong>删除之后必须检查从删除结点开始到根结点路径上的所有结点的平衡因子</strong>。因此删除的代价稍微要大一些。每一次删除操作最多需要O(logN)次旋转。因此，删除操作的时间复杂度为O(logN)+O(logN)&#x3D;O(2logN)。</p><h3 id="AVL-效率总结"><a href="#AVL-效率总结" class="headerlink" title="AVL 效率总结 :"></a><strong>AVL 效率总结</strong> :</h3><p><strong>查找</strong>的时间复杂度维持在O(logN)，不会出现最差情况<br>AVL树在执行每个<strong>插入</strong>操作时最多需要1次旋转，其时间复杂度在O(logN)左右。<br>AVL树在执行<strong>删除</strong>时代价稍大，执行每个删除操作的时间复杂度需要O(2logN)。</p><h1 id="红黑树-Red-Black-Tree"><a href="#红黑树-Red-Black-Tree" class="headerlink" title="红黑树 (Red-Black Tree )"></a>红黑树 (Red-Black Tree )</h1><p>二叉平衡树的严格平衡策略以牺牲建立查找结构(插入，删除操作)的代价，换来了稳定的O(logN) 的查找时间复杂度。但是这样做是否值得呢？<br>能不能找一种折中策略，即不牺牲太大的建立查找结构的代价，也能保证稳定高效的查找效率呢？ 答案就是：红黑树。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>红黑树性质：</p><ul><li>每个节点不是红色就是黑色</li><li>根结点是黑色</li><li>不可能有连在一起的红色结点</li><li>对于每个结点，从该结点到其所有后代叶节点的简单路径上，均包含相同数目的黑色结点</li><li>每个叶子结点都是黑色的（此处的叶子结点指的是空结点）</li></ul><h2 id="RBT-的操作代价分析："><a href="#RBT-的操作代价分析：" class="headerlink" title="RBT 的操作代价分析："></a>RBT 的操作代价分析：</h2><h3 id="查找代价：-1"><a href="#查找代价：-1" class="headerlink" title="查找代价："></a><strong>查找代价</strong>：</h3><p>由于红黑树的性质(<strong>最长路径长度不超过最短路径长度的2倍</strong>)，可以说明红黑树虽然不像AVL一样是严格平衡的，但平衡性能还是要比BST要好。其查找代价基本维持在O(logN)左右，但在最差情况下(最长路径是最短路径的2倍少1)，比AVL要略逊色一点。</p><h3 id="插入代价："><a href="#插入代价：" class="headerlink" title="插入代价："></a><strong>插入代价</strong>：</h3><p>RBT插入结点时，需要旋转操作和变色操作。但由于只需要保证RBT基本平衡就可以了。因此插入结点最多只需要2次旋转，这一点和AVL的插入操作一样。虽然变色操作需要O(logN)，但是变色操作十分简单，代价很小。</p><h3 id="删除代价：-1"><a href="#删除代价：-1" class="headerlink" title="删除代价："></a><strong>删除代价</strong>：</h3><p>RBT的删除操作代价要比AVL要好的多，删除一个结点最多只需要3次旋转操作。</p><h3 id="RBT-效率总结"><a href="#RBT-效率总结" class="headerlink" title="RBT 效率总结"></a>RBT 效率总结</h3><p>查找 效率最好情况下时间复杂度为O(logN)，但在最坏情况下比AVL要差一些，但也远远好于BST。<br>插入和删除操作改变树的平衡性的概率要远远小于AVL（RBT不是高度平衡的）。因此需要的旋转操作的可能性要小，而且一旦需要旋转，插入一个结点最多只需要旋转2次，删除最多只需要旋转3次(小于AVL的删除操作所需要的旋转次数)。虽然变色操作的时间复杂度在O(logN)，但是实际上，这种操作由于简单所需要的代价很小。</p><h1 id="B树-B-树-B-Tree"><a href="#B树-B-树-B-Tree" class="headerlink" title="B树&#x2F;B+树 (B-Tree )"></a>B树&#x2F;B+树 (B-Tree )</h1><p>对于在内存中的查找结构而言，红黑树的效率已经非常好了(实际上很多实际应用还对RBT进行了优化)。但是如果是数据量非常大的查找呢？将这些数据全部放入内存组织成RBT结构显然是不实际的（内存昂贵）。实际上，像OS中的文件目录存储，数据库中的文件索引结构的存储…. 都不可能在内存中建立查找结构。必须在磁盘中建立好这个结构。那么在这个背景下，RBT还是一种好的选择吗？<br>在磁盘中组织查找结构，从任何一个结点指向其他结点都有可能读取一次磁盘数据，再将数据写入内存进行比较。大家都知道，频繁的磁盘IO操作，效率是很低下的(机械运动比电子运动要慢不知道多少)。<strong>显而易见，所有的二叉树的查找结构在磁盘中都是低效的。因此，B树很好的解决了这一个问题。</strong></p><h2 id="B-Tree的操作代价分析："><a href="#B-Tree的操作代价分析：" class="headerlink" title="B-Tree的操作代价分析："></a>B-Tree的操作代价分析：</h2><h3 id="查找代价-1"><a href="#查找代价-1" class="headerlink" title="查找代价"></a>查找代价</h3><p>B-Tree作为一个平衡多路查找树(m-叉)。B树的查找分成两种：一种是从一个结点查找另一结点的地址的时候，需要定位磁盘地址(查找地址)，查找代价极高。另一种是将结点中的有序关键字序列放入内存，进行优化查找(可以用折半)，相比查找代价极低。而<strong>B树的高度很小，因此在这一背景下，B树比任何二叉结构查找树的效率都要高很多。而且B+树作为B树的变种，其查找效率更高。</strong></p><h3 id="插入代价-2"><a href="#插入代价-2" class="headerlink" title="插入代价"></a>插入代价</h3><p>B-Tree的插入会发生结点的分裂操作。当插入操作引起了s个节点的分裂时，磁盘访问的次数为h(读取搜索路径上的节点)＋2s(回写两个分裂出的新节点)＋1（回写新的根节点或插入后没有导致分裂的节点）。因此，所需要的磁盘访问次数是h+2s+1，最多可达到3h+1。因此插入的代价是很大的。</p><h3 id="删除代价-1"><a href="#删除代价-1" class="headerlink" title="删除代价"></a>删除代价</h3><p>B-Tree的删除会发生结点合并操作。最坏情况下磁盘访问次数是3h＝（找到包含被删除元素需要h次读访问）+（获取第2至h层的最相邻兄弟需要h-1次读访问）+（在第3至h层的合并需要h-2次写访问）+（对修改过的根节点和第2层的两个节点进行3次写访问）。</p><h3 id="B-Tree效率总结"><a href="#B-Tree效率总结" class="headerlink" title="B-Tree效率总结"></a><strong>B-Tree效率总结</strong></h3><p>由于考虑磁盘储存结构，B树的查找、删除、插入的代价都远远要小于任何二叉结构树(读写磁盘次数的降低)。</p><h1 id="动态查找树结构的对比"><a href="#动态查找树结构的对比" class="headerlink" title="动态查找树结构的对比"></a>动态查找树结构的对比</h1><h2 id="平衡二叉树和红黑树-AVL-PK-RBT"><a href="#平衡二叉树和红黑树-AVL-PK-RBT" class="headerlink" title="平衡二叉树和红黑树 [AVL PK RBT]"></a>平衡二叉树和红黑树 [AVL PK RBT]</h2><p>AVL 和RBT 都是二叉查找树的优化。其性能要远远好于二叉查找树。他们之间都有自己的优势，其应用上也有不同。<br><strong>结构对比：</strong> AVL的结构高度平衡，RBT的结构基本平衡。平衡度AVL &gt; RBT.<br><strong>查找对比：</strong> AVL 查找时间复杂度最好，最坏情况都是O(logN)。RBT 查找时间复杂度最好为O(logN)，最坏情况下比AVL略差。<br><strong>插入删除对比：</strong></p><ol><li>AVL的插入和删除结点很容易造成树结构的不平衡，而RBT的平衡度要求较低。因此在大量数据插入的情况下，RBT需要通过旋转变色操作来重新达到平衡的频度要小于AVL。</li><li>如果需要平衡处理时，RBT比AVL多一种变色操作，而且变色的时间复杂度在O(logN)数量级上。但是由于操作简单，所以在实践中这种变色仍然是非常快速的。</li><li>当插入一个结点都引起了树的不平衡，AVL和RBT都最多需要2次旋转操作。但删除一个结点引起不平衡后，AVL最多需要logN 次旋转操作，而RBT最多只需要3次。因此两者插入一个结点的代价差不多，但删除一个结点的代价RBT要低一些。</li><li>AVL和RBT的插入删除代价主要还是消耗在查找待操作的结点上。因此时间复杂度基本上都是与O(logN) 成正比的。</li></ol><p><strong>总体评价：大量数据实践证明，RBT的总体统计性能要好于平衡二叉树</strong>。</p><h2 id="B-树和B-树-B-Tree-PK-B-Tree"><a href="#B-树和B-树-B-Tree-PK-B-Tree" class="headerlink" title="B-树和B+树 [ B-Tree PK B+Tree]"></a>B-树和B+树 [ B-Tree PK B+Tree]</h2><p>B+树是B-树的一种变体，在磁盘查找结构中，B+树更适合文件系统的磁盘存储结构。<br><strong>结构对比：</strong><br>B-树是平衡多路查找树，所有结点中都包含了待查关键字的有效信息(比如文件磁盘指针)。每个结点若有n个关键字，则有n+1个指向其他结点的指针。</p><p>B+树相比B-树的特点：</p><ul><li>数据只出现在叶子结点，B-树每个结点都包含了数据；</li><li>叶子结点之间用指针连接；</li><li>B+树的高度一般是3；</li></ul><p><strong>查找对比：</strong></p><ul><li><p>在相同数量的待查数据下，B+树查找过程中需要调用的磁盘IO操作要少于普通B-树。由于B+树所在的磁盘存储背景下，因此B+树的查找性能要好于B-树。</p></li><li><p>B+树的查找效率更加稳定，因为所有叶子结点都处于同一层中，而且查找所有关键字都必须走完从根结点到叶子结点的全部历程。因此同一颗B+树中，任何关键字的查找比较次数都是一样的。而B树就不一定了，可能查找到某一个非终结点就结束了。</p><p>​</p></li></ul><p><strong>插入删除对比</strong>： B+树与B-树在插入删除操作中的效率是差不多的。</p><p><strong>总体评价：在应用背景下，特别是文件结构存储中。B+树的应用要更多，其效率也要比B树好</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/z702143700/article/details/49079107">二叉查找树、平衡二叉树、红黑树、B-&#x2F;B+树性能对比</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字节一面凉经</title>
    <link href="/2021/07/28/%E5%AD%97%E8%8A%82%E4%B8%80%E9%9D%A2%E5%87%89%E7%BB%8F/"/>
    <url>/2021/07/28/%E5%AD%97%E8%8A%82%E4%B8%80%E9%9D%A2%E5%87%89%E7%BB%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="字节提前批技术中台一面凉经"><a href="#字节提前批技术中台一面凉经" class="headerlink" title="字节提前批技术中台一面凉经~"></a>字节提前批技术中台一面凉经~</h1><blockquote><p>07.26 15:00-16:10 面试官人很好</p></blockquote><ol><li><p>自我介绍</p></li><li><p>项目介绍，结合项目问了些问题（qps多少？内存占用多少？后面怎么更新和维护这个项目？打算用令牌桶限流）</p></li><li><p>JDK平时用的版本？</p></li><li><p>String类可继承吗？ final修饰，不可被继承</p></li><li><p>HashMap八股 JDK1.7—&gt;1.8变化 底层结构和头插变尾插</p></li><li><p>并发下怎么用Map？concurentHashMap—底层实现 JDK1.7—1.8 还有别的方法保证线程安全吗？ hashmap加锁，但不会用，承载能力没这个好 为什么？ 1.7中分段锁底层是什么？ put怎么锁 get会锁？ 获取Entry数组长度是线程安全的吗？（这个没听过哈哈啊 应该是的吧）</p></li><li><p>红黑树 set get的时间复杂度？O(logn)</p></li><li><p>说说并发下的线程安全问题吧（这个是我理解面试官所说的）锁 valtile JUC下的原子类 天然线程安全无状态代码 static</p></li><li><p>volatile作用？底层实现？</p></li><li><p>mysql的有哪些存储引擎，对比下</p></li><li><p>ACID</p></li><li><p>四大隔离级别</p></li><li><p>遇到过慢SQL吗？ 哈哈 没遇到，自己设计的表很简单，不过我可以说说我对优化SQL和建立索引这块的理解—&gt;一般每个表都会有innodb的自增id，不用业务自带的id，讲了下原因；覆盖索引，尽量不要回表，可以explain查看；哪些适合建索引，索引失效的情况，多个索引和联合索引，最左前缀原则</p></li><li><p>微服务治理？我没用微服务啊，都是单体SpringBoot——是的，我想看你了解过没？哦哦，那我还是学过SpringCloud和SprinCloudAliababa，因为Netfilx的宣布停止维护自己的组件，所以新一套的微服务技术栈慢慢转变成：<br>服务注册中心 nacos<br>服务间通信组件 a.RestTemplate+Ribbon b.OpenFeig组件<br>服务熔断、流控 sentinel<br>网关 gateway<br>服务配置中心 nacos</p></li><li><p>ok 我们来个SQL题</p><p><img src="https://uploadfiles.nowcoder.com/images/20210726/854208335_1627302797930/1F18B11DDB50077C9ECF00D88ED81E49"></p></li><li><p>NC91 最长递增子序列 这个b题呕死我了，就是我没刷的，LIS是很简单，但我只是在LeetCode上写的，只返回长度，直接DP，但是这个牛客啊，要返回序列，淦，没写完！！！</p></li></ol><p>第一次面大厂，本人算法很不好，也就把剑指Offer和TOP100刷完了，刷了好几遍，平时会看书，因为看之前字节的面经都是问OS，计网，所以语言基础就没怎么看，害，提前批，试试嘛！秋招继续投~</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是上下文切换</title>
    <link href="/2021/07/19/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/"/>
    <url>/2021/07/19/%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%8A%E4%B8%8B%E6%96%87%E5%88%87%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h1><p>首先，需要讲清楚什么是上下文。</p><p>每个任务运行前，CPU 都需要知道任务从哪里加载、又从哪里开始运行，这就涉及到 <strong>CPU 寄存器</strong> 和 <strong>程序计数器（PC）</strong>：</p><ul><li>CPU 寄存器是 CPU 内置的容量小、但速度极快的内存；</li><li>程序计数器会存储 CPU 正在执行的指令位置，或者即将执行的指令位置。</li></ul><p>这两个是 CPU 运行任何任务前都必须依赖的环境，因此叫做 CPU 上下文。</p><h1 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h1><p>那么，什么是上下文切换呢？下面是一个上下文切换时需要履行的步骤：</p><ol><li>将前一个 CPU 的上下文（也就是 CPU 寄存器和程序计数器里边的内容）保存起来；</li><li>然后加载新任务的上下文到寄存器和程序计数器；</li><li>最后跳转到程序计数器所指的新位置，运行新任务。</li></ol><p>被保存起来的上下文会存储到<strong>系统内核</strong>中，等待任务重新调度执行时再次加载进来。</p><p>CPU 的上下文切换分三种：<strong>进程上下文切换、线程上下文切换、中断上下文切换</strong>。</p><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><p>Linux 按照特权等级，把进程的运行空间分为<strong>内核空间</strong>和<strong>用户空间</strong>：</p><ul><li>内核空间：具有最高权限，可以访问所有资源；</li><li>用户空间：只能访问受限资源，不能直接访问内存等硬件设备，必须借助系统调用。</li></ul><p>进程可以在用户空间运行（叫作：进程用户态），也可以在内核空间运行（叫作：进程内核态）。从用户态到内核态需要<strong>系统调用</strong>完成。</p><p>系统调用过程中也会发生 CPU 上下文切换。CPU 寄存器会先保存用户态的状态，然后加载内核态相关内容。系统调用结束之后，CPU 寄存器要恢复原来保存的用户态，继续运行进程。所以，<strong>一次系统调用，发生两次 CPU 上下文切换</strong>。</p><p>需要注意的是，系统调用过程中，不涉及虚拟内存等进程用户态的资源，也不会切换进程。与通常所说的进程上下文切换不同：</p><ul><li>进程上下文切换是指，从一个进程切换到另一个进程；</li><li>系统调用过程中一直是同一个进程在运行。</li></ul><h1 id="进程上下文切换"><a href="#进程上下文切换" class="headerlink" title="进程上下文切换"></a>进程上下文切换</h1><p><strong>进程是由内核管理和调度的，进程的切换只能发生在内核态。</strong> 因此，进程的上下文不但包括虚拟内存、栈、全局变量等用户空间资源，还包括内核堆栈、寄存器等内核空间状态。所以，进程的上下文切换比系统调用多一个步骤：保存当前进程的内核状态和 CPU 寄存器之前，先把该进程的虚拟内存、栈等保存起来；加载下一个进程的内核态后，还需要刷新进程的虚拟内存和用户栈。<strong>保存上下文和恢复上下文需要内核在 CPU 上运行才能完成。</strong></p><p>Linux 通过 TLB (Translation Lookaside Buffer) 管理虚拟内存到物理内存的映射关系。当虚拟内存更新后，TLB 也需要刷新，内存的访问速度会因此变慢。尤其在多处理器系统上，缓存被多个处理器共享，刷新缓存不仅影响当前处理器的进程，还会影响共享缓存的其他处理器进程。</p><p>Linux 会为每个 CPU 都维护一个就绪队列，将活跃进程（正在运行和正在等待 CPU 的进程）按照优先级和等待 CPU 时间来排序，然后选择最需要 CPU 的进程，也就是优先级最高和等待 CPU 时间最长的进程来运行。</p><p>进程切换时需要切换上下文，进程切换的场景有：</p><p>进程时间片耗尽；<br>系统资源不足（如内存不足）；<br>进程通过睡眠函数 sleep 把自己挂起来；<br>当有优先级更高的进程运行时，为了去运行高优先级进程，当前进程会被挂起；<br>发生硬中断，CPU 上的进程会被挂起，然后去执行内核中的中断服务进程。</p><h1 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h1><p><strong>线程是调度的基本单位，而进程则是资源拥有的基本单位。</strong></p><p>内核中的任务调度实际是在调度线程，进程只是给线程提供虚拟内存、全局变量等资源。线程上下文切换时，共享相同的虚拟内存和全局变量等资源不需要修改。而线程自己的私有数据，如栈和寄存器等，上下文切换时需要保存。</p><p>线程切换分两种情况：</p><p>前后两个线程属于不同进程；<br>前后两个线程属于同一个进程（速度更快，消耗更少资源）。</p><h1 id="中断上下文切换"><a href="#中断上下文切换" class="headerlink" title="中断上下文切换"></a>中断上下文切换</h1><p>为了快速响应硬件的事件，<strong>中断处理会打断进程的正常调度和执行</strong>，然后调用中断处理程序，响应设备事件。在打断其他进程时，需要先将进程当前的状态保存下来，等中断结束后，进程仍然可以恢复回来。</p><p>跟进程上下文不同，中断上下文切换不涉及进程的用户态。所以，即便中断过程打断了一个正处在用户态的进程，也不需要保存和恢复这个进程的虚拟内存、全局变量等用户态资源。中断上下文，只包括内核态中断服务程序执行所必需的状态，也就是 CPU 寄存器、内核堆栈、硬件中断参数等。</p><p><strong>对同一个 CPU 来说，中断处理比进程拥有更高的优先级</strong>，所以中断上下文切换不会与进程上下文切换同时发生。并且，由于中断会打断正常进程的调度和执行，所以大部分中断处理程序都短小精悍，以便可以尽快完成。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_41359051/article/details/89673188?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-6.pc_relevant_baidujshouduan&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-6.pc_relevant_baidujshouduan">什么是上下文切换</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis之AOF重写及其实现原理</title>
    <link href="/2021/07/19/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/07/19/Redis%E4%B9%8BAOF%E9%87%8D%E5%86%99%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h1><ul><li>AOF 持久化是通过保存被执行的写命令来记录数据库状态的，所以AOF文件的大小随着时间的流逝一定会越来越大；影响包括但不限于：对于Redis服务器，计算机的存储压力；AOF还原出数据库状态的时间增加；</li><li>为了解决AOF文件体积膨胀的问题，Redis提供了AOF重写功能：Redis服务器可以创建一个新的AOF文件来替代现有的AOF文件，新旧两个文件所保存的数据库状态是相同的，但是新的AOF文件不会包含任何浪费空间的冗余命令，通常体积会较旧AOF文件小很多。</li></ul><h2 id="AOF-文件重写的实现"><a href="#AOF-文件重写的实现" class="headerlink" title="AOF 文件重写的实现"></a>AOF 文件重写的实现</h2><ul><li>AOF重写并不需要对原有AOF文件进行任何的读取，写入，分析等操作，这个功能是通过读取服务器当前的数据库状态来实现的。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">假设服务器对键list执行了以下命令s;</span><br>127.0.0.1:6379&gt; RPUSH list &quot;A&quot; &quot;B&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; RPUSH list &quot;C&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; RPUSH list &quot;D&quot; &quot;E&quot;<br>(integer) 5<br>127.0.0.1:6379&gt; LPOP list<br>&quot;A&quot;<br>127.0.0.1:6379&gt; LPOP list<br>&quot;B&quot;<br>127.0.0.1:6379&gt; RPUSH list &quot;F&quot; &quot;G&quot;<br>(integer) 5<br>127.0.0.1:6379&gt; LRANGE list 0 -1<br>1) &quot;C&quot;<br>2) &quot;D&quot;<br>3) &quot;E&quot;<br>4) &quot;F&quot;<br>5) &quot;G&quot;<br>127.0.0.1:6379&gt;<br></code></pre></td></tr></table></figure><ul><li>当前列表键list在数据库中的值就为[“C”, “D”, “E”, “F”, “G”]。要使用尽量少的命令来记录list键的状态，最简单的方式不是去读取和分析现有AOF文件的内容，，而是直接读取list键在数据库中的当前值，然后用一条RPUSH list “C” “D” “E” “F” “G”代替前面的6条命令。</li></ul><h2 id="AOF重写功能的实现原理"><a href="#AOF重写功能的实现原理" class="headerlink" title="AOF重写功能的实现原理"></a>AOF重写功能的实现原理</h2><ul><li>首先从数据库中读取键现在的值，然后用一条命令去记录键值对，代替之前记录该键值对的多个命令;</li><li>伪代码表示如下;</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">AOF</span>\_REWRITE(tmp\_tile\_name):<br>f = create(tmp\_tile\_name)<br><span class="hljs-comment"># 遍历所有数据库</span><br><span class="hljs-keyword">for</span> db <span class="hljs-keyword">in</span> redisServer.db:<br><span class="hljs-comment"># 如果数据库为空，那么跳过这个数据库</span><br><span class="hljs-keyword">if</span> db.<span class="hljs-keyword">is</span>\_empty(): <span class="hljs-keyword">continue</span><br><span class="hljs-comment"># 写入 SELECT 命令，用于切换数据库</span><br>f.write\_command(<span class="hljs-string">&quot;SELECT &quot;</span> + db.number)<br><span class="hljs-comment"># 遍历所有键</span><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> db:<br><span class="hljs-comment"># 如果键带有过期时间，并且已经过期，那么跳过这个键</span><br><span class="hljs-keyword">if</span> key.have\_expire\_time() <span class="hljs-keyword">and</span> key.<span class="hljs-keyword">is</span>\_expired(): <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">if</span> key.<span class="hljs-built_in">type</span> == String:<br><span class="hljs-comment"># 用 SET key value 命令来保存字符串键</span><br>value = get\_value\_<span class="hljs-keyword">from</span>\_string(key)<br>f.write\_command(<span class="hljs-string">&quot;SET &quot;</span> + key + value)<br><span class="hljs-keyword">elif</span> key.<span class="hljs-built_in">type</span> == <span class="hljs-type">List</span>:<br><span class="hljs-comment"># 用 RPUSH key item1 item2 ... itemN 命令来保存列表键</span><br>item1, item2, ..., itemN = get\_item\_<span class="hljs-keyword">from</span>\_<span class="hljs-built_in">list</span>(key)<br>f.write\_command(<span class="hljs-string">&quot;RPUSH &quot;</span> + key + item1 + item2 + ... + itemN)<br><span class="hljs-keyword">elif</span> key.<span class="hljs-built_in">type</span> == <span class="hljs-type">Set</span>:<br><span class="hljs-comment"># 用 SADD key member1 member2 ... memberN 命令来保存集合键</span><br>member1, member2, ..., memberN = get\_member\_<span class="hljs-keyword">from</span>\_<span class="hljs-built_in">set</span>(key)<br>f.write\_command(<span class="hljs-string">&quot;SADD &quot;</span> + key + member1 + member2 + ... + memberN)<br><span class="hljs-keyword">elif</span> key.<span class="hljs-built_in">type</span> == Hash:<br><span class="hljs-comment"># 用 HMSET key field1 value1 field2 value2 ... fieldN valueN 命令来保存哈希键</span><br>field1, value1, field2, value2, ..., fieldN, valueN =\<br>get\_field\_<span class="hljs-keyword">and</span>\_value\_<span class="hljs-keyword">from</span>\_<span class="hljs-built_in">hash</span>(key)<br>f.write\_command(<span class="hljs-string">&quot;HMSET &quot;</span> + key + field1 + value1 + field2 + value2 +\<br><span class="hljs-meta">... </span>+ fieldN + valueN)<br><span class="hljs-keyword">elif</span> key.<span class="hljs-built_in">type</span> == SortedSet:<br><span class="hljs-comment"># 用 ZADD key score1 member1 score2 member2 ... scoreN memberN</span><br><span class="hljs-comment"># 命令来保存有序集键</span><br>score1, member1, score2, member2, ..., scoreN, memberN = \<br>get\_score\_<span class="hljs-keyword">and</span>\_member\_<span class="hljs-keyword">from</span>\_<span class="hljs-built_in">sorted</span>\_<span class="hljs-built_in">set</span>(key)<br>f.write\_command(<span class="hljs-string">&quot;ZADD &quot;</span> + key + score1 + member1 + score2 + member2 +\<br><span class="hljs-meta">... </span>+ scoreN + memberN)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">raise</span>\_<span class="hljs-built_in">type</span>\_error()<br><span class="hljs-comment"># 如果键带有过期时间，那么用 EXPIREAT key time 命令来保存键的过期时间</span><br><span class="hljs-keyword">if</span> key.have\_expire\_time():<br>f.write\_command(<span class="hljs-string">&quot;EXPIREAT &quot;</span> + key + key.expire\_time\_<span class="hljs-keyword">in</span>\_unix\_timestamp())<br><span class="hljs-comment"># 关闭文件</span><br>f.close()<br></code></pre></td></tr></table></figure><ul><li>实际为了避免执行命令时造成客户端输入缓冲区溢出，重写程序在处理list hash set zset时，会检查键所包含的元素的个数，如果元素的数量超过了redis.h&#x2F;REDIS_AOF_REWRITE_ITEMS_PER_CMD常量的值，那么重写程序会使用多条命令来记录键的值，而不是单使用一条命令。该常量默认值是64– 即每条命令设置的元素的个数 是最多64个，使用多条命令重写实现集合键中元素数量超过64个的键；</li></ul><h2 id="AOF后台重写"><a href="#AOF后台重写" class="headerlink" title="AOF后台重写"></a>AOF后台重写</h2><ul><li>aof_rewrite函数可以创建新的AOF文件，但是这个函数会进行大量的写入操作，所以调用这个函数的线程将被长时间的阻塞，因为Redis服务器使用单线程来处理命令请求；所以如果直接是服务器进程调用AOF_REWRITE函数的话，那么重写AOF期间，服务器将无法处理客户端发送来的命令请求；</li><li>Redis不希望AOF重写会造成服务器无法处理请求，所以Redis决定将AOF重写程序放到子进程（后台）里执行。这样处理的最大好处是：<ol><li>子进程进行AOF重写期间，主进程可以继续处理命令请求；</li><li>子进程带有主进程的数据副本，使用子进程而不是线程，可以避免在锁的情况下，保证数据的安全性。</li></ol></li></ul><h2 id="使用子进程进行AOF重写的问题"><a href="#使用子进程进行AOF重写的问题" class="headerlink" title="使用子进程进行AOF重写的问题"></a>使用子进程进行AOF重写的问题</h2><ul><li>子进程在进行AOF重写期间，服务器进程还要继续处理命令请求，而新的命令可能对现有的数据进行修改，这会让当前数据库的数据和重写后的AOF文件中的数据不一致。</li></ul><h2 id="如何修正"><a href="#如何修正" class="headerlink" title="如何修正"></a>如何修正</h2><ul><li>为了解决这种数据不一致的问题，Redis增加了一个AOF重写缓存，这个缓存在fork出子进程之后开始启用，Redis服务器主进程在执行完写命令之后，会同时将这个写命令追加到AOF缓冲区和AOF重写缓冲区</li><li>即子进程在执行AOF重写时，主进程需要执行以下三个工作：<ol><li>执行client发来的命令请求；</li><li>将写命令追加到现有的AOF文件中；</li><li>将写命令追加到AOF重写缓存中。</li></ol></li></ul><p><img src="https://i.loli.net/2021/07/19/LRt7Z4mQ6jh5vK3.png"></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><strong>可以保证：</strong></p><p>AOF缓冲区的内容会定期被写入和同步到AOF文件中，对现有的AOF文件的处理工作会正常进行<br>从创建子进程开始，服务器执行的所有写操作都会被记录到AOF重写缓冲区中；</p><h2 id="完成AOF重写之后"><a href="#完成AOF重写之后" class="headerlink" title="完成AOF重写之后"></a>完成AOF重写之后</h2><p>当子进程完成对AOF文件重写之后，它会向父进程发送一个完成信号，父进程接到该完成信号之后，会调用一个信号处理函数，该函数完成以下工作：</p><ul><li>将AOF重写缓存中的内容全部写入到新的AOF文件中；这个时候新的AOF文件所保存的数据库状态和服务器当前的数据库状态一致；</li><li>对新的AOF文件进行改名，原子的覆盖原有的AOF文件；完成新旧两个AOF文件的替换。</li><li>当这个信号处理函数执行完毕之后，主进程就可以继续像往常一样接收命令请求了。在整个AOF后台重写过程中，只有最后的“主进程写入命令到AOF缓存”和“对新的AOF文件进行改名，覆盖原有的AOF文件。”这两个步骤（信号处理函数执行期间）会造成主进程阻塞，在其他时候，AOF后台重写都不会对主进程造成阻塞，这将AOF重写对性能造成的影响降到最低。</li></ul><p>以上，即AOF后台重写，也就是BGREWRITEAOF命令的工作原理。</p><h2 id="触发AOF后台重写的条件"><a href="#触发AOF后台重写的条件" class="headerlink" title="触发AOF后台重写的条件"></a>触发AOF后台重写的条件</h2><p>AOF重写可以由用户通过调用BGREWRITEAOF手动触发。<br>服务器在AOF功能开启的情况下，会维持以下三个变量：</p><ul><li>记录当前AOF文件大小的变量aof_current_size。</li><li>记录最后一次AOF重写之后，AOF文件大小的变量aof_rewrite_base_size。</li><li>增长百分比变量aof_rewrite_perc。</li></ul><p>每次当serverCron（服务器周期性操作函数）函数执行时，它会检查以下条件是否全部满足，如果全部满足的话，就触发自动的AOF重写操作：</p><ul><li>没有BGSAVE命令（RDB持久化）&#x2F;AOF持久化在执行；</li><li>没有BGREWRITEAOF在进行；</li><li>当前AOF文件大小要大于server.aof_rewrite_min_size（默认为1MB），或者在redis.conf配置了auto-aof-rewrite-min-size大小；</li><li>当前AOF文件大小和最后一次重写后的大小之间的比率等于或者等于指定的增长百分比（在配置文件设置了auto-aof-rewrite-percentage参数，不设置默认为100%）</li></ul><p>如果前面三个条件都满足，并且当前AOF文件大小比最后一次AOF重写时的大小要大于指定的百分比，那么触发自动AOF重写。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>AOF重写的目的<strong>是为了解决AOF文件体积膨胀的问题，使用更小的体积来保存数据库状态，整个重写过程基本上不影响Redis主进程处理命令请求</strong>；<br>AOF重写其实是一个有歧义的名字，实际上重写工作是针对数据库的当前状态来进行的，重写过程中不会读写、也不适用原来的AOF文件；<br>AOF可以<strong>由用户手动触发，也可以由服务器自动触发</strong>。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/hezhiqiang1314/article/details/69396887">Redis之AOF重写及其实现原理</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloudAlibaba快速入门</title>
    <link href="/2021/06/25/SpringCloudAlibaba%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2021/06/25/SpringCloudAlibaba%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-什么是微服务？"><a href="#1-什么是微服务？" class="headerlink" title="1. 什么是微服务？"></a>1. 什么是微服务？</h1><p>官网: <a href="https://www.martinfowler.com/articles/microservices.html">https://www.martinfowler.com/articles/microservices.html</a></p><p>In short, the microservice architectural style is an approach to developing a single application as <code>a suite of small services</code>, each <code>running in its own process</code> and communicating with lightweight mechanisms, often an HTTP resource API. These services are <code>built around business capabilities</code> and <code>independently deployable</code> by fully automated deployment machinery. <code>There is a bare minimum of centralized management of these services</code>, which may be written in different programming languages and use different data storage technologies. —–[摘自官网]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> a suite of small services --一系列微小服务<br><span class="hljs-bullet">-</span> running in its own process --运行在自己的进程里<br><span class="hljs-bullet">-</span> built around business capabilities --围绕自己的业务开发<br><span class="hljs-bullet">-</span> independently deployable --独立部署<br><span class="hljs-bullet">-</span> bare minimum of centralized management of these services --基于分布式管理<br></code></pre></td></tr></table></figure><p>官方定义：<strong>微服务就是由一系列围绕自己业务开发的微小服务构成,他们独立部署运行在自己的进程里,基于分布式的管理</strong></p><p>通俗定义：<strong>微服务是一种架构，这种架构是将单个的整体应用程序分割成更小的项目关联的独立的服务。一个服务通常实现一组独立的特性或功能，包含自己的业务逻辑和适配器。各个微服务之间的关联通过暴露api来实现。这些独立的微服务不需要部署在同一个虚拟机，同一个系统和同一个应用服务器中。</strong></p><h1 id="2-为什么是微服务？"><a href="#2-为什么是微服务？" class="headerlink" title="2. 为什么是微服务？"></a>2. 为什么是微服务？</h1><p><img src="https://i.loli.net/2021/06/25/v8UuOdxAzMycQwk.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.优点</span><br><span class="hljs-bullet">-</span> 将服务拆分成多个单一职责的小的服务，进行单独部署，服务之间通过网络进行通信<br><span class="hljs-bullet">-</span> 每个服务应该有自己单独的管理团队，高度自治<br><span class="hljs-bullet">-</span> 服务各自有自己单独的职责，服务之间松耦合，避免因一个模块的问题导致服务崩溃<br><span class="hljs-section"># 2.缺点</span><br><span class="hljs-bullet">-</span> 开发人员要处理分布式系统的复杂性<br><span class="hljs-bullet">-</span> 多服务运维难度，随着服务的增加，运维的压力也在增大<br><span class="hljs-bullet">-</span> 服务治理 和 服务监控 关键<br></code></pre></td></tr></table></figure><p><strong>架构的演变</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.架构的演变过程</span><br><span class="hljs-bullet">-</span> [单一应用架构] <span class="hljs-code">`===&gt;`</span> [垂直应用架构] <span class="hljs-code">`===&gt;`</span> [分布式服务架构] <span class="hljs-code">`===&gt;`</span> [流动计算架构]||[微服务架构] <span class="hljs-code">`===&gt;`</span> [未知]<br></code></pre></td></tr></table></figure><p>dubbo官网:<a href="http://dubbo.apache.org/zh-cn/docs/user/preface/background.html">http://dubbo.apache.org/zh-cn/docs/user/preface/background.html</a></p><p><img src="https://i.loli.net/2021/06/25/3GYUBOtD19lrhMs.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1. All in One Application 单一架构</span><br><span class="hljs-bullet">-</span> 起初当网站流量很小时,将所有功能都写在一个应用里面,对整个应用进行部署,以减少部署节点和成本。对于这个架构简化增删改查的工作量的数据访问框架（ORM）是关键。<br><span class="hljs-section"># 2. Vertical Application 垂直架构</span><br><span class="hljs-bullet">-</span> 当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。<br><span class="hljs-section"># 3. Distributed Service 分布式服务架构</span><br><span class="hljs-bullet">-</span> 当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。<br><span class="hljs-section"># 4. Elastic Computing 流动计算架构即微服务架构</span><br><span class="hljs-bullet">-</span> 当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键<br></code></pre></td></tr></table></figure><hr><h1 id="3-微服务解决方案"><a href="#3-微服务解决方案" class="headerlink" title="3. 微服务解决方案"></a>3. 微服务解决方案</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.Dubbo (阿里系)</span><br><span class="hljs-bullet">-</span> 初出茅庐:2011年末，阿里巴巴在GitHub上开源了基于Java的分布式服务治理框架Dubbo，之后它成为了国内该类开源项目的佼佼者，许多开发者对其表示青睐。同时，先后有不少公司在实践中基于Dubbo进行分布式系统架构，目前在GitHub上，它的fork、star数均已破万。Dubbo致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案，使得应用可通过高性能RPC实现服务的输出、输入功能和Spring框架无缝集成。Dubbo包含远程通讯、集群容错和自动发现三个核心部分。<br><span class="hljs-bullet">-</span> 停止维护:从2012年10月23日Dubbo 2.5.3发布后，在Dubbo开源将满一周年之际，阿里基本停止了对Dubbo的主要升级。只在之后的2013年和2014年更新过2次对Dubbo 2.4的维护版本，然后停止了所有维护工作。Dubbo对Srping的支持也停留在了Spring 2.5.6版本上。<br><span class="hljs-bullet">-</span> 死而复生:多年漫长的等待，随着微服务的火热兴起，在国内外开发者对阿里不再升级维护Dubbo的吐槽声中，阿里终于开始重新对Dubbo的升级和维护工作。在2017年9月7日，阿里发布了Dubbo的2.5.4版本，距离上一个版本2.5.3发布已经接近快5年时间了。在随后的几个月中，阿里Dubbo开发团队以差不多每月一版本的速度开始快速升级迭代，修补了Dubbo老版本多年来存在的诸多bug，并对Spring等组件的支持进行了全面升级。<br><span class="hljs-bullet">-</span> 2018年1月8日，Dubbo创始人之一梁飞在Dubbo交流群里透露了Dubbo 3.0正在动工的消息。Dubbo 3.0内核与Dubbo 2.0完全不同，但兼容Dubbo 2.0。Dubbo 3.0将以Streaming为内核，不再是Dubbo 时代的RPC，但是RPC会在Dubbo 3.0中变成远程Streaming对接的一种可选形态。从Dubbo新版本的路线规划上可以看出，新版本的Dubbo在原有服务治理的功能基础上，将全面拥抱微服务解决方案。<br><span class="hljs-bullet">-</span> 结论:当前由于RPC协议、注册中心元数据不匹配等问题，在面临微服务基础框架选型时Dubbo与Spring Cloud是只能二选一，这也是为什么大家总是拿Dubbo和Spring Cloud做对比的原因之一。Dubbo之后会积极寻求适配到Spring Cloud生态，比如作为Spring Cloud的二进制通信方案来发挥Dubbo的性能优势，或者Dubbo通过模块化以及对http的支持适配到Spring Cloud。<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/25/qHxUvu25LKBtDhV.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># Spring Cloud:</span><br><span class="hljs-bullet">-</span> Spring Cloud NetFlix(美国 在线视频网站)<br>基于美国Netflix公司开源的组件进行封装,提供了微服务一栈式的解决方案。 G版本<br><span class="hljs-bullet">-</span> Spring Cloud alibaba<br>在Spring cloud netflix基础上封装了阿里巴巴的微服务解决方案。<br><span class="hljs-bullet">-</span> Spring Cloud<br>目前spring官方趋势正在逐渐吸收Netflix组件的精华,并在此基础进行二次封装优化,打造spring专有的解决方案<br><span class="hljs-section"># 核心组件：</span><br><span class="hljs-bullet">-</span> eureka、consul、nacos 服务注册中心组件<br><span class="hljs-bullet">-</span> rabbion &amp; openfeign 服务负载均衡 和 服务调用组件<br><span class="hljs-bullet">-</span> hystrix &amp; hystrix dashboard 服务断路器 和 服务监控组件<br><span class="hljs-bullet">-</span> zuul、gateway 服务网关组件<br><span class="hljs-bullet">-</span> config 统一配置中心组件<br><span class="hljs-bullet">-</span> bus 消息总线组件<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/06/25/toAP8xzGO2pr6QY.png"></p><h1 id="4-为什么不选择SpringCloud而选用SpringCloudAlibaba？"><a href="#4-为什么不选择SpringCloud而选用SpringCloudAlibaba？" class="headerlink" title="4. 为什么不选择SpringCloud而选用SpringCloudAlibaba？"></a>4. 为什么不选择SpringCloud而选用SpringCloudAlibaba？</h1><p>简单的来说，就是第一套微服务架构解决方案：Spring Boot + Spring Cloud Netflix。最近由于Netflix公司宣布Spring Cloud Netflix 系列技术栈进入维护模式， 于是采用 Spring Cloud Alibaba 方案来替代。</p><p>比如Ribbon（负载均衡）、Hystrix（服务熔断和监控）停止维护，而且如config做统一配置中心并不是很方便，于是我们选择Spring Cloud Alibaba。</p><h1 id="5-Spring-Cloud-Alibaba"><a href="#5-Spring-Cloud-Alibaba" class="headerlink" title="5. Spring Cloud Alibaba"></a>5. Spring Cloud Alibaba</h1><p><a href="https://spring.io/projects/spring-cloud-alibaba">Spring Cloud Alibaba</a></p><ul><li>Spring Cloud Alibaba为分布式应用开发提供了一站式解决方案。它包含了开发分布式应用程序所需的所有组件，使您可以轻松地使用springcloud开发应用程序。</li><li>有了Spring Cloud Alibaba，你只需要添加一些注解和少量的配置，就可以将Spring Cloud应用连接到阿里的分布式解决方案上，用阿里中间件搭建一个分布式应用系统。</li></ul><p>Spring Cloud Alibaba组件：</p><ol><li>服务注册中心 服务配置中心 nacos &#x3D;&#x3D;&#x3D;&gt; 替换eureka consul 替换config+bus</li><li>服务熔断、流量控制 sentinel（sentinel、sentinel dashBoard）</li></ol><h1 id="5-Spring-Cloud-整合Alibaba环境搭建"><a href="#5-Spring-Cloud-整合Alibaba环境搭建" class="headerlink" title="5. Spring Cloud 整合Alibaba环境搭建"></a>5. Spring Cloud 整合Alibaba环境搭建</h1><p>说了这么多，只是想说明下选择Spring Cloud 整合Alibaba的原因，下面正式开始使用IDEA进行环境搭建</p><p><strong>五大组件</strong>：</p><ol><li>服务注册中心 <strong>nacos</strong></li><li>服务间通信组件 a.RestTemplate+Ribbon b.<strong>OpenFeig</strong>组件</li><li>服务熔断、流控 <strong>sentinel</strong></li><li>网关 <strong>gateway</strong></li><li>服务配置中心 <strong>nacos</strong></li></ol><h2 id="5-1-IDEA新建空模块"><a href="#5-1-IDEA新建空模块" class="headerlink" title="5.1 IDEA新建空模块"></a>5.1 IDEA新建空模块</h2><p><img src="https://i.loli.net/2021/06/25/b8dE4snGFRIakwx.png"></p><p><img src="https://i.loli.net/2021/06/25/skdW9Jyx3zQrT74.png"></p><p><img src="https://i.loli.net/2021/06/25/rwN2xOkcjdZS4Yy.png"></p><p>因为微服务项目是很多模块的，我们创建这样一个空模块项目是为了方便管理今后开发的模块</p><h2 id="5-2-创建父项目"><a href="#5-2-创建父项目" class="headerlink" title="5.2 创建父项目"></a>5.2 创建父项目</h2><p><img src="https://i.loli.net/2021/06/25/jb5DyPYgWf86khu.png"></p><p><img src="https://i.loli.net/2021/06/25/gjGfiys9JCXNHzW.png"></p><p>不要选择这些模板，我们只是新建一个微服务父项目，用作版本控制</p><p><img src="https://i.loli.net/2021/06/25/BWxcvyIJGhsoHKk.png"></p><p><img src="https://i.loli.net/2021/06/25/kEovwOylJhA51FD.png"></p><p>因为整合的是SpringCloud和SpringCloud Alibaba，需要两者的依赖都加入，下面是父项目的pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud\_alibaba\_parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud\_alibaba\_commons<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud\_alibaba\_users<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud\_alibaba\_products<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud\_alibaba\_gateway<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring.cloud.version</span>&gt;</span>Hoxton.SR6<span class="hljs-tag">&lt;/<span class="hljs-name">spring.cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring.cloud.alibaba.version</span>&gt;</span>2.2.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring.cloud.alibaba.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring.cloud.alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpringCloud选择的是H版本，SpringBoot是2.x，SpringCloudAlibaba是2.2.1</p><p>后面的项目都需要继承这个父项目，比如都会用到SpringBoot，那么子项目是不需要写版本号的，由父项目统一管理。</p><h2 id="5-3-服务注册中心"><a href="#5-3-服务注册中心" class="headerlink" title="5.3 服务注册中心"></a>5.3 服务注册中心</h2><p>Nacos是微服务架构中服务注册中心以及统一配置中心,用来替换原来的(eureka,consul)以及config组件</p><p>安装Nacos，这里我们使用Docker安装，具体操作就不细讲，安装完成后，可以在浏览器访问Nacos的web界面，我这里装的是1.3.1</p><p>Nacos作为服务注册中心，我们今后只需要把开发的微服务模块注册到它上去即可，这里我们新建用户功能模块和商品模块去注册到Nacos上</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入nacos config的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>本质上还是一个SpringBoot项目，所以引入web启动器和nacos发服务注册和配置依赖</p><p>下面需要把SpringBoot项目结构完善，新建application.properties和启动类</p><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#启动端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8888</span><br><span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">USERS</span><br><span class="hljs-comment">#nacos地址</span><br><span class="hljs-attr">spring.cloud.nacos.server-addr</span>=<span class="hljs-string">118.195.164.41:8849</span><br></code></pre></td></tr></table></figure><p>可以看到USERS服务已经成功注册到Nacos中</p><p><img src="https://i.loli.net/2021/06/25/IOWN9iV52w3sBMy.png"></p><blockquote><p>为了测试程序是否成功，我们可以写个测试的接口，来验证</p></blockquote><p>下面同样的操作新建一个Products，这里就不再说明</p><h2 id="5-4-服务间通信"><a href="#5-4-服务间通信" class="headerlink" title="5.4 服务间通信"></a>5.4 服务间通信</h2><p>服务间通信，SpringCloud Alibaba并没有提供新的组件，所以我们有两种方法实现服务间通信：</p><p>1.RestTemplate+Ribbon 使用RestTemplate做接口间的通信，Ribbon实现负载均衡</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.RestTemplate的基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">orderObject</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://localhost:9999/order&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><p>2.使用ribbon组件+restTemplate实现负载均衡</p><p>1.discoveryClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">LoadBalanceClient List&lt;ServiceInstance&gt; serviceInstances = discoveryClient.getInstances(<span class="hljs-string">&quot;ORDERS&quot;</span>);<br>serviceInstances.forEach(serviceInstance -&gt; &#123;<br>log.info(<span class="hljs-string">&quot;服务主机：&#123;&#125; 服务端口：&#123;&#125; 服务地址：&#123;&#125;&quot;</span>,serviceInstance.getHost(),serviceInstance.getPort(),serviceInstance.getUri());<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>().getForObject(serviceInstances.get(<span class="hljs-number">0</span>).getUri() + <span class="hljs-string">&quot;/order&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><ol><li>loadBalancerClient</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">serviceInstance</span> <span class="hljs-operator">=</span> loadBalancerClient.choose(<span class="hljs-string">&quot;ORDERS&quot;</span>);<br>log.info(<span class="hljs-string">&quot;服务主机：&#123;&#125; 服务端口：&#123;&#125; 服务地址：&#123;&#125;&quot;</span>,serviceInstance.getHost(),serviceInstance.getPort(),serviceInstance.getUri());<br><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>().getForObject(serviceInstance.getUri() + <span class="hljs-string">&quot;/order&quot;</span>, String.class);<br></code></pre></td></tr></table></figure><p>综上是RestTemplate+Ribbon做服务间通信，并且可以实现负载均衡（默认轮询），保证高可用，但是依旧会<strong>出现请求地址写死</strong>的情况，所以我们最终采用Openfeign做服务间的通信</p><p>首先要知道，Openfeign是一个伪http请求类，它底层还是RestTemplate，支持SpringMVC注解，也就是说我们可以把它当作是一个controller的接口类来写，SpringMVC注解完全支持！</p><p>我们需要新建一个包，来存放服务的调用接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">6</span>/<span class="hljs-number">25</span> <span class="hljs-number">8</span>:<span class="hljs-number">53</span><br>\*/<br><span class="hljs-meta">@FeignClient(&quot;PRODUCTS&quot;)</span> <span class="hljs-comment">//调用服务模块的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductsClients</span> &#123;<br><span class="hljs-comment">//接口名 Get方式 无参</span><br><span class="hljs-meta">@GetMapping(&quot;/product&quot;)</span><br>String <span class="hljs-title function_">product</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用我们只需要在controller中注入ProductsClients，调用这个product()方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> productsClients.product();<br></code></pre></td></tr></table></figure><p>默认轮询实现负载均衡~</p><h2 id="5-5-网关服务"><a href="#5-5-网关服务" class="headerlink" title="5.5 网关服务"></a>5.5 网关服务</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.说明</span><br><span class="hljs-bullet">-</span> 网关统一服务入口，可方便实现对平台众多服务接口进行管控，对访问服务的身份认证、防报文重放与防数据篡改、功能调用的业务鉴权、响应数据的脱敏、流量与并发控制，甚至基于API调用的计量或者计费等等。<br><span class="hljs-bullet">-</span> 网关 = 路由转发 + 过滤器<br>`路由转发：接收一切外界请求，转发到后端的微服务上去；<br>`在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成<br><span class="hljs-section"># 2.为什么需要网关</span><br><span class="hljs-bullet">-</span> 1.网关可以实现服务的统一管理<br><span class="hljs-bullet">-</span> 2.网关可以解决微服务中通用代码的冗余问题(如权限控制,流量监控,限流等)<br></code></pre></td></tr></table></figure><p>SpringCloud Alibaba并没开发新的网关组件，而且Gateway已经很优秀，这里我们采用Gateway做服务器的网关，下面开发网关服务：</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入gateway网关依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入nacos config的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>**注意：**这里不用加入web启动启动器，Gateway为了效率使用webflux进行异步非阻塞模型的实现,因此和原来的web包冲突,去掉原来的web即可</p><p>网关的配置可以用配置文件实现，也可以用Java代码</p><p>配置文件建议使用yml，因为格式要求高，方便查看，不容易错，同样注册到Nacos上</p><p>下面的路由配置实现了服务接口的统一入口端口是8990，当访问路径是是&#x2F;invoke，就转发到USERS服务下，当访问路径是&#x2F;product，就转发到PRODUCTS，使用lb:&#x2F;&#x2F;服务名称就可以实现负载均衡</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8990</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">GATEWAY</span><br><span class="hljs-attr">cloud:</span><br><span class="hljs-attr">nacos:</span><br><span class="hljs-attr">discovery:</span><br><span class="hljs-attr">server-addr:</span> <span class="hljs-number">118.195</span><span class="hljs-number">.164</span><span class="hljs-number">.41</span><span class="hljs-string">:8849</span><br><span class="hljs-attr">gateway:</span><br><span class="hljs-attr">routes:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">users\_route</span><br><span class="hljs-attr">uri:</span> <span class="hljs-string">lb://USERS</span><br><span class="hljs-attr">predicates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Path=/invoke</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">products\_route</span><br><span class="hljs-attr">uri:</span> <span class="hljs-string">lb://PRODUCTS</span><br><span class="hljs-attr">predicates:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">Path=/product</span><br></code></pre></td></tr></table></figure><p>java代码配置路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">customRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> &#123;<br><span class="hljs-keyword">return</span> builder.routes()<br>.route(<span class="hljs-string">&quot;order\_route&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/product&quot;</span>)<br>.uri(<span class="hljs-string">&quot;http://localhost:9997/&quot;</span>))<br>.build();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但我依旧强烈建议使用yaml，后面把配置文件放在Nacos想改也很方便</p><p><img src="https://i.loli.net/2021/06/25/3s2ZPvr5uqEeib6.png"></p><p>验证成功</p><h2 id="5-6-服务配置中心"><a href="#5-6-服务配置中心" class="headerlink" title="5.6 服务配置中心"></a>5.6 服务配置中心</h2><p>Nacos不仅仅可以做服务的注册中心，还可以做服务的配置中心，可以把微服务的配置文件交给远端管理，操作也很简单</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入nacos config的依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>首先需要了解下Nacos的命名空间，组的概念，Nocas提供了默认的公共的命名空间和组，但作为具体系统开发，需要命名分类，方便管理，类比数据库，命名空间相当于库的概念，一个项目基本上就一个命名空间，下面可以有很多组，就类型数据表，每个微服务就可以有一个组</p><p>通过Nacos Dashboard界面，我们新建final命名空间和几个组做测试</p><p><img src="https://i.loli.net/2021/06/25/usKhzAaPUYoNSnB.png"></p><p>product的配置文件一样，就是把本地的配置文件交给远端管理了</p><p>保存后，假如就这样直接启动肯定是不行的，因为本地只是添加了依赖，并没有告知程序去哪里拉取配置，所以需要创建bootstrap.properties（不能是application.properties，配置文件拉取要早于程序，bootstrap是早于application的）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#远端配置</span><br><span class="hljs-attr">spring.cloud.nacos.server-addr</span>=<span class="hljs-string">118.195.164.41:8849</span><br><span class="hljs-comment">#nacos namespace</span><br><span class="hljs-comment">#别写成了 spring.cloud.nacos.discover</span><br><span class="hljs-attr">spring.cloud.nacos.config.namespace</span>=<span class="hljs-string">e6749e6a-76df-4627-b6f7-00ed0ea2d6ca</span><br><span class="hljs-comment">#nacos 组</span><br><span class="hljs-attr">spring.cloud.nacos.config.group</span>=<span class="hljs-string">USERS</span><br><span class="hljs-comment">#nacos dataId 1.name+文件后缀 2.文件名+env+后缀</span><br><span class="hljs-attr">spring.cloud.nacos.config.name</span>=<span class="hljs-string">users-prod</span><br><span class="hljs-attr">spring.cloud.nacos.config.file-extension</span>=<span class="hljs-string">properties</span><br></code></pre></td></tr></table></figure><p>同样Productes，Gateway服务也是这样修改的，注意文件相对应就行</p><p>好了就这样，我们看看最后的项目目录：</p><p><img src="https://i.loli.net/2021/06/25/Akc2w9sU7PBfpiG.png"></p><p>测试也通过，服务配置完成！</p><h2 id="5-7服务熔断和流控"><a href="#5-7服务熔断和流控" class="headerlink" title="5.7服务熔断和流控"></a>5.7服务熔断和流控</h2><p>随着微服务的普及，服务调用的稳定性变得越来越重要。Sentinel以“流量”为突破口，在流量控制、断路、负载保护等多个领域进行工作，保障服务可靠性。</p><p>通俗:用来在微服务系统中保护微服务对的作用 如何 服务雪崩 服务熔断 服务降级 就是用来替换hystrix</p><p>这里我们也只能简单的模拟下，服务的熔断和流控是技术难点</p><p>sentinel提供了两个服务组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">一个是 sentinel 用来实现微服务系统中服务熔断、降级等功能。这点和hystrix 类似<br>一个是 sentinel dashboard 用来监控微服务系统中流量调用等情况。这点和hystrix 类似<br></code></pre></td></tr></table></figure><p>安装下sentinel dashboard</p><p>去Github下载sentinel的jar包，它是SpringBoot应用，默认端口是8080，但一般机器的8080都是有其它服务的，所以需要运行时用java -jar -Dserver.port&#x3D;自定义端口号 sentinel.jar来实现指定端口启动</p><p>启动成功后，访问sentinel的web页面，默认用户名密码都sentinel</p><p><img src="https://i.loli.net/2021/06/25/K5upkVjzcQ1l7Gt.png"></p><p>目前是项目没有集成sentinel，所以它是没有选项的，现在我们做个测试，在USERS中的接口加个参数判断，小于0就抛异常，来触发sentinel的熔断机制</p><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为我们已经把配置文件交给Nocas管理，所以只需要在远端的配置文件加入几行配置即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启sentinel 默认开启</span><br><span class="hljs-attr">spring.cloud.sentinel.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 连接dashboard</span><br><span class="hljs-attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="hljs-string">localhost:8991</span><br><span class="hljs-comment"># 与dashboard通信的端口</span><br><span class="hljs-attr">spring.cloud.sentinel.transport.port</span>=<span class="hljs-string">8719</span><br></code></pre></td></tr></table></figure><p>我们稍微修改下USERS中的接口方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs plain">/\*\*<br>\* @author 路飞<br>\* @create 2021/6/25 8:43<br>\*/<br>@RestController<br>public class UsersController &#123;<br>private static final Logger log = LoggerFactory.getLogger(UsersController.class);<br>@Value(&quot;$&#123;server.port&#125;&quot;)<br>private String port;<br>@Autowired<br>private RestTemplate restTemplate;<br>@Autowired<br>private ProductsClients productsClients;<br>@GetMapping(&quot;/invoke&quot;)<br>@SentinelResource(value = &quot;id&quot;,blockHandler =&quot;blockHandler&quot;,fallback = &quot;fall&quot;) //代表是一个Sentinel的资源<br>public String invoke(Integer id)&#123;<br>// String result = restTemplate.getForObject(&quot;http://PRODUCTS/product&quot;, String.class);<br>// String result = productsClients.product();<br>// log.info(&quot;result:&#123;&#125;&quot;,result);<br>if(id &lt; 0)&#123;<br>throw new RuntimeException(&quot;参数校验失败&quot;);<br>&#125;<br>log.info(&quot;user is ok&quot;);<br>return &quot;user service is ok! &quot;+ &quot; --&gt; port：&quot;+port;<br>&#125;<br>public String blockHandler(Integer id, BlockException e)&#123;<br>if(e instanceof FlowException)&#123;<br>return &quot;请求过于火爆，您已被流控！&quot;;<br>&#125;<br>if (e instanceof ParamFlowException)&#123;<br>return &quot;热点参数限流&quot;;<br>&#125;<br>if (e instanceof DegradeException)&#123;<br>return &quot;降级&quot;;<br>&#125;<br>return &quot;服务器顶不住了~&quot;;<br>&#125;<br>public String fall(Integer id)&#123;<br>return &quot;默认服务器错误&quot;;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在Sentinel Dashboard中加入流量控制规则，当QPS达到4就触发流控</p><p><img src="https://i.loli.net/2021/06/25/G17ZHazDEO6gcMB.png" alt="16.png"></p><p>测试结果，当我们请求过快，达到阈值就会进行流控，无法请求</p><p><img src="https://i.loli.net/2021/06/25/7BzRq8OiyJgrplu.png"></p><p>当我们请求所带的id小于0也会走失败的处理方法，而不会抛出异常</p><p><img src="https://i.loli.net/2021/06/25/wlWZ71QRjNcP8pD.png"></p><p>到此，五大组件的集成环境已经搭建完成！</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>回过去看一看，虽然组件很多，但搭建并不难，基本的步骤就是：</p><ol><li>加依赖</li><li>写配置</li><li>写注解</li></ol><p>微服务开发难得的后面的模块一旦多起来，模块之间的调用就很饶人了</p><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h1><p><a href="https://www.bilibili.com/video/BV1S5411c7hM">小陈的2021年最新SpringCloud微服务实战教程</a></p><h1 id="8-源码"><a href="#8-源码" class="headerlink" title="8.源码"></a>8.源码</h1>]]></content>
    
    
    
    <tags>
      
      <tag>微服务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx一点点</title>
    <link href="/2021/06/13/Nginx%E4%B8%80%E7%82%B9%E7%82%B9/"/>
    <url>/2021/06/13/Nginx%E4%B8%80%E7%82%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/06/12/pOVkBsKWd5c4GPI.png"></p><h1 id="1-Nginx介绍"><a href="#1-Nginx介绍" class="headerlink" title="1. Nginx介绍"></a>1. Nginx介绍</h1><p>Nginx是一款轻量级的Web服务器、反向代理服务器，由于它的内存占用少，启动极快，高并发能力强，在互联网项目中广泛应用。</p><p><img src="https://i.loli.net/2021/06/12/Eqcp7mT9v46ARyX.jpg"></p><p>上图基本上说明了当下流行的技术架构，其中Nginx有点入口网关的味道。</p><p>说了这么多，我们先安装玩玩吧</p><h1 id="2-安装Nginx"><a href="#2-安装Nginx" class="headerlink" title="2. 安装Nginx"></a>2. 安装Nginx</h1><p>一般都是项目都是部署在linux上，这里我们采用Docker的方式启动Nginx，关于Docker的，上一篇有详细介绍</p><p><a href="https://luffy997.github.io/2021/06/12/Docker/">Docker</a></p><p>下面记录centos7利用Docker安装Nginx的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hspEdu01 nginx]# docker pull nginx<br>Using default tag: latest<br>Trying to pull repository docker.io/library/nginx ...<br>latest: Pulling from docker.io/library/nginx<br>69692152171a: Already exists<br>30afc0b18f67: Pull complete<br>596b1d696923: Pull complete<br>febe5bd23e98: Pull complete<br>8283eee92e2f: Pull complete<br>351ad75a6cfa: Pull complete<br>Digest: sha256:6d75c99af15565a301e48297fa2d121e15d80ad526f8369c526324f0f7ccb750<br>Status: Downloaded newer image for docker.io/nginx:latest<br>[root@hspEdu01 nginx]# ls<br>conf logs www<br>[root@hspEdu01 nginx]# cd conf/<br>[root@hspEdu01 conf]# ls<br>nginx.conf<br>[root@hspEdu01 conf]# cd ../<br>[root@hspEdu01 nginx]# cd ../<br>[root@hspEdu01 ~]# rm -rf nginx/<br>[root@hspEdu01 ~]# ls<br>anaconda-ks.cfg data data2 initial-setup-ks.cfg mysql 公共 模板 视频 图片 文档 下载 音乐 桌面<br>[root@hspEdu01 ~]# docker run --name nginx-test -p 80:80 -d nginx<br>608ed67163e091695eb14f964cff6f4d24f2818275845f34254eff49e24fe770<br>[root@hspEdu01 ~]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS<br>608ed67163e0 nginx &quot;/docker-entrypoin...&quot; 4 seconds ago Up 2 seconds 0.0.0.0:80-&gt;80/tcp<br>760a2956258e a8e34 &quot;java -jar app.jar&quot; About an hour ago Up About an hour 0.0.0.0:8010-&gt;8010/tcp<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; About an hour ago Up About an hour 0.0.0.0:3306-&gt;3306/tcp, 33060/tc<br>[root@hspEdu01 ~]# mkdir -p /root/nginx/www /root/nginx/logs /root/nginx/conf<br>[root@hspEdu01 ~]# cd nginx/<br>[root@hspEdu01 nginx]# cd conf/<br>[root@hspEdu01 conf]# ls<br>[root@hspEdu01 conf]# docker cp 608e:/etc/nginx/nginx.conf /root/nginx/conf<br>[root@hspEdu01 conf]# ls<br>nginx.conf<br>[root@hspEdu01 conf]# docker rm -f 608e<br>608e<br>[root@hspEdu01 conf]# docker run -d -p 80:80 --name nginx-web -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/logs:/var/log/nginx nginx<br>987bc07bc4eb474332766dfe6409d957e07bf94fc24153222cf8bf99147df717<br>[root@hspEdu01 conf]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>987bc07bc4eb nginx &quot;/docker-entrypoin...&quot; 10 seconds ago Exited (1) 9 seconds ago nginx-web<br>760a2956258e a8e34 &quot;java -jar app.jar&quot; About an hour ago Up About an hour 0.0.0.0:8010-&gt;8010/tcp adoring\_pare<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; About an hour ago Up About an hour 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>[root@hspEdu01 conf]# docker logs -f 987b<br>/docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration<br>/docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh<br>10-listen-on-ipv6-by-default.sh: info: Getting the checksum of /etc/nginx/conf.d/default.conf<br>10-listen-on-ipv6-by-default.sh: info: Enabled listen on IPv6 in /etc/nginx/conf.d/default.conf<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh<br>/docker-entrypoint.sh: Launching /docker-entrypoint.d/30-tune-worker-processes.sh<br>/docker-entrypoint.sh: Configuration complete; ready for start up<br>nginx: [alert] could not open error log file: open() &quot;/var/log/nginx/error.log&quot; failed (13: Permission denied)<br>2021/06/12 02:26:39 [emerg] 1#1: open() &quot;/etc/nginx/nginx.conf&quot; failed (13: Permission denied)<br>[root@hspEdu01 conf]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>987bc07bc4eb nginx &quot;/docker-entrypoin...&quot; About a minute ago Exited (1) About a minute ago nginx-web<br>760a2956258e a8e34 &quot;java -jar app.jar&quot; About an hour ago Up About an hour 0.0.0.0:8010-&gt;8010/tcp adoring\_pare<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; About an hour ago Up About an hour 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>[root@hspEdu01 conf]# docker rm -f 987<br>987<br>[root@hspEdu01 conf]# docker run -d -p 80:80 --name nginx-web -v /root/nginx/www:/usr/share/nginx/html -v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/logs:/var/log/nginx --privileged=true nginx<br>6593ed8866071e1865217f58c627005aa8f3e9b3c8db6f5ff1aec22653503d1a<br>[root@hspEdu01 conf]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>6593ed886607 nginx &quot;/docker-entrypoin...&quot; 5 seconds ago Up 3 seconds 0.0.0.0:80-&gt;80/tcp nginx-web<br>760a2956258e a8e34 &quot;java -jar app.jar&quot; About an hour ago Up About an hour 0.0.0.0:8010-&gt;8010/tcp adoring\_pare<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; About an hour ago Up About an hour 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>[root@hspEdu01 conf]# cd ../<br>[root@hspEdu01 nginx]# cd www/<br>[root@hspEdu01 www]# touch a.html<br>[root@hspEdu01 www]# vim a.html<br>[root@hspEdu01 www]#<br></code></pre></td></tr></table></figure><p>这里我们创建了一个nginx-web的容器，并把它的网页目录，日志目录和配置文件目录挂载到宿主机，新建了一个a.html，因为Nginx的热部署的，所以我们直接在浏览器请求a.html即可</p><p><img src="https://i.loli.net/2021/06/12/mUoaTBXV9Y1yJ23.png"></p><h1 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h1><p>在第二张图上，已经提到Nginx可以实现负载均衡，什么叫负载均衡呢？</p><p>如果请求数过大，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况改为请求分发到多个服务器上，就是负载均衡。</p><p>实现方式也很简单，在nginx.conf中upstream 指定后端服务器地址列表，在 server 中拦截响应请求，并将请求转发到 Upstream 中配置的服务器列表。</p><h2 id="1-轮询"><a href="#1-轮询" class="headerlink" title="1. 轮询"></a>1. 轮询</h2><p>这里我们利用Docker多端口启动3台Tomcat服务器，里面Nginx实现请求的负载均衡，下面记录详细命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-0-15-centos conf]# docker run -p 8010:8080 -v /root/tomcat8010/webapps:/usr/local/tomcat/webapps -d --name tomcat8081 bcf990bea01a<br>a386923c309b971e5c09c1656f706313d074d62f1a898844513594f662463c07<br><span class="hljs-meta prompt_">#</span><span class="language-bash">三台Tomcat启动方式都是一样的 只是参数和数据卷不一样而已，这里以最后一台为例子</span><br>[root@VM-0-15-centos conf]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>a386923c309b bcf990bea01a &quot;catalina.sh run&quot; 4 seconds ago Up 3 seconds 0.0.0.0:8010-&gt;8080/tcp tomcat8081<br>5dbbb4db6e00 bcf990bea01a &quot;catalina.sh run&quot; 20 hours ago Up 20 hours 0.0.0.0:8881-&gt;8080/tcp tomcat-8881<br>216a2e8f1c90 bcf990bea01a &quot;catalina.sh run&quot; 20 hours ago Up 20 hours 0.0.0.0:8888-&gt;8080/tcp tomcat-8888<br>8499b0e39d0f bcf990bea01a &quot;catalina.sh run&quot; 21 hours ago Up 21 hours 0.0.0.0:8080-&gt;8080/tcp mytomcat<br>7dd71eee737f mysql:5.7 &quot;docker-entrypoint...&quot; 43 hours ago Up 43 hours 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>52aa02d195d9 nginx &quot;/docker-entrypoin...&quot; 2 days ago Up 2 minutes 0.0.0.0:80-&gt;80/tcp nginx-web<br>[root@VM-0-15-centos conf]# cd /root<br>[root@VM-0-15-centos ~]# ls<br>aa.txt apps data demo dockerfile images meiyan mysql nginx RUNNING.txt test tomcat8010 tomcat-8881 tomcat8888 webapps<br>[root@VM-0-15-centos ~]# cd tomcat8010<br>[root@VM-0-15-centos tomcat8010]# ls<br>webapps<br>[root@VM-0-15-centos tomcat8010]# cd webapps<br>[root@VM-0-15-centos webapps]# mkdir edu<br>[root@VM-0-15-centos webapps]# cd edu<br>[root@VM-0-15-centos edu]# ouch a.html<br>-bash: ouch: command not found<br>[root@VM-0-15-centos edu]# touch a.html<br>[root@VM-0-15-centos edu]# vim a.html<br>[root@VM-0-15-centos edu]# cat a.html<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;Tomcat8010&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[root@VM-0-15-centos edu]# cd /root/nginx/conf/<br>[root@VM-0-15-centos conf]# vim nginx.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置完nginx.conf 记得重启nginx服务</span><br>[root@VM-0-15-centos conf]# docker restart nginx-web<br>nginx-web<br>[root@VM-0-15-centos conf]#<br></code></pre></td></tr></table></figure><p>这时候，我们可以在浏览器中访问<a href="http://118.195.164.41/edu/a.html%EF%BC%8C%E4%BC%9A%E5%8F%91%E7%8E%B0%E5%AE%83%E6%98%AF%E8%B7%B3%E8%BD%AC%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84Tomcat%E4%B8%8A%EF%BC%8C%E5%8D%B3%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E8%BF%99%E9%87%8C%E5%8F%AA%E6%98%AF%E7%AC%AC%E4%B8%80%E7%A7%8D%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B9%B6%E6%B2%A1%E8%AE%BE%E8%AE%A1%E7%BB%86%E5%88%99%EF%BC%8C%E4%B8%8B%E9%9D%A2%E6%88%91%E4%BB%AC%E5%86%8D%E5%B1%95%E7%A4%BA%E8%AE%B2%E8%BF%B0%E4%B8%8B%E5%85%B6%E5%AE%83%E5%87%A0%E7%A7%8D%EF%BC%9A">http://118.195.164.41/edu/a.html，会发现它是跳转到不同的Tomcat上，即实现了负载均衡，这里只是第一种，我们并没设计细则，下面我们再展示讲述下其它几种：</a></p><h2 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h2><p>修改nginx.conf即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-0-15-centos conf]# cat nginx.conf<br>user nginx;<br>worker\_processes auto;<br>error\_log /var/log/nginx/error.log notice;<br>pid /var/run/nginx.pid;<br>events &#123;<br>worker\_connections 1024;<br>&#125;<br>http &#123;<br>include /etc/nginx/mime.types;<br>default\_type application/octet-stream;<br>log\_format main &#x27;$remote\_addr - $remote\_user [$time\_local] &quot;$request&quot; &#x27;<br>&#x27;$status $body\_bytes\_sent &quot;$http\_referer&quot; &#x27;<br>&#x27;&quot;$http\_user\_agent&quot; &quot;$http\_x\_forwarded\_for&quot;&#x27;;<br>access\_log /var/log/nginx/access.log main;<br>upstream myserver &#123;<br>server 118.195.164.41:8080 weight=1;<br>server 118.195.164.41:8888 weight=10;<br>server 118.195.164.41:8881 weight=15;<br>server 118.195.164.41:8010 weight=20;<br>&#125;<br>server&#123;<br>listen 80;<br>charset utf-8;<br>server\_name 118.195.164.41;<br>location / &#123;<br>proxy\_pass http://myserver;<br>&#125;<br>&#125;<br>sendfile on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp\_nopush on;</span><br>keepalive\_timeout 65;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">gzip on;</span><br>include /etc/nginx/conf.d/\*.conf;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-ip-hash"><a href="#3-ip-hash" class="headerlink" title="3.ip_hash"></a>3.ip_hash</h2><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-0-15-centos conf]# cat nginx.conf<br>user nginx;<br>worker\_processes auto;<br>error\_log /var/log/nginx/error.log notice;<br>pid /var/run/nginx.pid;<br>events &#123;<br>worker\_connections 1024;<br>&#125;<br>http &#123;<br>include /etc/nginx/mime.types;<br>default\_type application/octet-stream;<br>log\_format main &#x27;$remote\_addr - $remote\_user [$time\_local] &quot;$request&quot; &#x27;<br>&#x27;$status $body\_bytes\_sent &quot;$http\_referer&quot; &#x27;<br>&#x27;&quot;$http\_user\_agent&quot; &quot;$http\_x\_forwarded\_for&quot;&#x27;;<br>access\_log /var/log/nginx/access.log main;<br>upstream myserver &#123;<br>ip\_hash;<br>server 118.195.164.41:8080 ;<br>server 118.195.164.41:8888 ;<br>server 118.195.164.41:8881 ;<br>server 118.195.164.41:8010 ;<br>&#125;<br>server&#123;<br>listen 80;<br>charset utf-8;<br>server\_name 118.195.164.41;<br>location / &#123;<br>proxy\_pass http://myserver;<br>&#125;<br>&#125;<br>sendfile on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp\_nopush on;</span><br>keepalive\_timeout 65;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">gzip on;</span><br>include /etc/nginx/conf.d/\*.conf;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-fair-第三方"><a href="#4-fair-第三方" class="headerlink" title="4.fair(第三方)"></a>4.fair(第三方)</h2><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><p>需要安装其它依赖，这里就不测试了</p><h1 id="4-反向代理"><a href="#4-反向代理" class="headerlink" title="4. 反向代理"></a>4. 反向代理</h1><p>经常听人说到一些术语，如反向代理，那么什么是反向代理，什么又是正向代理呢？</p><p><img src="https://i.loli.net/2021/06/13/HNdostpFcQSUK7I.jpg"></p><p>​ 正向代理示意图</p><p><img src="https://i.loli.net/2021/06/13/Td9tcFv6CNwDiGB.jpg"></p><p>​ 反向代理示意图</p><p>由于防火墙的原因，我们并不能直接访问谷歌，那么我们可以借助VPN来实现，这就是一个简单的正向代理的例子。这里你能够发现，正向代理“代理”的是客户端，而且客户端是知道目标的，而目标是不知道客户端是通过VPN访问的。</p><p>当我们在外网访问百度的时候，其实会进行一个转发，代理到内网去，这就是所谓的反向代理，即反向代理“代理”的是服务器端，而且这一个过程对于客户端而言是透明的。</p><p>Nginx实现反向代理是很容易的，下面记录详细命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-0-15-centos conf]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>a386923c309b bcf990bea01a &quot;catalina.sh run&quot; 22 hours ago Up 22 hours 0.0.0.0:8010-&gt;8080/tcp tomcat8081<br>5dbbb4db6e00 bcf990bea01a &quot;catalina.sh run&quot; 42 hours ago Up 42 hours 0.0.0.0:8881-&gt;8080/tcp tomcat-8881<br>216a2e8f1c90 bcf990bea01a &quot;catalina.sh run&quot; 43 hours ago Up 43 hours 0.0.0.0:8888-&gt;8080/tcp tomcat-8888<br>8499b0e39d0f bcf990bea01a &quot;catalina.sh run&quot; 43 hours ago Up 43 hours 0.0.0.0:8080-&gt;8080/tcp mytomcat<br>7dd71eee737f mysql:5.7 &quot;docker-entrypoint...&quot; 2 days ago Up 2 days 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>52aa02d195d9 nginx &quot;/docker-entrypoin...&quot; 2 days ago Up 39 seconds 0.0.0.0:80-&gt;80/tcp nginx-web<br>[root@VM-0-15-centos conf]# vim nginx.conf<br>[root@VM-0-15-centos conf]# cat nginx.conf<br>user nginx;<br>worker\_processes auto;<br>error\_log /var/log/nginx/error.log notice;<br>pid /var/run/nginx.pid;<br>events &#123;<br>worker\_connections 1024;<br>&#125;<br>http &#123;<br>include /etc/nginx/mime.types;<br>default\_type application/octet-stream;<br>log\_format main &#x27;$remote\_addr - $remote\_user [$time\_local] &quot;$request&quot; &#x27;<br>&#x27;$status $body\_bytes\_sent &quot;$http\_referer&quot; &#x27;<br>&#x27;&quot;$http\_user\_agent&quot; &quot;$http\_x\_forwarded\_for&quot;&#x27;;<br>access\_log /var/log/nginx/access.log main;<br>upstream myserver &#123;<br>server 118.195.164.41:8080 ;<br>server 118.195.164.41:8888 ;<br>server 118.195.164.41:8881 ;<br>server 118.195.164.41:8010 ;<br>&#125;<br>server&#123;<br>listen 80;<br>charset utf-8;<br>server\_name 118.195.164.41;<br>location / &#123;<br>proxy\_pass http://118.195.164.41:8888/edu/a.html;<br>proxy\_redirect default;<br>&#125;<br>&#125;<br>sendfile on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp\_nopush on;</span><br>keepalive\_timeout 65;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">gzip on;</span><br>include /etc/nginx/conf.d/\*.conf;<br>&#125;<br>[root@VM-0-15-centos conf]# docker restart nginx-web<br>nginx-web<br>[root@VM-0-15-centos conf]# vim nginx.conf<br>[root@VM-0-15-centos conf]# docker restart nginx-web<br>nginx-web<br>[root@VM-0-15-centos conf]#<br></code></pre></td></tr></table></figure><p>使用方向代理，让访问80端口的请求重定向到8888端口下的一个页面，测试成功！</p><p>关于location的配置，主要就是对访问路径进行设置，有很多，下面这篇博文讲的很好：</p><p><a href="https://blog.csdn.net/tjcyjd/article/details/50897959">nginx的location配置详解</a></p><h1 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5. 动静分离"></a>5. 动静分离</h1><p><img src="https://i.loli.net/2021/06/13/xCJVvKSAT5j3PGu.png"></p><p>Nginx 动静分离简单来说就是把动态跟静态请求分开，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是动态请求跟静态请求分开，可以理解成使用 Nginx处理静态页面，Tomcat 处理动态页面。动静分离从目前实现角度来讲大致分为两种，一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</p><p>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，</p><p>所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存），我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</p><p>对于这个配置，其实就是在location配置下路径，但我一直没成功，不知道为什么！！配置如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">user nginx;<br>worker\_processes auto;<br>error\_log /var/log/nginx/error.log notice;<br>pid /var/run/nginx.pid;<br>events &#123;<br>worker\_connections 1024;<br>&#125;<br>http &#123;<br>include /etc/nginx/mime.types;<br>default\_type application/octet-stream;<br>log\_format main &#x27;$remote\_addr - $remote\_user [$time\_local] &quot;$request&quot; &#x27;<br>&#x27;$status $body\_bytes\_sent &quot;$http\_referer&quot; &#x27;<br>&#x27;&quot;$http\_user\_agent&quot; &quot;$http\_x\_forwarded\_for&quot;&#x27;;<br>upstream static &#123;<br>server 118.195.164.41:80;<br>&#125;<br>upstream dynamic &#123;<br>server 118.195.164.41:8080 ;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">server 118.195.164.41:8888 ;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">server 118.195.164.41:8881 ;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">server 118.195.164.41:8010 ;</span><br>&#125;<br>server&#123;<br>listen 80;<br>charset utf-8;<br>server\_name 118.195.164.41;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截动态资源</span><br>location ~ .\*\.(php|jsp)$ &#123;<br>proxy\_pass http://dynamic;<br>&#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截静态资源</span><br>location ~ .\*\.(jpg|png|htm|html|css|js)$ &#123;<br>root /data/; #html目录<br>proxy\_pass http://static;<br>autoindex on; #自动打开文件列表<br>&#125;<br>&#125;<br>sendfile on;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tcp\_nopush on;</span><br>keepalive\_timeout 65;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">gzip on;</span><br>include /etc/nginx/conf.d/\*.conf;<br>&#125;<br></code></pre></td></tr></table></figure><p>后面有时间再更新Nginx的~</p><h1 id="6-参考文章"><a href="#6-参考文章" class="headerlink" title="6. 参考文章"></a>6. 参考文章</h1><p><a href="https://zhuanlan.zhihu.com/p/34943332">8分钟带你深入浅出搞懂Nginx</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/06/12/Docker/"/>
    <url>/2021/06/12/Docker/</url>
    
    <content type="html"><![CDATA[<p>最近在学Docker，花了很多时间，算是把Docker的一些基本使用方法get到了，现在记录下</p><h1 id="1-Docker基础知识"><a href="#1-Docker基础知识" class="headerlink" title="1. Docker基础知识"></a>1. Docker基础知识</h1><h2 id="1-什么是Docker"><a href="#1-什么是Docker" class="headerlink" title="1. 什么是Docker"></a>1. 什么是Docker</h2><p><img src="https://i.loli.net/2021/06/11/hu1LqNzFQvP87aC.png" alt="image-20200404105433120.png"></p><p>官网的介绍是“<code>Docker is the world’s leading software container platform.</code>” 官方给Docker的定位是一个<code>应用容器平台</code>。</p><p>Docker 是一个容器平台的领导者 Docker 容器平台 Docker 应用容器平台</p><h2 id="1-2-为什么使用Docker"><a href="#1-2-为什么使用Docker" class="headerlink" title="1.2 为什么使用Docker"></a>1.2 为什么使用Docker</h2><ul><li><p><code>合作开发的时候，在本机可以跑，别人的电脑跑不起来</code></p><p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、spring等等。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序直接打包成镜像，直接运行在容器中即可。</p></li><li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了</code></p><p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p></li><li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器</code></p><p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p></li></ul><h2 id="1-3-Docker和虚拟机的区别"><a href="#1-3-Docker和虚拟机的区别" class="headerlink" title="1.3 Docker和虚拟机的区别"></a>1.3 Docker和虚拟机的区别</h2><p><img src="https://i.loli.net/2021/06/11/GaDNFPUjYsLkWCM.png"></p><p><code>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重</code>。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p><table><thead><tr><th></th><th>传统虚拟机</th><th>Docker容器</th></tr></thead><tbody><tr><td>磁盘占用</td><td>几个GB到几十个GB左右</td><td>几十MB到几百MB左右</td></tr><tr><td>CPU内存占用</td><td>虚拟操作系统非常占用CPU和内存</td><td>Docker引擎占用极低</td></tr><tr><td>启动速度</td><td>（从开机到运行项目）几分钟</td><td>（从开启容器到运行项目）几秒</td></tr><tr><td>安装管理</td><td>需要专门的运维技术</td><td>安装、管理方便</td></tr><tr><td>应用部署</td><td>每次部署都费时费力</td><td>从第二次部署开始轻松简捷</td></tr><tr><td>耦合性</td><td>多个应用服务安装到一起，容易互相影响</td><td>每个应用服务一个容器，达成隔离</td></tr><tr><td>系统依赖</td><td>无</td><td>需求相同或相似的内核，目前推荐是Linux</td></tr></tbody></table><h2 id="1-4-Docker-的核心"><a href="#1-4-Docker-的核心" class="headerlink" title="1.4 Docker 的核心"></a>1.4 Docker 的核心</h2><p><img src="https://i.loli.net/2021/06/11/BYIR9lyPEAe2MXK.png"></p><ul><li><code>镜像:</code> 一个镜像代表一个应用环境,他是一个只读的文件,如 mysql镜像,tomcat镜像,nginx镜像等</li><li><code>容器:</code> 镜像每次运行之后就是产生一个容器,就是正在运行的镜像,特点就是可读可写</li><li><code>仓库:</code>用来存放镜像的位置,类似于maven仓库,也是镜像下载和上传的位置</li><li><code>dockerFile:</code>docker生成镜像配置文件,用来书写自定义镜像的一些配置</li><li><code>tar:</code>一个对镜像打包的文件,日后可以还原成镜像</li></ul><h1 id="2-Docker常用操作（centos7-X）"><a href="#2-Docker常用操作（centos7-X）" class="headerlink" title="2. Docker常用操作（centos7.X）"></a>2. Docker常用操作（centos7.X）</h1><h2 id="2-1-Docker的安装"><a href="#2-1-Docker的安装" class="headerlink" title="2.1 Docker的安装"></a>2.1 Docker的安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、检查内核版本，必须是3.10及以上<br>uname ‐r<br>2、安装docker<br>yum install docker<br>3、输入y确认安装<br>4、启动docker<br>[root@localhost ~]# systemctl start docker<br>[root@localhost ~]# docker ‐v<br>Docker version 1.13.1, build 7d71120/1.13.1<br>5、开机启动docker<br>[root@localhost ~]# systemctl enable docker<br>Created symlink from /etc/systemd/system/multi‐user.target.wants/docker.service to<br>/usr/lib/systemd/system/docker.service.<br>6、停止docker<br>systemctl stop docker<br>7、阿里云镜像加速<br>mkdir -p /etc/docker<br>vim /etc/docker/daemon.json<br>&#123;<br>&quot;registry-mirrors&quot;: [&quot;https://77t1qhyj.mirror.aliyuncs.com&quot;]<br>&#125;<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>需要注意的是Docker只适合linux内核版本在3.10及以上的，我用的centos，那就需要7.X，所以之前的centos6.X就不行了。</p><p>安装完成后，我们一般都会设置开机启动Docker，假如是本地的虚拟机就需要修改镜像拉取地址，不然docker官方的镜像地址就很慢了，而且很容易失败。这里我使用阿里云的镜像加速，在阿里云里搜索镜像加速即可找到。</p><p>若是用到云服务器，比如阿里云，腾讯云就不需要了~</p><p>配置完记得重新加载配置，再重启下Docker即可。</p><p>启动Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure><p>关闭Docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">systemctl stop docker<br></code></pre></td></tr></table></figure><h2 id="2-2-Docker的常用操作"><a href="#2-2-Docker的常用操作" class="headerlink" title="2.2 Docker的常用操作"></a>2.2 Docker的常用操作</h2><ol><li>镜像操作</li></ol><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字 eg:docker search redis</td><td>可以去Docker Hub查找镜像的详细信息</td></tr><tr><td>拉取</td><td>docker pull 镜像名：tag</td><td>：tag是可以选的，表示标签，多为版本号，如果省略，即为latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看本地所有镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p>2.容器操作</p><p>从上文我们就已经知道Docker是容器应用平台，那什么是容器呢？</p><p>简单的来说，就是运行起来的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.运行容器</span><br>docker run 镜像名 -------------------------- 镜像名新建并启动容器<br>--name 别名为容器起一个名字<br>-d 启动守护式容器（在后台启动容器）<br>-p 映射端口号：原始端口号 指定端口号启动<br>例：docker run -it --name myTomcat -p 8888:8080 tomcat<br>docker run -d --name myTomcat -P tomcat<br><span class="hljs-meta prompt_"># </span><span class="language-bash">2.查看运行的容器</span><br>docker ps -------------------------- 列出所有正在运行的容器<br>-a 正在运行的和历史运行过的容器<br>-q 静默模式，只显示容器编号<br><span class="hljs-meta prompt_"># </span><span class="language-bash">3.停止|关闭|重启容器</span><br>docker start 容器名字或者容器id --------------- 开启容器<br>docker restart 容器名或者容器id --------------- 重启容器<br>docker stop 容器名或者容器id ------------------ 正常停止容器运行<br>docker kill 容器名或者容器id ------------------ 立即停止容器运行<br><span class="hljs-meta prompt_"># </span><span class="language-bash">4.删除容器</span><br>docker rm -f 容器id和容器名<br>docker rm -f $(docker ps -aq) -------------------------- 删除所有容器<br><span class="hljs-meta prompt_"># </span><span class="language-bash">5.查看容器内进程</span><br>docker top 容器id或者容器名 ------------------ 查看容器内的进程<br><span class="hljs-meta prompt_"># </span><span class="language-bash">6.查看查看容器内部细节</span><br>docker inspect 容器id ------------------ 查看容器内部细节<br><span class="hljs-meta prompt_"># </span><span class="language-bash">7.查看容器的运行日志</span><br>docker logs [OPTIONS] 容器id或容器名 ------------------ 查看容器日志<br>-t 加入时间戳<br>-f 跟随最新的日志打印<br>--tail 数字 显示最后多少条<br></code></pre></td></tr></table></figure><p>这里我们以安装Tomcat为例，记录操作全过程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在Docker Hub上查找自己需要的Tomcat版本，由于Tomcat需要JDK环境，所以下载的镜像中包含JDK，我们直接使用拉取命令即可</span><br>[root@hspEdu01 ~]# docker pull tomcat:9.0.46-jdk8<br>Trying to pull repository docker.io/library/tomcat ...<br>9.0.46-jdk8: Pulling from docker.io/library/tomcat<br>d960726af2be: Pull complete<br>e8d62473a22d: Pull complete<br>8962bc0fad55: Pull complete<br>65d943ee54c1: Pull complete<br>da20b77f10ac: Pull complete<br>fb6a778e6477: Pull complete<br>ae7884f0e61b: Pull complete<br>5a229cc6592e: Pull complete<br>efb3915175c2: Pull complete<br>805021669e73: Pull complete<br>Digest: sha256:36c2088c48cb29bb093abce58527259fe70f7feaccc3820cdbf1ca21caa76785<br>Status: Downloaded newer image for docker.io/tomcat:9.0.46-jdk8<br>[root@hspEdu01 ~]# docker images<br>REPOSITORY TAG IMAGE ID CREATED SIZE<br>docker.io/tomcat 9.0.46-jdk8 7253c7ce0ab9 4 weeks ago 534 MB<br>[root@hspEdu01 ~]# docker run -d -p 8080:8080 --name tomcat01 7253c7ce0ab9<br>a3ec9a313973f624836fc5caf46b001d7fd3c1d8932c33702730e010870d142b<br>[root@hspEdu01 ~]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>a3ec9a313973 7253c7ce0ab9 &quot;catalina.sh run&quot; 5 seconds ago Up 3 seconds 0.0.0.0:8080-&gt;8080/tcp tomcat01<br>[root@hspEdu01 ~]#<br><span class="hljs-meta prompt_">#</span><span class="language-bash">打开浏览器 访问http://192.168.27.129:8080/ 出现tomcat，说明启动成功</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">我们还可以通过以下命令查看容器日志</span><br>[root@hspEdu01 ~]# docker logs -f a3ec<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进去容器</span><br>[root@hspEdu01 ~]# docker exec -it a3ec bash<br>root@a3ec9a313973:/usr/local/tomcat# ls<br>BUILDING.txt LICENSE README.md RUNNING.txt conf logs temp webapps.dist<br>CONTRIBUTING.md NOTICE RELEASE-NOTES bin lib native-jni-lib webapps work<br>root@a3ec9a313973:/usr/local/tomcat# cd webapps<br>root@a3ec9a313973:/usr/local/tomcat/webapps# ls<br>root@a3ec9a313973:/usr/local/tomcat/webapps# cd ../conf<br>root@a3ec9a313973:/usr/local/tomcat/conf# ls<br>Catalina catalina.properties jaspic-providers.xml logging.properties tomcat-users.xml web.xml<br>catalina.policy context.xml jaspic-providers.xsd server.xml tomcat-users.xsd<br>root@a3ec9a313973:/usr/local/tomcat/conf# vim server.xml<br>bash: vim: command not found<br>root@a3ec9a313973:/usr/local/tomcat/conf# exit<br>exit<br></code></pre></td></tr></table></figure><p>到这里，出现了一个问题，我们一般部署tomcat项目，都是把项目拷贝到webapps下，tomcat即可自带解析运行项目，但我们有时候还需要配置下默认端口，8080-&gt;80，默认访问路径，就需要修改server.xml，web.xml，但我们发现用vim并不行，而且每次都要使用命令进容器，就特别不方便，而且容器一旦被删除，数据也没了。</p><p>这时候我们可以选择数据卷的方式，让容器和宿主机建立直接的物理管理，第一是方便操作，第二是可以对数据进行持久化，比如Mysql的数据库</p><p>数据卷也很简单，一般是两种：</p><ul><li>直接命名数据卷，让Docker去创建</li><li>把容器位置和宿主机文件目录建立联系</li></ul><p>两者其实是一样的，这里我们都试试吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hspEdu01 ~]# docker rm -f a3ec<br>a3ec<br>[root@hspEdu01 ~]# docker run -d -p 8080:8080 -v webapps:/usr/local/tomcat/webapps -v webconf:/usr/local/tomcat/conf --name tomcat 7253c7ce0ab9<br>21795689b90c0447b10250fd3b36b96232188b4f16c88f14a434469cd4e33f0f<br>[root@hspEdu01 ~]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>21795689b90c 7253c7ce0ab9 &quot;catalina.sh run&quot; 3 seconds ago Up 2 seconds 0.0.0.0:8080-&gt;8080/tcp tomcat<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看本地所有数据卷</span><br>[root@hspEdu01 ~]# docker volume ls<br>DRIVER VOLUME NAME<br>local webapps<br>local webconf<br>[root@hspEdu01 ~]# docker inspect webapps<br>[<br>&#123;<br>&quot;Driver&quot;: &quot;local&quot;,<br>&quot;Labels&quot;: null,<br>&quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/webapps/\_data&quot;,<br>&quot;Name&quot;: &quot;webapps&quot;,<br>&quot;Options&quot;: &#123;&#125;,<br>&quot;Scope&quot;: &quot;local&quot;<br>&#125;<br>]<br>[root@hspEdu01 ~]# cd /var/lib/docker/volumes/webapps/\_data<br>[root@hspEdu01 \_data]# ls<br>[root@hspEdu01 \_data]# touch a.html<br>[root@hspEdu01 \_data]# vim a.html<br>[root@hspEdu01 \_data]# cat a.html<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;utf-8&quot;&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h3&gt;Tomcat&lt;/h3&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>[root@hspEdu01 \_data]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>21795689b90c 7253c7ce0ab9 &quot;catalina.sh run&quot; 2 minutes ago Up 2 minutes 0.0.0.0:8080-&gt;8080/tcp tomcat<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器</span><br>[root@hspEdu01 \_data]# docker exec -it 2179 bash<br>root@21795689b90c:/usr/local/tomcat# ls<br>BUILDING.txt CONTRIBUTING.md LICENSE NOTICE README.md RELEASE-NOTES RUNNING.txt bin conf lib logs native-jni-lib temp webapps webapps.dist work<br>root@21795689b90c:/usr/local/tomcat# cd webapps<br>root@21795689b90c:/usr/local/tomcat/webapps# ls<br>a.html<br>root@21795689b90c:/usr/local/tomcat/webapps# exit<br>exit<br>[root@hspEdu01 \_data]# docker restart 2179<br>2179<br>[root@hspEdu01 \_data]# docker inspect webconf<br>[<br>&#123;<br>&quot;Driver&quot;: &quot;local&quot;,<br>&quot;Labels&quot;: null,<br>&quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/webconf/\_data&quot;,<br>&quot;Name&quot;: &quot;webconf&quot;,<br>&quot;Options&quot;: &#123;&#125;,<br>&quot;Scope&quot;: &quot;local&quot;<br>&#125;<br>]<br>[root@hspEdu01 \_data]# cd /var/lib/docker/volumes/webconf/\_data<br>[root@hspEdu01 \_data]# ls<br>Catalina catalina.properties jaspic-providers.xml logging.properties tomcat-users.xml web.xml<br>catalina.policy context.xml jaspic-providers.xsd server.xml tomcat-users.xsd<br>[root@hspEdu01 \_data]#<br></code></pre></td></tr></table></figure><p>可以发现，宿主机，已经和容器目录建立联系，下面只是把左边的wenapps改成宿主机的文件夹即可</p><p>现在我们来装下mysql，不仅涉及到数据卷，还涉及到用户账号的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hspEdu01 data]# docker run --name mysql -v /root/mysql/data:/var/lib/mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL\_ROOT\_PASSWORD=root -p 3306:3306 --privileged=true -d mysql:5.7<br>95628d5d89c5c1513e1046bb19181007c2dfc43ea1f3132472ff57f4453fda7b<br>[root@hspEdu01 data]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; 3 seconds ago Up 2 seconds 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>[root@hspEdu01 data]# cd /root<br>[root@hspEdu01 ~]# ls<br>anaconda-ks.cfg data data2 initial-setup-ks.cfg mysql 公共 模板 视频 图片 文档 下载 音乐 桌面<br>[root@hspEdu01 ~]# cd mysql/<br>[root@hspEdu01 mysql]# ls<br>conf.d data<br>[root@hspEdu01 mysql]# cd conf.d/<br>[root@hspEdu01 conf.d]# ls<br>[root@hspEdu01 conf.d]# cd ../data/<br>[root@hspEdu01 data]# ls<br>auto.cnf ca.pem client-key.pem ibdata1 ib\_logfile1 mysql private\_key.pem server-cert.pem sys<br>ca-key.pem client-cert.pem ib\_buffer\_pool ib\_logfile0 ibtmp1 performance\_schema public\_key.pem server-key.pem<br>[root@hspEdu01 data]#<br></code></pre></td></tr></table></figure><p>可以看到确定把mysql的配置目录和数据库存储目录挂载到宿主机了，我们用navicat测试，连接成功！</p><p>为什么要把mysql容器的data挂载出去呢？因为容器是不为应用提供任何持久化操作的，一旦容器关闭，数据也没了，假如是这样，数据库存在的意义也就没了，所以需要把也是必须把数据库的存储数据的文件夹挂载到宿主机上。</p><p>基本上镜像的启动也就只需要注意端口映射，数据卷的设置，用户账号密码的设置，其它的可以参考Docker Hub中，对相应镜像启动都给出了参考。</p><p>注：–privileged&#x3D;true 是由于权限问题，需要带入权限才能正常启动，假如你能正常启动，就不需要带这个参数</p><h1 id="3-Dockerfile"><a href="#3-Dockerfile" class="headerlink" title="3. Dockerfile"></a>3. Dockerfile</h1><h2 id="3-1什么是Docerfile"><a href="#3-1什么是Docerfile" class="headerlink" title="3.1什么是Docerfile"></a>3.1什么是Docerfile</h2><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong></p><p><img src="https://i.loli.net/2021/06/11/BYIR9lyPEAe2MXK.png"></p><p>通过架构图可以看出通过DockerFile可以直接构建镜像</p><h2 id="3-2-Dockerfile解析过程"><a href="#3-2-Dockerfile解析过程" class="headerlink" title="3.2 Dockerfile解析过程"></a>3.2 Dockerfile解析过程</h2><p><img src="https://i.loli.net/2021/06/12/poNADCTSGsbuBUv.png"></p><h2 id="3-3-Dockerfile的保留命令"><a href="#3-3-Dockerfile的保留命令" class="headerlink" title="3.3 Dockerfile的保留命令"></a>3.3 Dockerfile的保留命令</h2><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><table><thead><tr><th>保留字</th><th>作用</th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td><strong>RUN</strong></td><td><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td><strong>EXPOSE</strong></td><td><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td><strong>WORKDIR</strong></td><td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td><strong>ENV</strong></td><td><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td><strong>ADD</strong></td><td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td><strong>COPY</strong></td><td><strong>类似于ADD，拷贝文件和目录到镜像中 将从构建上下文目录中&lt;原路径&gt;的文件&#x2F;目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td><strong>VOLUME</strong></td><td><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td><strong>CMD</strong></td><td><strong>指定一个容器启动时要运行的命令 Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td><strong>ENTRYPOINT</strong></td><td><strong>指定一个容器启动时要运行的命令 ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h4 id="3-3-1-FROM-命令"><a href="#3-3-1-FROM-命令" class="headerlink" title="3.3.1 FROM 命令"></a>3.3.1 FROM 命令</h4><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> &lt;image&gt;<br><span class="hljs-keyword">FROM</span> &lt;image&gt;[:&lt;tag&gt;] 使用版本不写为latest<br><span class="hljs-keyword">FROM</span> &lt;image&gt;[@&lt;digest&gt;] 使用摘要<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-2-MAINTAINER-命令"><a href="#3-3-2-MAINTAINER-命令" class="headerlink" title="3.3.2 MAINTAINER 命令"></a>3.3.2 MAINTAINER 命令</h4><ul><li><p>镜像维护者的姓名和邮箱地址[废弃]</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">MAINTAINER</span> &lt;name&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-3-RUN-命令"><a href="#3-3-3-RUN-命令" class="headerlink" title="3.3.3 RUN 命令"></a>3.3.3 RUN 命令</h4><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> &lt;<span class="hljs-built_in">command</span>&gt; (shell form, the <span class="hljs-built_in">command</span> is run <span class="hljs-keyword">in</span> a shell, <span class="hljs-built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> hello</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>] (<span class="hljs-built_in">exec</span> form)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo hello&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-4-EXPOSE-命令"><a href="#3-3-4-EXPOSE-命令" class="headerlink" title="3.3.4 EXPOSE 命令"></a>3.3.4 EXPOSE 命令</h4><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span>/tcp 如果没有显示指定则默认暴露都是tcp<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span>/udp<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-5-CMD-命令"><a href="#3-3-5-CMD-命令" class="headerlink" title="3.3.5 CMD 命令"></a>3.3.5 CMD 命令</h4><ul><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (<span class="hljs-built_in">exec</span> form, this is the preferred form)</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (shell form)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-6-WORKDIR-命令"><a href="#3-3-6-WORKDIR-命令" class="headerlink" title="3.3.6 WORKDIR 命令"></a>3.3.6 WORKDIR 命令</h4><ul><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /a</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> b</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> c</span><br>`注意:<span class="hljs-keyword">WORKDIR</span><span class="language-bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对`</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-7-ENV-命令"><a href="#3-3-7-ENV-命令" class="headerlink" title="3.3.7 ENV 命令"></a>3.3.7 ENV 命令</h4><ul><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> &lt;key&gt; &lt;value&gt;<br><span class="hljs-keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-8-ADD-命令"><a href="#3-3-8-ADD-命令" class="headerlink" title="3.3.8 ADD 命令"></a>3.3.8 ADD 命令</h4><ul><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ADD</span><span class="language-bash"> hom\* /mydir/ 通配符添加多个文件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> hom?.txt /mydir/ 通配符添加</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> test.txt relativeDir/ 可以指定相对路径</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> url</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-9-COPY-命令"><a href="#3-3-9-COPY-命令" class="headerlink" title="3.3.9 COPY 命令"></a>3.3.9 COPY 命令</h4><ul><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> src dest</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,... <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-10-VOLUME-命令"><a href="#3-3-10-VOLUME-命令" class="headerlink" title="3.3.10 VOLUME 命令"></a>3.3.10 VOLUME 命令</h4><ul><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/data&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="3-3-11-ENTRYPOINT命令"><a href="#3-3-11-ENTRYPOINT命令" class="headerlink" title="3.3.11 ENTRYPOINT命令"></a>3.3.11 ENTRYPOINT命令</h4><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2</span><br></code></pre></td></tr></table></figure><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h4 id="3-3-11-ENTRYPOINT命令-1"><a href="#3-3-11-ENTRYPOINT命令-1" class="headerlink" title="3.3.11 ENTRYPOINT命令"></a>3.3.11 ENTRYPOINT命令</h4><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2</span><br></code></pre></td></tr></table></figure><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h1 id="4-Dockerfile构建springboot项目部署"><a href="#4-Dockerfile构建springboot项目部署" class="headerlink" title="4. Dockerfile构建springboot项目部署"></a>4. Dockerfile构建springboot项目部署</h1><h2 id="4-1-准备一个springboot项目"><a href="#4-1-准备一个springboot项目" class="headerlink" title="4.1 准备一个springboot项目"></a>4.1 准备一个springboot项目</h2><p><img src="https://i.loli.net/2021/06/12/Y8SeGUC7Pnhd5iV.png"></p><p>这里推荐个小技巧，可以用idea中的tools连接虚拟机，相当于一个简单的xftp，在虚拟机中新建个文件夹，用于存放镜像打包所需的材料</p><h2 id="4-2-编写Dockerfile文件"><a href="#4-2-编写Dockerfile文件" class="headerlink" title="4.2 编写Dockerfile文件"></a>4.2 编写Dockerfile文件</h2><p>这里可以在idea中安装个Docker插件，即可支持Dockerfile代码提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM openjdk:8-jre<br>WORKDIR /app<br>ADD dockerfile-test-0.0.1-SNAPSHOT.jar app.jar<br>EXPOSE 8010<br>ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;]<br>CMD [&quot;app.jar&quot;]<br></code></pre></td></tr></table></figure><p>Java项目肯定需要jdk环境的，所以需要首先拉取jdk镜像</p><h2 id="4-3-把Dockerfile和jar文件拖入到文件夹里"><a href="#4-3-把Dockerfile和jar文件拖入到文件夹里" class="headerlink" title="4.3 把Dockerfile和jar文件拖入到文件夹里"></a>4.3 把Dockerfile和jar文件拖入到文件夹里</h2><h2 id="4-4-详细的命令记录"><a href="#4-4-详细的命令记录" class="headerlink" title="4.4 详细的命令记录"></a>4.4 详细的命令记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@hspEdu01 dockerfile-test]# docker images<br>REPOSITORY TAG IMAGE ID CREATED SIZE<br>docker.io/tomcat 9.0.46-jdk8 7253c7ce0ab9 4 weeks ago 534 MB<br>docker.io/mysql 5.7 2c9028880e58 4 weeks ago 447 MB<br>docker.io/openjdk 8 eca41db787bd 4 weeks ago 514 MB<br>[root@hspEdu01 dockerfile-test]# docker build -t app .<br>Sending build context to Docker daemon 17.08 MB<br>Step 1/6 : FROM openjdk:8-jre<br>Trying to pull repository docker.io/library/openjdk ...<br>8-jre: Pulling from docker.io/library/openjdk<br>d960726af2be: Already exists<br>e8d62473a22d: Already exists<br>8962bc0fad55: Already exists<br>961f7da1b9e5: Pull complete<br>7ba190cfbc66: Pull complete<br>595e52ef2a1b: Pull complete<br>Digest: sha256:5f5917a0754c79104a0025d3debb2bdc0c2fc11d60e80e008e9de89822281e46<br>Status: Downloaded newer image for docker.io/openjdk:8-jre<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">a979584e265d</span><br>Step 2/6 : WORKDIR /app<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">ed8a0ad97eb5</span><br>Removing intermediate container a4d123dd9196<br>Step 3/6 : ADD dockerfile-test-0.0.1-SNAPSHOT.jar app.jar<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">53cd89081273</span><br>Removing intermediate container 93713300ae57<br>Step 4/6 : EXPOSE 8010<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 8bf5e5054545</span><br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">a550b7d7348e</span><br>Removing intermediate container 8bf5e5054545<br>Step 5/6 : ENTRYPOINT java -jar<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> a8596518fb47</span><br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">c5097be2928d</span><br>Removing intermediate container a8596518fb47<br>Step 6/6 : CMD app.jar<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 4c3318ac728d</span><br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">a8e34817044f</span><br>Removing intermediate container 4c3318ac728d<br>Successfully built a8e34817044f<br>[root@hspEdu01 dockerfile-test]# docker images<br>REPOSITORY TAG IMAGE ID CREATED SIZE<br>app latest a8e34817044f 43 seconds ago 285 MB<br>docker.io/tomcat 9.0.46-jdk8 7253c7ce0ab9 4 weeks ago 534 MB<br>docker.io/mysql 5.7 2c9028880e58 4 weeks ago 447 MB<br>docker.io/openjdk 8-jre a979584e265d 4 weeks ago 268 MB<br>docker.io/openjdk 8 eca41db787bd 4 weeks ago 514 MB<br>[root@hspEdu01 dockerfile-test]# docker run -d -p 8010:8010 a8e34<br>760a2956258e4b6d0f56351597049f45677bed264aa5241ba1f584e0e2d38645<br>[root@hspEdu01 dockerfile-test]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES<br>760a2956258e a8e34 &quot;java -jar app.jar&quot; 4 seconds ago Up 2 seconds 0.0.0.0:8010-&gt;8010/tcp adoring\_pare<br>95628d5d89c5 mysql:5.7 &quot;docker-entrypoint...&quot; 42 minutes ago Up 42 minutes 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql<br>[root@hspEdu01 dockerfile-test]#<br></code></pre></td></tr></table></figure><h2 id="4-5-测试接口"><a href="#4-5-测试接口" class="headerlink" title="4.5 测试接口"></a>4.5 测试接口</h2><p><img src="https://i.loli.net/2021/06/12/TKPSFDMx6AQOaqC.png"></p><p>Docker的操作远不如此，这里仅仅只是入门，后面会继续更新的~</p>]]></content>
    
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之集成MongoDB</title>
    <link href="/2021/05/22/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90MongoDB/"/>
    <url>/2021/05/22/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90MongoDB/</url>
    
    <content type="html"><![CDATA[<p>公司的技术栈是SpringCloud+ZoomKeeper+RabbitMq+JPA+MongoDB，利用zk去做配置文件，rabbitmq做一些异步处理，持久层采用JPA(数据库的Mysql)，对于大部分都是查询的业务，数据是存在MongoDB中。</p><p>MongoDB是一个高性能、开源、无模式的文档型数据库，是当前NoSql数据库中比较热门的一种。 适合对大量或者无固定格式的数据进行存储，比如：日志、缓存等。对事物支持较弱，不适用复杂的多文档（多表）的级联查询。</p><p>MongoDB的适用场景：</p><ol><li>在应用服务器的日志记录</li><li>存储一些监控数据</li><li>应用不需要事务及复杂 join 支持</li><li>应用需要2000-3000以上的读写QPS</li><li>应用需要TB甚至 PB 级别数据存储</li><li>应用发展迅速，需要能快速水平扩展</li><li>应用要求存储的数据不丢失</li><li>应用需要99.999%高可用</li><li>应用需要大量的地理位置查询、文本查询</li></ol><p>下面就讲下SpringBoot利用MongoTemplate操作mongdb</p><h1 id="1-MongDB的安装"><a href="#1-MongDB的安装" class="headerlink" title="1. MongDB的安装"></a>1. MongDB的安装</h1><p>安装MongDB可以看<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-red-hat/">官网安装</a></p><p>英语不好的小伙伴可以看这个<a href="https://www.runoob.com/docker/docker-install-mongodb.html">安装</a></p><p>我是在centos7.0上安装的MongDB4.2，修改配置文件，加入用户和密码，下面的linux详细命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-0-15-centos ~]# docker pull mongo:4.2.6<br>Trying to pull repository docker.io/library/mongo ...<br>4.2.6: Pulling from docker.io/library/mongo<br>23884877105a: Pull complete<br>bc38caa0f5b9: Pull complete<br>2910811b6c42: Pull complete<br>36505266dcc6: Pull complete<br>a4d269900d94: Pull complete<br>5e2526abb80a: Pull complete<br>d3eece1f39ec: Pull complete<br>358ed78d3204: Pull complete<br>1a878b8604ae: Pull complete<br>dde03a2883d0: Pull complete<br>4ffe534daa34: Pull complete<br>f164ba21e17c: Pull complete<br>6494c387442c: Pull complete<br>Digest: sha256:c880f6b56f443bb4d01baa759883228cd84fa8d78fa1a36001d1c0a0712b5a07<br>Status: Downloaded newer image for docker.io/mongo:4.2.6<br>[root@VM-0-15-centos ~]# docker images<br>REPOSITORY TAG IMAGE ID CREATED SIZE<br>docker.io/mysql 5.7 2c9028880e58 9 days ago 447 MB<br>docker.io/tomcat 9.0.45-jdk8-adoptopenjdk-hotspot bcf990bea01a 10 days ago 341 MB<br>docker.io/mongo 4.2.6 3f3daf863757 13 months ago 388 MB<br>docker.io/rabbitmq 3.7.15-management f05c3eb3cf91 22 months ago 179 MB<br>[root@VM-0-15-centos ~]# docker run -td --name mongo -p 27017:27017 3f3daf863757 --auth<br>44d090fd4314773ac4362298eadf5928feda9c347b50dd0ff17c40c32cb00128<br>[root@VM-0-15-centos ~]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS<br>NAMES<br>44d090fd4314 3f3daf863757 &quot;docker-entrypoint...&quot; 4 seconds ago Up 3 seconds 0.0.0.0:27017-&gt;27017/tcp<br>[root@VM-0-15-centos ~]# docker exec -it mongo mongo admin<br>MongoDB shell version v4.2.6<br>connecting to: mongodb://127.0.0.1:27017/admin?compressors=disabled&amp;gssapiServiceName=mongodb<br>Implicit session: session &#123; &quot;id&quot; : UUID(&quot;cb9f0916-53bc-4781-aa95-4409477eb89b&quot;) &#125;<br>MongoDB server version: 4.2.6<br>Welcome to the MongoDB shell.<br>For interactive help, type &quot;help&quot;.<br>For more comprehensive documentation, see<br>http://docs.mongodb.org/<br>Questions? Try the support group<br>http://groups.google.com/group/mongodb-user<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">db.createUser(&#123; user:<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-built_in">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>,roles:[ &#123; role:<span class="hljs-string">&#x27;userAdminAnyDatabase&#x27;</span>, db: <span class="hljs-string">&#x27;admin&#x27;</span>&#125;,<span class="hljs-string">&quot;readWriteAnyDatabase&quot;</span>]&#125;);</span><br>Successfully added user: &#123;<br>&quot;user&quot; : &quot;admin&quot;,<br>&quot;roles&quot; : [<br>&#123;<br>&quot;role&quot; : &quot;userAdminAnyDatabase&quot;,<br>&quot;db&quot; : &quot;admin&quot;<br>&#125;,<br>&quot;readWriteAnyDatabase&quot;<br>]<br>&#125;<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">db.auth(<span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;123456&#x27;</span>)</span><br>1<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">^C</span><br>bye<br>[root@VM-0-15-centos ~]# docker restart 44d090fd4314<br>44d090fd4314<br>[root@VM-0-15-centos ~]# docker ps -a<br>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS<br>NAMES<br>44d090fd4314 3f3daf863757 &quot;docker-entrypoint...&quot; 47 minutes ago Up 3 seconds 0.0.0.0:27017-&gt;27017/tcp<br></code></pre></td></tr></table></figure><h1 id="2-添加Maven依赖"><a href="#2-添加Maven依赖" class="headerlink" title="2. 添加Maven依赖"></a>2. 添加Maven依赖</h1><p>只需要加入web启动器和mongdb依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 添加mongodb依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="3-添加配置文件"><a href="#3-添加配置文件" class="headerlink" title="3. 添加配置文件"></a>3. 添加配置文件</h1><p>我们提前在MongoDB中创建一个test库，并在下面的配置信息中加入刚刚配置的用户名和密码，需要注意的是密码需要用单引号</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">data:</span><br><span class="hljs-attr">mongodb:</span><br><span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">27017</span><br><span class="hljs-attr">database:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">option:</span><br><span class="hljs-attr">max-connection-idle-time:</span> <span class="hljs-number">1500</span><br><span class="hljs-attr">max-connection-per-host:</span> <span class="hljs-number">200</span><br><span class="hljs-attr">max-wait-time:</span> <span class="hljs-number">60000</span><br><span class="hljs-attr">max-connection-life-time:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">connect-timeout:</span> <span class="hljs-number">10000</span><br><span class="hljs-attr">socket-timeout:</span> <span class="hljs-number">60000</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;123456&#x27;</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">admin</span><br><span class="hljs-attr">authentication-database:</span> <span class="hljs-string">admin</span><br></code></pre></td></tr></table></figure><h1 id="4-编写实体类"><a href="#4-编写实体类" class="headerlink" title="4. 编写实体类"></a>4. 编写实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">5</span>/<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">10</span><br>\*/<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(collation = &quot;user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-meta">@Id</span><br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> Integer age;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String role;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(Integer id, Integer age, String name, String role)</span> &#123;<br><span class="hljs-built_in">this</span>.id = id;<br><span class="hljs-built_in">this</span>.age = age;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.role = role;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-编写DAO层"><a href="#5-编写DAO层" class="headerlink" title="5. 编写DAO层"></a>5. 编写DAO层</h1><p>SpringBoot已经为我们高度封装了MongoTemplate，类似RedisTemplate</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MongoTestDao</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br>/\*\*<br>\* 创建对象<br>\* <span class="hljs-meta">@param</span> user<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(User user)</span>&#123;<br>mongoTemplate.save(user);<br>&#125;<br>/\*\*<br>\* 根据id查询对象<br>\* <span class="hljs-meta">@param</span> id<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;name&quot;</span>).is(id));<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTemplate.findOne(query, User.class);<br><span class="hljs-keyword">return</span> user;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUserById</span><span class="hljs-params">(User user)</span>&#123;<br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(user.getId()));<br><span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>().set(<span class="hljs-string">&quot;age&quot;</span>, user.getAge()).set(<span class="hljs-string">&quot;name&quot;</span>, user.getName());<br><span class="hljs-comment">//更新查询结果中的第一条数据</span><br>mongoTemplate.updateFirst(query,update,User.class);<br>&#125;<br>/\*\*<br>\* 根据id删除<br>\* <span class="hljs-meta">@param</span> id<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(Integer id)</span>&#123;<br><span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;id&quot;</span>).is(id));<br>mongoTemplate.remove(query,User.class);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-测试用例"><a href="#6-测试用例" class="headerlink" title="6. 测试用例"></a>6. 测试用例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMongodbApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> MongoTestDao mongoTestDao;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>mongoTestDao.save(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(i,i,String.valueOf(i+<span class="hljs-number">1</span>),String.valueOf(i+<span class="hljs-number">100</span>)));<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;#####插入完毕！######&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>mongoTestDao.updateUserById(<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(i,i-<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>));<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;#####修改完毕！######&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteUser</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>mongoTestDao.deleteUserById(i);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;#####修改完毕！######&quot;</span>);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findUserById</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> mongoTestDao.findUserById(i);<br>System.out.println(i+<span class="hljs-string">&quot;-----------&quot;</span>+user);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;#####查询完毕！######&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过，放一张用MongDB Compass连接MongDB的图</p><p><img src="https://i.loli.net/2021/05/22/VfkQB98IWAoz1uF.png"></p><h1 id="7-GitHub代码"><a href="#7-GitHub代码" class="headerlink" title="7. GitHub代码"></a>7. GitHub代码</h1><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-mongodb">springboot-mongodb</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔04</title>
    <link href="/2021/04/28/%E9%9A%8F%E7%AC%9404/"/>
    <url>/2021/04/28/%E9%9A%8F%E7%AC%9404/</url>
    
    <content type="html"><![CDATA[<h1 id="关于多线程的几点补充"><a href="#关于多线程的几点补充" class="headerlink" title="关于多线程的几点补充"></a>关于多线程的几点补充</h1><p>在理解线程的状态时，需要先了解每个对象都有的——锁池和等待池这两个概念。</p><p>锁池就是一个线程A已经占用了对象锁，其他对象想要拿到该对象锁就必须等待A释放锁，这些想拿到对象锁的线程就会进入锁池，等待和竞争锁。</p><p>等待池：假设一个线程A调用了某个对象的wait()方法，线程A就会释放该对象的锁，进入到该对象的等待池。</p><p>从上面就可以看出锁池是里的线程都是竞争锁的，而等待池里的线程已经被释放锁，等待被唤醒，所以是不会竞争该对象的锁</p><p>我们先聊下sleep和wait的区别</p><p>Sleep是Thread的静态方法，线程休眠，不会让出锁，而是到时候就继续执行。可以在程序的任何地方进行使用。</p><p>Wait是Object的方法，线程释放锁，进入等待池，等待notify()或notifyAll()唤醒，进而进入锁池，竞争锁。Wait必须是在已经持有锁的情况下去调用释放锁，不然会抛出IllegalMonitorStateException，因为锁都没，何谈释放锁呢？</p><p>接下来就是wait，notify，notifyAll()的区别，上面已经说到，调用wait就是使线程释放当前锁进入等待池，那么也不是一直等待啊，当我们需要某个线程就可以调用notify()或者notifyAll()来使线程从等待池中解放出来，进入锁池去竞争锁。所以这里就有个很重要的知识点——调用notify()或者notifyAll()是不会立即获得锁，而是去锁池竞争锁，竞争锁的情况那就不一样了，可能直接就获得锁了，也可以进入等待队列。这个也是blocked和waiting状态的区别。</p><p>对于notify()和notifyAll()大同小异，notify()是随机唤醒一个等待池中的线程进入锁池，notify()是唤醒全部线程进入锁池。当然调用notify()随机唤醒会有优先级的控制，但只是概率，不是每次都是严格按照优先级，这个是凭cpu调度的。</p><h1 id="Redis五大基本数据类型的底层实现"><a href="#Redis五大基本数据类型的底层实现" class="headerlink" title="Redis五大基本数据类型的底层实现"></a>Redis五大基本数据类型的底层实现</h1><p><img src="https://i.loli.net/2021/05/06/uCMHktPwJqFr5Rh.png"></p><p>​ 据上表可知，String的编码可以是int,embstr,raw，当输入的数值可以转换为long，那就以int的类型进行存储。对于字符类型，redis底层并不是直接使用string，而是自己实现了一个简单的动态字符串sds，c语言的string是不记录自身长度是，但sds是记录的，这样就使得获取本身字符长度的操作时间复杂度从O(n)降到O(1)，对于emstr编码的范围是字符串字节小于等于39个字节，raw是大于39个字节，当然int编码也是可以在一定情况下转换为raw的，比如对int进行append操作。</p><p>​ List是一个有序的，可插入重复元素的链表结构，底层是ziplist或linkedlist。ziplist是一个压缩型链表，为节约内存而开发的，适用于长度较小的值，其是由连续空间组成(会保存每个值的长度信息，因此可依次找到各个值)，存取效率高，占用空间小，但由于地址空间是连续的，所以修改链表需要修改地址空间。LinkedList是一个无环的双向链表，修改效率高，但每个节点都需要保留前驱和后继，占用内存大。对于两种数据结构的选择，list是以保存的字符串元素大小都小于64个字节和元素数量小于512个作为标准，两个都满足就用ziplist，一个不满足就用linkedlist。</p><p>​ Hash底层由ziplist或hashtable实现，ziplist底层的压缩列表，对于存储hash的对象是把同一键值对的两个节点相互紧靠，key在前，value在后，先保存的就在ziplist的表头方向，后来的就在表尾。Hashtable底层是字典实现，每个键值对都使用一个字典键值对保存，字典的键为字符串对象，保存ket，字典的值也为字符串的对象，保存键值对的值。Ziplist和hashtable的选择，当list对象满足保存的字符串元素大小都小于64个字节和元素数量小于512个，就用ziplist，否则用hashtable。上面的两个值可以在redis的配置文件中的hash、-max-zaiplist-value和hash-max-ziplist-entries进行修改。</p><p>​ Set的编码可以为insert或hashtable，insert使用数组作为底层实现，不会出现重复元素。Hashtable底层还是字典，只是value为空而已。Insert和hashtable的选择，当所有的元素都是整数和元素个数小于512个，就用insert否则用hashtable。</p><p>​ ZSet的对象编码是ziplist或者skiplist(跳表)实现，zipList编码，每个集合元素使用相邻的两个压缩列表节点保存，一个保存元素成员，一个保存元素分值，然后从小到达排序。对于跳表应该是比较陌生的数据结构，它通过在每个节点中维持多个指向其他节点的指针，从而达到快速访问节点的目的，通俗点说就是添加了多重索引的结构。一个有序集合包含的元素数量比较多,又或者有序集合中元素的成员是比较长的字符串时,Redis就会使用跳跃表来作为有序集合健的底层实现。跳跃表实现由zskiplist和 zskiplistnode两个结构组成,其中zskiplist用于保存跳跃表信息(比如表头节点、表尾节点、长度),而zskiplistnode则用于表示跳跃表节点。Redis每个跳跃表节点的层高都是1至32之间的随机数。在同一个跳跃表中,多个节点可以包含相同的分值,但每个节点的成员对象必须是唯一的跳跃表中的节点按照分值大小进行排序,当分值相同时,节点按照成员对象的大小进行排序。</p><p>​ 对于具体使用ziplist还是skiplist作为zet的底层，当元素数量小于128和保存的所有元素的长度都小于64个字节，就是用ziplist，否则使用跳表实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔03</title>
    <link href="/2021/04/18/%E9%9A%8F%E7%AC%9403/"/>
    <url>/2021/04/18/%E9%9A%8F%E7%AC%9403/</url>
    
    <content type="html"><![CDATA[<h1 id="进程的上下文切换和线程的上下文切换的区别"><a href="#进程的上下文切换和线程的上下文切换的区别" class="headerlink" title="进程的上下文切换和线程的上下文切换的区别"></a>进程的上下文切换和线程的上下文切换的区别</h1><p>首先我们需要知道进程和线程的上下文切换做了什么：</p><ol><li>切换页目录以及使用新的地址空间</li><li>切换内核栈和硬件的上下文</li></ol><p>两种的区别就是进程有第一个操作，线程是没有的，第二个线程和进程都有</p><p>关于讨论两者的区别，需要知道进程和线程的在内存地址上的区别，进程是独立的地址空间，而进程里面的线程是连续的地址空间，同一个进程内的线程地址是共享的。</p><p>其实切换进程和线程最大的区别就是虚拟地址空间的改变。对于进程由于是独立的地址空间，每一个线程都是有自己的虚拟地址空间，一旦进行切换就需要切换虚拟地址空间；线程由于是地址空间是共享的，所以不需要切换虚拟地址空间。那么问题来了，什么是虚拟地址？为什么虚拟地址空间的切换是消耗性能的？</p><p>虚拟地址空间，是一个操作系统为每一个进程提供的一块独立的、私有的、地址连续的虚拟内存，但虚拟内存终究还是虚拟的，需要真正和物理地址挂钩，那么这样的技术就叫地址空间映射技术，把虚拟地址和物理地址建立关系。对于这种关系表就叫做页表，由于每一个进程都有自己的虚拟内存，所以每一个进程也有自己的页表，页表就是查询虚拟内存和物理内存关系的，但对于线程都是共享地址空间的，不涉及到空间地址的转换。</p><p>现在我们就可以回答为什么虚拟地址的切换是消耗性能的了，进程的切换首先就需要把虚拟地址转换为物理地址，就需要查询页表，查询是很慢的，所以就会需要一个cache来缓存常用的地址转换，当虚拟地址进行切换时，就需要更新页表的信息和缓存，此时查表就很慢，表现处理的就是应用程序的慢，但线程就不需要操作了。</p><p>总的来说就是，进程由于自身内存是独立的，所以当切换线程就涉及到地址的转变，在转变的时候导致慢的原因是页表查询cache失效，需要重新cache，这样就导致程序慢。线程由于共享内存地址，所以不存在这个问题。</p><h1 id="Mysql如何解决幻读问题"><a href="#Mysql如何解决幻读问题" class="headerlink" title="Mysql如何解决幻读问题"></a>Mysql如何解决幻读问题</h1><p>首先要知道Mysql的四类隔离级别：</p><ol><li>读未提交，会发生脏读</li><li>读已提交，不可重复读</li><li>可重复读，可能产生幻读</li><li>串读</li></ol><p>具体的意思我就不讲了，这里主要讲Mysql如何解决幻读问题，幻读就是事务A 按照一定条件进行数据读取，期间事务B 插入了相同搜索条件的新数据，事务A再次按照原先条件进行读取时，发现了事务B 新插入的数据。</p><p>首先要知道，我们在用SQL进行数据库操作时是有两种不同类型的读，一个是快照读，一个是当前读。</p><p>快照读就我们在执行select语句时生效，基于MVCC并发版本控制，它的底层其实也很简单就是有一个创建版本号字段和删除版本号字段，用户在进行查询时会带上一个自己拿到的版本号小于或等于当前版本号和删除版本号为空或者大于当前版本的参数。</p><p>当前读就是在数据库读取最新数据，insert,delete,update的操作默认就是当前读，还有就是当我们的select带上了共享锁lock in share model和独占锁for update，如果并发读写都是当前读级别，那就不会出现幻读问题，此时加上了next-key-lock，是记录锁和间隙锁的结合。利用索引，把列上键值范围分成了一些区间（左开右闭），加锁是根据查询条件封住满足条件的区间（即使记录不存在），使得这些区间无法被修改，实现了幻读的避免。</p><p><strong>如果select不加锁，自动适应MVCC，写却是当前读，就可能出现脏读</strong></p><h1 id="Mysql的Undo-log日志的理解"><a href="#Mysql的Undo-log日志的理解" class="headerlink" title="Mysql的Undo log日志的理解"></a>Mysql的Undo log日志的理解</h1><p>undo log，就是大家经常所说的回滚日志。</p><p>它里面记录的是对数据的回滚操作。当我们对数据库中的数据有变动操作的时候，为了可以回滚到数据被改动之前的版本，就把数据的变动过程的逆向操作给记录在undo log中。我们对数据库的查询查找是不会记录undo log的，只有数据库中的数据有变化的操作才会记录undo log。</p><p>我们执行一个insert语句，在undo log中就记录一个delete语句，用于删除掉刚插入的数据，以此来达到回滚到插入之前的状态；</p><p>我们执行了一个update语句，在undo log中也记录一个upate语句，只不过这个update语句的内容是把我们刚才执行update操作的数据内容给修改回去，以此达到回滚到数据修改之前的状态；</p><p>我们执行一个delete语句，在undo log中就记录一个insert语句，用于把刚才删除的数据再插入到数据库中，以此来达到回滚到删除之前的状态。</p><p>简而言之：undo log中记录的内容是如何把数据还原到变动之前的状态，根据这个日志中的记录，就可以把数据还原到上一个事务提交后的状态。</p><p>还用Undo Log来实现多版本并发控制(简称：MVCC)。Undo Log是为了实现事务的原子性。什么是事务的原子性，这里简单提一句：一个事务的所有操作要么全部成功，要么全部失败，不能只提交部分操作。在失败的时候回，需要回滚之前的部分操作，而这个回滚操作就是依赖于我们今天提到的undo log。从undo log里面去回滚数据到事务开启之前的状态。</p><p>事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发生了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。</p><p>而redolog是为了实现事务的持久性，要把所有对数据的修改，持久化到磁盘，只要事务提交成功了，不能因为重启、宕机等原因导致提交的数据丢失了，不见了。这里，把redo和undo两种log对照记一下。</p><p>事务一旦完成，该事务对数据库所做的所有修改都会持久的保存到数据库中。为了保证持久性，数据库系统会将修改后的数据完全的记录到持久的存储上。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔02</title>
    <link href="/2021/04/16/%E9%9A%8F%E7%AC%9402/"/>
    <url>/2021/04/16/%E9%9A%8F%E7%AC%9402/</url>
    
    <content type="html"><![CDATA[<h1 id="https实现原理"><a href="#https实现原理" class="headerlink" title="https实现原理"></a>https实现原理</h1><p>最近看的一篇面试总结，原作者写的有一丢丢问题，下面这篇讲的很清楚</p><p><a href="https://blog.csdn.net/u014756827/article/details/102851812?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&spm=1001.2101.3001.4242">深入理解https</a></p><p>在此之前，需要了解对称加密和非对称加密的原理和效率对比</p><p>对称加密，就是加密和解密用的<strong>同一把密钥</strong>，加密和解密速度快</p><p>非对称加密，加密用公钥，<strong>解密用密钥，公钥是公开的</strong>，但在解密的时候只有用相应的密钥才能解密，加密和解密速度慢。</p><p>https解决的http的三大问题：</p><ol><li>明文传输，裸奔</li><li>消息的完整性无法判断</li><li>通信身份可能被伪造</li></ol><p>基于以上三大问题，讲下https在进行传输的时候是如何解决的：</p><ol><li><p>C请求https域名，443端口，携带浏览器支持的hash算法和加密算法</p></li><li><p>S是有CA一对私钥和公钥，私钥是一定不能在网上直接传输的，所以把公钥和返回浏览器支持的hash算法和加密算法</p></li><li><p>C就要校验公钥的合法性，这个过程是浏览器内部的TSL完成，主要校验证数是否与域名匹配，是否到期，校验通过的话，就进入下一个步骤，没通过就会在C提示相应的信息</p></li><li><p>C随机生成一个X，通过公钥加密，传输给S，S进行私钥解密——<strong>唯一一次非对称加密</strong></p></li><li><p>后面的信息传输都是对称加密，因为X这个就是对称加密的密钥，巧妙的通过CA认证，<strong>实现非对称加密来传输对称加密密钥</strong></p></li></ol><p>如上1，3已经被解决，对于消息完整性，是通过数字签名实现，S通过浏览器支持的Hash算法和用私钥加密摘要信息发送给C，C通过公钥解析获得相应信息，对收到的原文进行在摘要信息匹配，一样则说明消息具有完整性。</p><h1 id="常见的网络攻击"><a href="#常见的网络攻击" class="headerlink" title="常见的网络攻击"></a>常见的网络攻击</h1><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>跨站脚本攻击，指的是攻击者通过页面输入恶意执行代码，比如嵌入JavaScript执行代码，发送到服务端，服务端没有进行过滤操作，就可能直接保存到数据库，页面刷新的内容直接从数据库里拿到，就会执行这段JavaScript代码，比如alert(“”)函数等等</p><p>原因：没有对用户输入的数据进行一个过滤和转义操作</p><p>解决方案：</p><ol><li><p>对重要的cookie设置httpOnly，防止用户直接通过document.cookie修改cookie</p></li><li><p>对用户的输入进行过滤和转移操作，取出恶意的执行代码</p><p>​</p></li></ol><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>跨站请求伪造，当用户成功登录信任的A系统，在未退出的情况下去请求未信任的B系统，假如B没有做CSRF攻击防御，B系统就会直接获取A系统里的cookie，然后直接去请求A系统的接口，达到未登录A系统而实现操作A系统的目的，从而进行破坏。</p><p>比如一个转账系统，用户在未关闭转装系统的同时去开启一个危险网站，网站自带获取cookie然后携带cookie向自己的账户进行转账。</p><p>解决方案：</p><ol><li>在A系统在请求头中假如Refere字段进行限制，对请求的IP进行限制</li><li>尽量使用POST，而不是GET</li><li>加入验证码</li><li>使用Token进行校验</li></ol><h2 id="XSRF"><a href="#XSRF" class="headerlink" title="XSRF"></a>XSRF</h2><p>服务端请求伪造，很多网站因为出于安全的考虑是通过放在公网的服务器去访问内网服务器，但如果没有增加安全措施，就会达到直接通过服务端实现访问公网服务器资源的功能。</p><p>原因：内网在接收请求的时候没有进行过滤和限制操作</p><p>解决方案：</p><ol><li><p>统一异常处理，攻击者无法通过状态码得知服务器的状态</p></li><li><p>禁用其他端口，只提供80，443，8080端口等</p></li><li><p>限制协议，只支持http,https协议</p></li><li><p>设置IP黑名单</p><p>​</p></li></ol><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>SQL注入也是常见的网络攻击，比如在登录的时候输入用户名时用or 1 &#x3D; 1这种恒等的条件进行拼接，若服务器没有进行预编译操作，那就直接拼接在登录的SQL上，从而绕过登录请求实现登录。</p><p>解决方案：</p><ol><li>数据库使用预编译，比如采用Mybatis的#进行就拼接操作，而不是$这种直接进行字符串拼接的操作</li><li>对前端传来的数据进行数据类型判断</li><li>存储过程，在数据库级别进行登录验证</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随笔01</title>
    <link href="/2021/04/13/%E9%9A%8F%E7%AC%9401/"/>
    <url>/2021/04/13/%E9%9A%8F%E7%AC%9401/</url>
    
    <content type="html"><![CDATA[<h1 id="ArrayList和LinkedList区别"><a href="#ArrayList和LinkedList区别" class="headerlink" title="ArrayList和LinkedList区别"></a>ArrayList和LinkedList区别</h1><p>对于这两种数据结构的基础比较，如，线程安全问题、底层结构，空间占用问题我就不多说了，网上很多文档写的很清楚了，这里我详细的讲下自己对ArrayList和LinkedList在数据的查询，增加，删除和修改上的性能差异：</p><p>要分析在三种情况下的差异，首先要清楚两种容器它的底层实现是什么，ArrayList底层是数组实现的，连续的地址内存空间，也就是带索引；LinkedList底层是双向链表，不是连续的内存空间，而且双向链表的每个节点都存放前驱，当前，后继节点信息。</p><ol><li>查询：一般就两种查询，查询某索引的元素和查询某元素的索引，比如查询第N个索引下的元素，这个毫无疑问是ArrayList快，因为它底层是数组，支持快速随机访问，时间复杂度是O(1)，LinkedList不是连续的，只能一个接着一个的去找，时间复杂度是O(n)。对于查询某元素的索引，两种容器就只能遍历了，效率是差不多的</li><li>插入，也分插入的位置，是头部，是中间，是末尾？此时ArrayList的连续的内存地址这个特点就变成劣势了，当插入到头部和中间部分，Arraylist就需要数组的copy或者扩容，效率是很低的，但插入到尾部，就可以直接插入（不考虑扩容）。对于LinkedList我想有数据结构基础的朋友都会直到每个节点的所存储的数据是什么，插入头部或者中部只需要修改下待插入节点的前驱和后继即可，插入尾部也只需直接插入即可，时间复杂度是O(1)。所以在插入的位置是头部和中部是，LinkedList凭借自身存储数据的特点拥有绝对的优势，在插入到尾部时两者性能差不多。</li><li>修改，我只讨论按索引修改的，不管位置如何对于ArrayList可以直接根据索引修改元素值。但对于LinkedList维护了首尾指针，修改首位时间复杂度是O(1)，对于中间的需要是用二分查找实现的，时间复杂度是O(logn)</li><li>删除：当删除指定索引的元素或者指定元素时，两者差别和插入类似，对于删除指定的索引元素在头部或者在中部，ArrayList就需要进行数组的迁移，时间复杂度和空间复杂度都很高，但删除指定的索引在末尾，就直接置空就行了。对于LinkedList需要遍历找到目标值，在修改前后的前驱和后继，但总体效率高于ArrayList，而且它维护了头尾指针，对于删除头尾的是很快的。</li></ol><p>总的来说，ArrayList由于底层是数组，所以查询快，但删除和插入慢。LinkedList是双向链表，查询慢，但删除和插入快。修改两者差异不大。</p><h1 id="单线程下对ArralList进行删除操作抛出并发修改异常分析"><a href="#单线程下对ArralList进行删除操作抛出并发修改异常分析" class="headerlink" title="单线程下对ArralList进行删除操作抛出并发修改异常分析"></a>单线程下对ArralList进行删除操作抛出并发修改异常分析</h1><p>单线程下可能很多人无法想象为什么也会抛出并发修改异常，使用list.remove(object)就会抛出该异常，所以当单线程需要删除元素时需要用迭代器的remove方法，二者的差异在哪？深入源码发现，抛出异常的条件是modCount和expectCount不相等，我们需要记住这个条件！点开Arraylist的remove发现它调用的是fastRemove，一进去就直接把modCount++，然后进行删除操作，直接把expectedCount挂一遍了，不抛异常才奇怪呢</p><p>接着进入迭代器的remove方法，发现它是先调用的Arraylist.remove，从上面我们就知道此时modCount肯定自增了，但接下来就把进行了expected &#x3D; modcount的操作，这就实现了两者相等，不抛出异常了。</p><h1 id="HashMap的数组长度为什么是2-n，初始大小为什么是16？"><a href="#HashMap的数组长度为什么是2-n，初始大小为什么是16？" class="headerlink" title="HashMap的数组长度为什么是2^n，初始大小为什么是16？"></a>HashMap的数组长度为什么是2^n，初始大小为什么是16？</h1><p>hash&amp;(table.length-1)其实本质上就是hash%table.length-1，只是位运算效率高于直接%，这个在前提length的长度为2的N次方下成立的，所以要求tabe的长度是2的N次方</p><p>对于初始长度为什么是16，这个官方也没给出结果，在阿里开发手册里，对于知道长度的map,需要指定初始容量大小，计算为大于给出数据的2^n，比如给出4 ，那就是8，给出7，也是8。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis必知必会</title>
    <link href="/2021/04/02/Redis%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2021/04/02/Redis%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2021/04/02/HcTdmkXUhQVpaNz.png"></p><p>Redis绝对是当下非常火热的一个NoSql数据库，在之前的博客中，我已经讲到了springboot集成redis的使用，今天在这里分享下Redis常问面试题</p><h1 id="1-为什么使用Redis？"><a href="#1-为什么使用Redis？" class="headerlink" title="1.为什么使用Redis？"></a>1.为什么使用Redis？</h1><p>在项目中使用Redis，主要考虑两个角度：性能和并发。如果只是为了分布式锁这些其他功能，还有其他中间件 Zookpeer 等代替，并非一定要使用 Redis。</p><p><strong>性能：</strong></p><p>如下图所示，我们在碰到需要执行耗时特别久，且结果不频繁变动的 SQL，就特别适合将运行结果放入缓存。这样，后面的请求就去缓存中读取，使得请求能够迅速响应。</p><p>特别是在秒杀系统，在同一时间，几乎所有人都在点，都在下单，执行的是同一操作——向数据库查数据。</p><p><img src="https://i.loli.net/2021/04/02/bIGELFasS2dhCP1.png"></p><p>根据交互效果的不同，响应时间没有固定标准。在理想状态下，我们的页面跳转需要在瞬间解决，对于页内操作则需要在刹那间解决。</p><p><strong>并发：</strong></p><p>如下图所示，在大并发的情况下，所有的请求直接访问数据库，数据库会出现连接异常。这个时候，就需要使用 Redis 做一个缓冲操作，让请求先访问到 Redis，而不是直接访问数据库。</p><p><img src="https://i.loli.net/2021/04/02/PnzoO35fYTwcK7C.png"></p><h1 id="2-Redis为什么快？"><a href="#2-Redis为什么快？" class="headerlink" title="2.Redis为什么快？"></a>2.Redis为什么快？</h1><p>Redis的速度非常的快，单机的Redis就可以支持每秒10几万的并发，相对于mysql来说，性能是mysql的几十倍。速度快的原因主要有：</p><ol><li>完全基于内存操作</li><li>C语言实现，优化过的数据结构，基于几种基础的数据结果，Redis做了大量的优化，性能极高</li><li>使用单线程，无上下文的切换成本（redis的单线程是指网络请求模块使用了一个线程，所以不需考虑并发安全性。但是对于需要依赖多个操作的复合操作来说，还是需要锁的，而且有可能是分布式锁）</li><li>基于非阻塞的IO多路复用机制</li></ol><p>对于非阻塞的多路IO复用机制，可以深入的去了解下，简单的说就是实现一个线程监控多个IO流，及时响应请求，举个栗子：</p><p>小明在 A 城开了一家快餐店店，负责同城快餐服务。小明因为资金限制，雇佣了一批配送员，然后小明发现资金不够了，只够买一辆车送快递。</p><p><strong>经营方式一</strong></p><p>客户每下一份订单，小明就让一个配送员盯着，然后让人开车去送。慢慢的小曲就发现了这种经营方式存在下述问题：</p><ul><li>时间都花在了抢车上了，大部分配送员都处在闲置状态，抢到车才能去送。</li><li>随着下单的增多，配送员也越来越多，小明发现快递店里越来越挤，没办法雇佣新的配送员了。</li><li>配送员之间的协调很花时间。</li></ul><p>综合上述缺点，小明痛定思痛，提出了经营方式二。</p><p><strong>经营方式二</strong></p><p>小明只雇佣一个配送员。当客户下单，小明按送达地点标注好，依次放在一个地方。最后，让配送员依次开着车去送，送好了就回来拿下一个。上述两种经营方式对比，很明显第二种效率更高。</p><p>在上述比喻中：</p><ul><li>每个配送员→每个线程</li><li>每个订单→每个 Socket(I&#x2F;O 流)</li><li>订单的送达地点→Socket 的不同状态</li><li>客户送餐请求→来自客户端的请求</li><li>明曲的经营方式→服务端运行的代码</li><li>一辆车→CPU 的核数</li></ul><p>于是有了如下结论：</p><ul><li>经营方式一就是传统的并发模型，每个 I&#x2F;O 流(订单)都有一个新的线程(配送员)管理。</li><li>经营方式二就是 I&#x2F;O 多路复用。只有单个线程(一个配送员)，通过跟踪每个 I&#x2F;O 流的状态(每个配送员的送达地点)，来管理多个 I&#x2F;O 流。</li></ul><p>类比到真实的线程模型：</p><p><img src="https://i.loli.net/2021/04/02/UwdoC85NJMgk2m3.png"></p><p>Redis-client 在操作的时候，会产生具有不同事件类型的 Socket。在服务端，有一段 I&#x2F;O 多路复用程序，将其置入队列之中。然后，文件事件分派器，依次去队列中取，转发到不同的事件处理器中。</p><p>目前支持I&#x2F;O多路复用的系统调用有<strong>select</strong>，<strong>pselect</strong>，<strong>poll</strong>，<strong>epoll</strong>等函数。I&#x2F;O多路复用就是通过一种机制<strong>一个进程可以监视多个描述符</strong>，一旦某个描述符读就绪或者写就绪，其能够通知应用程序进行相应的读写操作。</p><p><strong>多路I&#x2F;O复用机制</strong>与多进程和多线程技术相比系统开销小，系统不必创建进程&#x2F;线程，也不必维护这些进程&#x2F;线程，从而大大减小了系统的开销。</p><p>常见函数的特点如下：</p><ol><li><p>select函数：</p><ul><li>会修改传入的参数数组，这个对于一个需要调用很多次的函数，是非常不友好的。</li><li>有最大监听连接数1024个的限制</li><li>如果任何一个sock(I&#x2F;O stream)出现了数据，select没有返回具体是哪个返回了数据，需要采用轮询的方式去遍历获取</li><li>线程不安全（当你在一个线程中已经监听该socket，另一个线程想要将该socket关闭，则结果会不可预知）</li></ul></li><li><p>poll函数：</p><ul><li>去掉了1024的限制（使用链表搞定）</li><li>不再修改传入的参数数组</li><li>依然是线程不安全的</li></ul></li><li><p>epoll函数</p><ul><li><p>epoll不仅返回socket组里面数据，还可以确定具体哪个socket有数据</p></li><li><p>线程不安全</p><p>​</p></li></ul></li></ol><h1 id="Redis支持哪些数据类型，应用场景有哪些？"><a href="#Redis支持哪些数据类型，应用场景有哪些？" class="headerlink" title="Redis支持哪些数据类型，应用场景有哪些？"></a>Redis支持哪些数据类型，应用场景有哪些？</h1><p>redis支持五种数据类型作为其Value，redis的Key都是字符串类型的。</p><blockquote><p>redis没有直接使⽤C语⾔传统的字符串表示，⽽是⾃⼰实现的叫做简单动态字符串SDS的</p><p>抽象类型。C语⾔的字符串不记录⾃身的⻓度信息，⽽SDS则保存了⻓度信息，这样将获取字符串⻓度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串⻓度时所需的内存重分配次数。</p></blockquote><ul><li><strong>string</strong>：Rediz中字符串Value最大可为512M。可以用来做一些计数功能的缓存（也是实际工作中最常见的）</li><li><strong>list</strong>：简单的字符串列表，按照插入顺序排序，可以添加一个元素到列表的头部（左边）或尾部（右边），其底层实现是一个链表。可以实现一个简单的消息推送功能，做基于redis的分页功能等</li><li><strong>set</strong>：是一个字符串类型的无序集合。可以用来进行全局去重等。</li><li><strong>sorted set</strong>：是一个字符串类型的有序集合，给每一个元素一个固定的分数score来保存顺序。可以用来做排行榜应用或者进行范围查找等</li><li><strong>hash</strong>：键值对集合，是一个字符串类型的key和value的映射表，也就是说其存储的value是一个键值对（key—value）。可以用来存放一些具体特定结构的信息。</li></ul><p>般情况下，可以认为redis的支持的数据类型有上述五种，其底层数据结构包括：<strong>简单动态字符串，链表，字典，跳表，整数集合以及压缩列表。</strong></p><p>这篇文章讲了很多用redis实现的业务模型：</p><p><a href="https://blog.csdn.net/zzu_seu/article/details/106323114?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161709361516780265416508%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161709361516780265416508&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-106323114.pc_search_result_no_baidu_js&utm_term=redis%E7%9A%84%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">Redis五种数据结构和使用场景</a></p><h1 id="为什么Redis6-0之后又改用多线程？"><a href="#为什么Redis6-0之后又改用多线程？" class="headerlink" title="为什么Redis6.0之后又改用多线程？"></a>为什么Redis6.0之后又改用多线程？</h1><p>redis使用多线程并非是完全摒弃单线程，redis还是使⽤单线程模型来处理客户端的请求，只是使⽤多线程来处理数据的读写和协议解析，执⾏命令还是使⽤单线程。</p><p>这样做的目的是因为redis的性能瓶颈在于网络IO而非CPU，使用多线程能提升IO读写的效率，从而整体提高redis的性能。</p><h1 id="热key是什么？热key问题怎么解决？"><a href="#热key是什么？热key问题怎么解决？" class="headerlink" title="热key是什么？热key问题怎么解决？"></a>热key是什么？热key问题怎么解决？</h1><p>热key就是突然有<strong>几十万的请求去访问redis上的某个特定的key</strong>，那么这样会造成流量过于集中，达到物理网卡上限，从而导致这台redis的服务器宕机引发雪崩。</p><p><img src="https://i.loli.net/2021/04/02/RtPKjb9lgx8QE23.png"></p><p>针对热key的解决方案：</p><ol><li>提前把热key打散到不同的服务器上，降低压力</li><li>加入二级缓存，提前加载热key数据到内存中，如果redis宕机，走内存查询</li></ol><h1 id="缓存击穿、缓存穿透和缓存雪崩三连问"><a href="#缓存击穿、缓存穿透和缓存雪崩三连问" class="headerlink" title="缓存击穿、缓存穿透和缓存雪崩三连问"></a>缓存击穿、缓存穿透和缓存雪崩三连问</h1><p><strong>缓存击穿</strong></p><p>缓存击穿指的是单个key并发访问过高，过期时导致所有请求直接打到db上，这个和热key的问题比较类似，只是说的点<strong>在于key过期导致请求打到db上</strong>。</p><p><img src="https://i.loli.net/2021/04/02/tgPf8UqNDnQA4Xw.png"></p><p>解决方案：</p><ol><li><p>加锁更新，比如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写入缓存，再返回给用户，这样后⾯的请求就可以从缓存中拿到数据了。当然加锁会有点慢，但好比宕机强。</p></li><li><p>将过期时间组合写在value中，通过异步的⽅式不断的刷新过期时间，防⽌此类现象。</p></li></ol><p><strong>缓存穿透</strong></p><p>缓存穿透是指查询不存在缓存中的数据，每次请求都会打到DB，就像缓存不存在⼀样。</p><p><img src="https://i.loli.net/2021/04/02/zYXirowEVHNAbex.png"></p><p>针对这个问题，加⼀层布隆过滤器。布隆过滤器的原理是在你存⼊数据的时候，会通过散列函数将它映射为⼀个位数组中的K个点，同时把他们置为1。</p><p><img src="https://i.loli.net/2021/04/02/gl7DSthOTvB4dUk.png"></p><p>这样当⽤户再次来查询A，⽽A在布隆过滤器值为0，直接返回，就不会产⽣击穿请求打到DB了。</p><p>显然，使⽤布隆过滤器之后会有⼀个问题就是误判，因为它本身是⼀个数组，可能会有多个值落到同⼀个位置，那么理论上来说只要我们的数组⻓度够⻓，误判的概率就会越低，这种问题就根据实际情况来就好了。</p><p>对于布隆过滤器，下面这篇文章讲的很清楚：</p><p><a href="https://blog.csdn.net/madongyu1259892936/article/details/85267620">布隆过滤器</a></p><p><strong>缓存雪崩</strong></p><p>当某⼀时刻发⽣⼤规模的缓存失效的情况，⽐如你的缓存服务宕机了，会有⼤量的请求进来直接打到DB上，这样可能导致整个系统的崩溃，称为雪崩。雪崩和击穿、热key的问题不太⼀样的是，他是指⼤规模的缓存都过期失效了。</p><p><img src="https://i.loli.net/2021/04/02/tkv89MCsAH3c2SR.png"></p><p>针对缓存雪崩的几个解决方案：</p><ol><li>针对不同key设置不同的过期时间，避免同时过期</li><li>限流，如果redis宕机，可以限流，避免同时刻大量请求打崩db</li><li>二级缓存，同热key的方案</li></ol><h1 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略"></a>Redis的过期策略</h1><p><strong>惰性删除</strong></p><p>惰性删除指的是当我们查询key的时候才对key进⾏检测，如果已经达到过期时间，则删除。显然，他有⼀个缺点就是如果这些过期的key没有被访问，那么他就⼀直⽆法被删除，⽽且⼀直占⽤内存。</p><p><img src="https://i.loli.net/2021/04/02/yOUg7Z8sneljt5K.png"></p><p><strong>定期删除</strong></p><p>定期删除指的是redis每隔一段时间对数据库做一次检查，删除里面过期的key。由于不可能对所有key去做轮询删除，所以redis会每次随机取一些key去做检查和删除</p><h1 id="定期-惰性删除都没删除过期的key怎么办？"><a href="#定期-惰性删除都没删除过期的key怎么办？" class="headerlink" title="定期+惰性删除都没删除过期的key怎么办？"></a>定期+惰性删除都没删除过期的key怎么办？</h1><p>假设redis每次定期随机查询key的时候没有删掉，这些key也没做查询，就会导致key一直保存在redis里面无法被删除，这时候就会走到redis的内存淘汰机制。</p><ol><li>volatile-lru：从已设置过期的key中，移除最近最少时候的key进行淘汰</li><li>volatike-ttl：从已设置过期的key中，移除将要过期的key</li><li>volatile-random：从已设置过期时间的key随机选择key淘汰</li><li>allkeys-lru：从key中选择最近最少使用的进行淘汰</li><li>allkeys-rand：从key中随机选择key进行淘汰</li><li>noeviction：当内存达到阈值的时候，新写入操作报错</li></ol><h1 id="redis的持久化有哪些？有什么区别？"><a href="#redis的持久化有哪些？有什么区别？" class="headerlink" title="redis的持久化有哪些？有什么区别？"></a>redis的持久化有哪些？有什么区别？</h1><p>redis持久化分为RDB和AOF两种</p><p><strong>RDB(快照方式 snapshotting) 全量持久化</strong></p><p>RDB持久化可以手动执行也可以根据配置定期执行，它的作用是将某个时间点上的数据库状态保存到RDB⽂件中，RDB⽂件是⼀个压缩的⼆进制⽂件，通过它可以还原某个时刻数据库的状态。由于RDB⽂件是保存在硬盘上的，所以即使redis崩溃或者退出，只要RDB⽂件存在，就可以⽤它来恢复还原数据库的状态。</p><p>可以通过SAVE或者BGSAVE来生成RDB文件</p><p>SAVE命令会阻塞redis进程，直到RDB文件生成完毕，在进程阻塞期间，redis不能处理任何命令请求，这显然是不合适的。</p><p>BGSAVE则是会fork出⼀个⼦进程，然后由⼦进程去负责⽣成RDB⽂件，⽗进程还可以继续处理命令请求，不会阻塞进程。</p><p>在恢复大数据集时候，RDB相对于AOF要快</p><p><strong>AOF(append only file) 增量持久化</strong></p><p>AOF和RDB不同，AOF是通过保存redis服务器所执行的写命令来记录数据库状态的。</p><p>AOF通过追加、写入、同步三个步骤来实现持久化机制</p><ol><li>当AOF持久化处于激活状态，服务器执行写命令之后，写命令将会被追加append到aof_buf缓冲区的末尾</li><li>当服务器每结束一个事件循环之前，就会调用flushAppendOnlyFile函数决定是否要将aof_buf的内容保存到AOF文件中，可以通过配置appendfsync来决定</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">always ##aof\_buf内容写入并同步到AOF文件<br>everysec ##aof\_buf中内容写入到AOF文件，如果上次同步AOF文件距离现在超过1秒，则再次对AOF文件进行同步<br>no ##将aof\_buf内容写入到AOF文件，但是不会对AOF文件进行同步，同步时间由操作系统决定<br></code></pre></td></tr></table></figure><p>如果不设置，默认选项将会是everysec，因为always来说虽然最安全（只会丢失一次事件循环的写命令），但是性能较差，而everysec模式只不过可能丢失1秒钟的数据，而no模式的效率和everysec相仿，但是会丢失上次同步AOF文件之后的所有写命令数据。</p><h1 id="怎么实现Redis的高可用？"><a href="#怎么实现Redis的高可用？" class="headerlink" title="怎么实现Redis的高可用？"></a>怎么实现Redis的高可用？</h1><p><strong>主从架构</strong></p><p>主从模式是最简单的实现高可用的方案，核心就是主从同步。主从同步的原理如下：</p><ol><li>slave发送sync命令到master</li><li>master收到sync之后，执行bgsave，生成RDB全量文件</li><li>master把slave的写命令记录到缓存</li><li>bgsave执行完毕之后，发送RDB到slave、slave执行</li><li>master发送缓存中的写命令到slave，slave执行</li></ol><p><img src="https://i.loli.net/2021/04/02/YU1cidsvu9CZfSa.png"></p><p>这里从机发送的命令是sync，但在redis2.8版本之后就已经使用psync替代sync，因为sync非常消耗系统资源，psync效率更高。</p><p><strong>哨兵</strong></p><p>基于主从方案的确实很明显，假设master宕机，那么就不能写入数据，slave也就失去了作用，整个架构就不可用了，除非手动切换，主要原因就是没有自动故障转移机制。而哨兵（sentinel）的功能比单纯的主从架构全面的多，它具备自动故障转移、集群监控、消息通知等功能。</p><p><img src="https://i.loli.net/2021/04/02/kUWqxdRO5mazLlj.png"></p><p>哨兵可以同时监视多个主从服务器，并且在被监视的master下线时，自动将某个slave提升位master，然后由新的master继续接收命令。整个过程如下：</p><ol><li>初始化sentinel，将普通的redis代码替换成sentinel专业代码</li><li>初始化master字典和服务器信息，服务器信息主要保存ip:port，并记录实例的地址和ID</li><li>创建和master的两个连接，命令连接和订阅连接，并且订阅sentinel:hello频道</li><li>每隔10秒向master发送info命令，获取master和它下⾯所有slave的当前信息</li><li>当发现master有新的slave之后，sentinel和新的slave同样建⽴两个连接，同时每个10秒发送info命令，更新master信息</li><li>sentinel每隔1秒向所有服务器发送ping命令，如果某台服务器在配置的响应时间内连续返回⽆效回复，将会被标记为下线状态</li><li>选举出领头sentinel，领头sentinel需要半数以上的sentinel同意</li><li>领头sentinel从已下线的的master所有slave中挑选⼀个，将其转换为master</li><li>让所有的slave改为从新的master复制数据将原来的master设置为新的master的从服务器，当原来master重新回复连接时，就变成了新master的从服务器</li></ol><p>sentinel会每隔1秒向所有实例（包括主从服务器和其他sentinel）发送ping命令，并且根据回复判断是否已经下线，这种⽅式叫做主观下线。当判断为主观下线时，就会向其他监视的sentinel询问，如果超过半数的投票认为已经是下线状态，则会标记为客观下线状态，同时触发故障转移。</p><h1 id="Redis事务机制"><a href="#Redis事务机制" class="headerlink" title="Redis事务机制"></a>Redis事务机制</h1><p>**隔离性：**redis是单进程的程序，保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。所以redis的事务支持隔离性</p><p>redis会将一个事务中的所有命令序列化，然后按顺序执行。redis不可能在一个事务的执行过程中插入执行另一个客户端发出的请求。可以保证Redis将这些命令作为一个单独的隔离操作执行。</p><ol><li>服务端收到客户端请求，事务以MULTI开始</li><li>如果客户端正处于事务状态，则会把事务放⼊队列同时返回给客户端QUEUED，反之则直接执行这个命令</li><li>当收到客户端EXEC命令时，WATCH命令监视整个事务中的key是否有被修改，如果有则返回空回复到客户端表示失败，否则redis会遍历整个事务队列，执⾏队列中保存的所有命令，最后返回结果给客户端</li></ol><p>WATCH的机制本身是⼀个CAS的机制，被监视的key会被保存到⼀个链表中，如果某个key被修改，那么REDIS_DIRTY_CAS标志将会被打开，这时服务器会拒绝执⾏事务。</p><p>解释下：</p><p>MULTI：标记一个事务块的开始</p><p>EXEC：执行所有事务块内的命令</p><p>DISCARD：取消事务，放弃执行事务块的所有命令</p><p>UNWATCH：取消WATCH命令对所有key的监视</p><p>WATCH key [key…] ：监视一个（或多个）key，如果在事务执行之前这个（或这些）key被其他命令所改动，那么事务将被打断</p><p>需要注意的是<strong>redis的事务不支持回滚操作</strong>，redis以 MULTI 开始一个事务，然后将多个命令入队到事务中，最后由 EXEC 命令触发事务，一并执行事务中的所有命令。只有当被调用的redis命令有语法错误时，这条命令才会执行失败，或者对某个键执行不符合其数据类型的操作，但是应该在将命令入队列的时候就应该并且能够发现这些问题，所以redis的事务不支持进行回滚操作。</p><h1 id="redis缓存与数据库一致性问题"><a href="#redis缓存与数据库一致性问题" class="headerlink" title="redis缓存与数据库一致性问题"></a>redis缓存与数据库一致性问题</h1><p><strong>不一致原因</strong></p><p>不管是先写库，再删除缓存；还是先删缓存，再写库，都有可能出现数据不一致的情况<br>因为写和读是并发的，没法保证顺序，如果删了缓存，还没有来得及写库，另一个线程就来读取，发现缓存为空，则去数据库中读取数据写入缓存，此时缓存中为脏数据。如果先写了库，再删除缓存前，写库的线程宕机了，没有删除掉缓存，则也会出现数据不一致情况。<br>如果是redis集群，或者主从模式，写主读从，由于redis复制存在一定的时间延迟，也有可能导致数据不一致。</p><p><strong>优化思路：</strong></p><p><strong>双删+超时</strong></p><p>在写库前后都进行redis.del(key)操作，并且设定合理的超时时间。这样最差的情况是在超时时间内存在不一致，当然这种情况极其少见，可能的原因就是服务宕机。此种情况可以满足绝大多数需求。<br>当然这种策略要考虑redis和数据库主从同步的耗时，所以在第二次删除前最好休眠一定时间，比如500毫秒，这样毫无疑问又增加了写请求的耗时。</p><p><strong>异步淘汰缓存</strong></p><p>通过读取binlog的方式，异步删除缓存</p><p><img src="https://i.loli.net/2021/04/02/Catg21HDkfwq9Nc.png"></p><p>好处：业务代码侵入性低，将缓存与数据库不一致的时间尽可能缩小。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring必知必会</title>
    <link href="/2021/03/26/Spring%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2021/03/26/Spring%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring中用到了哪些设计模式？"><a href="#Spring中用到了哪些设计模式？" class="headerlink" title="Spring中用到了哪些设计模式？"></a>Spring中用到了哪些设计模式？</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a><strong>单例模式</strong></h2><p>Spring中的Bean默认情况下都是单例的。bean被声明为单例的时候，在处理多次请求的时候在Spring容器里只实例化出一个bean，后续的请求都公用这个对象，这个对象会保存在一个map里面。当有请求来的时候会先从缓存(map)里查看有没有，有的话直接使用这个对象，没有的话才实例化一个新的对象，所以这是个单例的。但是对于原型(prototype)bean来说当每次请求来的时候直接实例化新的bean，没有缓存以及从缓存查的过程。</p><ul><li><p>所以单例的bean只有第一次创建新的bean后面就会复用bean，所以不会频繁创建对象。</p></li><li><p>原型的bean每次都会新创建</p></li></ul><p><strong>单例bean的优势：</strong></p><ol><li>减少了新生成实例的消耗 新生成实例消耗包括两方面，首先，Spring会通过反射或者cglib来生成bean实例这都是耗性能的操作，其次给对象分配内存也会涉及复杂算法</li><li>减少jvm垃圾回收 由于不会给每个请求都新生成bean实例，所以自然回收的对象少了</li><li>可以快速获取到bean 因为单例的获取bean操作除了第一次生成之外其余的都是从缓存里获取的所以很快</li></ol><p><strong>单例bean的劣势：</strong></p><p>单例的bean一个很大的劣势就是他不能做到线程安全！！！，由于所有请求都共享一个bean实例，所以这个bean要是有状态的一个bean的话可能在并发场景下出现问题，有状态的Bean，多线程环境下不安全，那么适合用Prototype原型模式。Prototype: 每次对bean的请求都会创建一个新的bean实例。</p><p>总的来说Spring把bean默认设计成单例，就是为了<strong>提高性能！</strong></p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>这篇博文讲的不错，贴个链接：</p><p><a href="https://blog.csdn.net/u013521220/article/details/107374259">Spring中用到了哪些设计模式？</a></p><h1 id="Spring的IOC"><a href="#Spring的IOC" class="headerlink" title="Spring的IOC"></a>Spring的IOC</h1><p><a href="https://blog.csdn.net/zhangcongyi420/article/details/89419715">Spring的IOC 实现原理</a></p><p>简单来说，IOC 叫做控制反转，指的是通过Spring来管理对象的创建、配置和生命周期，这样相当于把控制权交给了Spring，不需要⼈⼯来管理对象之间复杂的依赖关系，这样做的好处就是解耦。在Spring里面，主要提供了 BeanFactory 和 ApplicationContext 两种 IOC 容器，通过他们来实现对 Bean 的管理。</p><h1 id="Spring的AOP"><a href="#Spring的AOP" class="headerlink" title="Spring的AOP"></a>Spring的AOP</h1><p><a href="https://blog.csdn.net/moreevan/article/details/11977115/">Spring AOP 实现原理</a></p><p>简单的来说，AOP 叫做面向切面编程，他是⼀个编程范式，⽬的就是提高代码的模块性。Srping AOP 基于动态代理的方式实现，如果是实现了接⼝的话就会使用 JDK 动态代理，反之则使用 CGLIB 代理，Spring中 AOP的应用主要体现在 事务、日志、异常处理等方面，通过在代码的前后做⼀些增强处理，可以实现对业务逻辑的隔离，提高代码的模块化能力，同时也是解耦。Spring主要提供了 Aspect 切面、JoinPoint 连接点、PointCut 切入点、Advice 增强等实现方式。</p><p>AOP的使用，我在之前的博客也写到，这里贴个链接：</p><p><a href="https://luffy997.github.io/2021/01/06/SpringBoot%E4%B9%8BAOP%E7%9A%84%E4%BD%BF%E7%94%A8/">SpringBoot之AOP的使用</a></p><h1 id="JDK动态代理和CGLIB代理有什么区别？"><a href="#JDK动态代理和CGLIB代理有什么区别？" class="headerlink" title="JDK动态代理和CGLIB代理有什么区别？"></a>JDK动态代理和CGLIB代理有什么区别？</h1><p>JDK 动态代理主要是针对类实现了某个接口，AOP 则会使用 JDK 动态代理。他基于反射的机制实现，生成⼀个实现同样接口的⼀个代理类，然后通过重写方法的方式，实现对代码的增强。</p><p>而如果某个类没有实现接口，AOP 则会使⽤ CGLIB 代理。他的底层原理是基于 asm 第三方框架，通过修改字节码生成⼀个子类，然后重写父类的方法，实现对代码的增强。</p><h1 id="Spring的AOP和Aspectj-AOP的区别"><a href="#Spring的AOP和Aspectj-AOP的区别" class="headerlink" title="Spring的AOP和Aspectj AOP的区别"></a>Spring的AOP和Aspectj AOP的区别</h1><p>Spring AOP 基于动态代理实现，属于运行时增强。</p><p>AspectJ 则属于编译时增强，主要有3种方式：</p><ol><li><p>编译时织⼊：指的是增强的代码和源代码我们都有，直接使⽤ AspectJ 编译器编译就行了，编译之后⽣成⼀个新的类，他也会作为⼀个正常的 Java 类装载到JVM。</p></li><li><p>编译后织⼊：指的是代码已经被编译成 class ⽂件或者已经打成 jar 包，这时候要增强的话，就是</p><p>编译后织入，比如你依赖了第三方的类库，⼜想对他增强的话，就可以通过这种方式。</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">weaveDependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">weaveDependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">weaveDependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">weaveDependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">weaveDependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">weaveDependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>加载时织入：指的是在 JVM 加载类的时候进⾏织⼊。</li></ol><p>总结下来的话，就是 Spring AOP 只能在运行时织⼊，不需要单独编译，性能相比 AspectJ 编译织⼊的⽅式慢，而AspectJ 只⽀持编译前后和类加载时织⼊，性能更好，功能更加强大。</p><h1 id="FactoryBean和BeanFactory有什么区别？"><a href="#FactoryBean和BeanFactory有什么区别？" class="headerlink" title="FactoryBean和BeanFactory有什么区别？"></a>FactoryBean和BeanFactory有什么区别？</h1><p>BeanFactory是Bean的工厂，ApplicationContext的父类，IOC容器的核心，负责生产和管理Bean对象。</p><p>FactoryBean是Bean，可以通过实现Factory接口定制实例化Bean的逻辑，通过代理一个Bean对象，对方法前后做一些操作。</p><h1 id="SpringBean的生命周期"><a href="#SpringBean的生命周期" class="headerlink" title="SpringBean的生命周期"></a>SpringBean的生命周期</h1><p>SpringBean 生命周期简单概括为4个阶段：</p><ol><li><p>实例化，创建一个Bean对象</p></li><li><p>填充属性，为属性赋值</p></li><li><p>初始化</p><ul><li>如果实现类xxxAware接口，通过不同类型的Aware接口拿到Spring容器的资源</li><li>如果实现了BeanPostProcessor接口，则会回调该接口的postProcessBeforeInitialization和postProcessAfterInitialization方法</li><li>如果配置了init-method方法，则会执行init-method配置的方法</li></ul></li><li><p>销毁</p><ul><li><p>容器关闭后，如果Bean实现了DisposableBean接口，则会回调该接口的destory方法</p></li><li><p>如果配置了destory-method方法，则会执行destory-method配置的方法</p><p>​</p></li></ul></li></ol><p><img src="https://i.loli.net/2021/03/25/olSnIia4xpgN2zP.jpg"></p><p><a href="https://www.jianshu.com/p/1dec08d290c1">请别再问Spring Bean的生命周期了！</a></p><h1 id="Spirng是怎么解决循环依赖的"><a href="#Spirng是怎么解决循环依赖的" class="headerlink" title="Spirng是怎么解决循环依赖的"></a>Spirng是怎么解决循环依赖的</h1><p>首先，Spring解决循环依赖有两个前提条件：</p><ol><li>不全是构造器方式的循环依赖</li><li>必须是单例</li></ol><p>基于上面的问题，我们知道Bean的生命周期，本质上解决循环依赖问题的就是三级缓存，通过三级缓存提前拿到未初始化的对象。</p><p>第一级缓存：用来保存实例化、初始化都完成的对象</p><p>第二级缓存：用来保存实例化完成，但未初始化完成的对象</p><p>第三级缓存：用来保存一个对象工厂，提供一个匿名内部类，用于创建二级缓存中的对象</p><p><img src="https://i.loli.net/2021/03/26/qLdW6vIhZFgxinD.jpg"></p><p>假设一个简单的循环依赖场景，A、B互相依赖。</p><p><img src="https://i.loli.net/2021/03/26/VMi1J7zj5NBHOdh.jpg"></p><p>A对象的创建过程：</p><ol><li>创建对象A，实例化的时候把A对象工厂放入三级缓存</li></ol><p><img src="https://i.loli.net/2021/03/26/HS8Wuqzco6324hs.jpg"></p><ol><li><p>A注入属性时，发现依赖B，转而去实例化B</p></li><li><p>同样创建对象B，注入属性时发现依赖A，一次从一级到三级缓存查询A，从三级缓存通过对象工厂拿到A，把A放入二级缓存，同时删除三级缓存中的A，此时，B已经实例化并且初始化完成，把B放入一级缓存。</p><p><img src="https://i.loli.net/2021/03/26/z4xug2cRHAZdP9C.jpg"></p></li><li><p>接着继续创建A，顺利从一级缓存拿到实例化且初始化完成的B对象，A对象创建也完成，删除二级缓存中的A，同时把A放入一级缓存</p></li><li><p>最后，一级缓存中保存着实例化、初始化都完成的A、B对象</p><p><img src="https://i.loli.net/2021/03/26/lmjHCGcTw2Fqyxp.jpg"></p></li></ol><p>因此，由于把实例化和初始化的流程分开了，所以如果都是用构造器的化，就没法分离这个操作，所以都是构造器的话就无法解决循环依赖 的问题了。</p><p>下面对上面的做一些补充说明：</p><ol><li><p>创建对象A，实例化的时候把A对象工厂放入三级缓存，这里为啥直接放入第三级缓存，因为A既没有实例化完成，也没用初始化完成，只能放入三级缓存（一二级都要实例化完成），下面是源码：</p><p><img src="https://i.loli.net/2021/03/26/X4YAUF9jI5evphr.png"></p></li><li><p>为什么第三级缓存要使用ObjectFactory？</p><p>如果仅仅是解决循环依赖问题，使用二级缓存就可以了，但是如果对象实现了AOP，那么注入到其他bean的时候，并不是最终的代理对象，而是原始的。这时就需要通过三级缓存的ObjectFactory才能提前产生最终的需要代理的对象。</p><p><img src="https://i.loli.net/2021/03/26/oUlnZaJRXNsV5yG.png"></p><p>​</p><ol><li><p>什么时候将Bean的引用提前暴露给第三级缓存的ObjectFactory持有？时机就是在第一步实例化之后，第二步依赖注入之前，完成此操作。</p><p><img src="https://i.loli.net/2021/03/26/BtaOd4SX1HmlnMk.png"></p><p>​</p><p>​</p></li><li><p>循环依赖问题在Spring中主要有三种情况：</p><ul><li>通过构造方法进行依赖注入时产生的循环依赖问题。</li><li>通过setter方法进行依赖注入且是在多例（原型）模式下产生的循环依赖问题。</li><li>通过setter方法进行依赖注入且是在单例模式下产生的循环依赖问题。</li></ul><p>在Spring中，只有第（3）种方式的循环依赖问题被解决了，其他两种方式在遇到循环依赖问题时都会产生异常。其实也很好解释：</p><p>第（1）种构造方法注入的情况下，在new对象的时候就会堵塞住了，其实也就是”先有鸡还是先有蛋“的历史难题。</p><p>第（2）种setter方法（多例）的情况下，每一次getBean()时，都会产生一个新的Bean，如此反复下去就会有无穷无尽的Bean产生了，最终就会导致OOM问题的出现。</p></li></ol></li></ol><p>参考文章：</p><p><a href="https://blog.csdn.net/a745233700/article/details/110914620?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_utm_term-0&spm=1001.2101.3001.4242">Spring如何解决循环依赖问题</a></p><h1 id="为什么要三级缓存？二级不行吗？"><a href="#为什么要三级缓存？二级不行吗？" class="headerlink" title="为什么要三级缓存？二级不行吗？"></a>为什么要三级缓存？二级不行吗？</h1><p>不可以，主要是为了生成代理对象。</p><p>因为三级缓存中放的是生成具体对象的匿名内部类，他可以⽣成代理对象，也可以是普通的实例对象。</p><p>使⽤三级缓存主要是为了保证不管什么时候使用的都是⼀个对象。</p><p>假设只有⼆级缓存的情况，往二级缓存中放的显示⼀个普通的Bean对象， BeanPostProcessor 去⽣成</p><p>代理对象之后，覆盖掉⼆级缓存中的普通Bean对象，那么多线程环境下可能取到的对象就不⼀致了。</p><p><img src="https://i.loli.net/2021/03/26/c6uSjZOahlrVA2J.jpg"></p><h1 id="Spring事务传播机制有哪些"><a href="#Spring事务传播机制有哪些" class="headerlink" title="Spring事务传播机制有哪些"></a>Spring事务传播机制有哪些</h1><ol><li>PROPAGATION_REQUIRED：如果当前没有事务，就创建⼀个新事务，如果当前存在事务，就加</li></ol><p>⼊该事务，这也是通常我们的默认选择。</p><ol><li>PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。</li><li>PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则按</li></ol><p>REQUIRED属性执行。</p><ol><li>PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务</li></ol><p>挂起。</p><ol><li>PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</li><li>PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果当前不</li></ol><p>存在事务，就抛出异常。</p><ol><li>PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当前不存</li></ol><p>在事务，就以非事务执行。</p><h1 id="SpringBoot启动流程"><a href="#SpringBoot启动流程" class="headerlink" title="SpringBoot启动流程"></a>SpringBoot启动流程</h1><ol><li>准备环境，根据不同的环境创建不同的Environment</li><li>准备、加载上下文，为不同的环境选择不同的Spring Context，然后加载资源，配置Bean</li><li>初始化，这个阶段刷新Spring Context，启动应用</li><li>最后结束流程</li></ol><p><img src="https://i.loli.net/2021/03/26/jua6whBdD5KreoP.png"></p><p>贴一篇讲解Spring启动相关注解的博文：</p><p><a href="https://blog.csdn.net/u014352080/article/details/102716468">SpringBoot启动流程及其原理</a></p><h1 id="Spring中的Controller、Service、Dao是不是线程安全的？"><a href="#Spring中的Controller、Service、Dao是不是线程安全的？" class="headerlink" title="Spring中的Controller、Service、Dao是不是线程安全的？"></a>Spring中的Controller、Service、Dao是不是线程安全的？</h1><p>对于Bean之前开篇也已经讲到：</p><p>原型Bean</p><p>对于原型Bean,每次创建一个新对象，也就是线程之间并不存在Bean共享，自然是不会有线程安全的问题。</p><p><strong>单例Bean</strong></p><p>对于单例Bean,所有线程都共享一个单例实例Bean,因此是存在资源的竞争。</p><p>如果单例Bean,是一个无状态Bean，也就是线程中的操作不会对Bean的成员执行查询以外的操作，那么这个单例Bean是线程安全的。比如Spring mvc 的 Controller、Service、Dao等，这些Bean大多是无状态的，只关注于方法本身。</p><p><strong>spring单例，为什么controller、service和dao确能保证线程安全？</strong></p><p>Spring中的Bean默认是单例模式的，框架并没有对bean进行多线程的封装处理。</p><p>实际上大部分时间Bean是无状态的（比如Dao） 所以说在某种程度上来说Bean其实是安全的。</p><p>但是如果Bean是有状态的 那就需要开发人员自己来进行线程安全的保证，最简单的办法就是改变bean的作用域 把 “singleton”改为’‘protopyte’ 这样每次请求Bean就相当于是 new Bean() 这样就可以保证线程的安全了。</p><ul><li>有状态就是有数据存储功能</li><li>无状态就是不会保存数据 　　 controller、service和dao层本身并不是线程安全的，只是如果只是调用里面的方法，而且多线程调用一个实例的方法，会在内存中复制变量，这是自己的线程的工作内存，是安全的。</li></ul><p>对于任何无状态单例都是线程安全的</p><p><strong>@Controller @Service是不是线程安全的?</strong></p><p>默认配置下不是的，因为默认情况下@Controller没有加上@Scope，没有加@Scope就是默认值singleton，单例的。意思就是系统只会初始化一次Controller容器，所以每次请求的都是同一个Controller容器，当然是非线程安全的。</p><p>这里写了个测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Contrller 默认单例分析测试<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">26</span> <span class="hljs-number">14</span>:<span class="hljs-number">54</span><br>\*/<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Scope(value = &quot;singleton&quot;)</span> <span class="hljs-comment">//加上@Scope注解，他有2个取值：单例-singleton 多实例-prototype</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">var</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">staticVar</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>ThreadLocal&lt;Long&gt; t1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Long&gt;();<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> User user;<br><span class="hljs-meta">@Value(&quot;$&#123;test.val&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> testVal;<br><span class="hljs-meta">@GetMapping(&quot;/testVal01&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//var随着请求次数，进行+1</span><br>System.out.println(<span class="hljs-string">&quot;普通变量var:&quot;</span> + (++<span class="hljs-keyword">var</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通变量var:&quot;</span>+<span class="hljs-keyword">var</span>;<br>&#125;<br><span class="hljs-meta">@GetMapping(&quot;/testVal02&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//发现每次请求都是线程安全的</span><br>System.out.println(<span class="hljs-string">&quot;普通变量var：&quot;</span> + (++<span class="hljs-keyword">var</span>));<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通变量var：&quot;</span>+<span class="hljs-keyword">var</span>;<br>&#125;<br><span class="hljs-meta">@GetMapping(&quot;/testVal03&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//static的staticVar还是会随着请求而+1，线程不安全</span><br>System.out.println(<span class="hljs-string">&quot;普通变量var:&quot;</span> + (++<span class="hljs-keyword">var</span>)+ <span class="hljs-string">&quot;---静态变量staticVar:&quot;</span> + (++staticVar));<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通变量var:&quot;</span> + <span class="hljs-keyword">var</span> + <span class="hljs-string">&quot;静态变量staticVar:&quot;</span> + staticVar;<br>&#125;<br><span class="hljs-meta">@GetMapping(&quot;/testVal04&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>t1.set(<span class="hljs-number">1L</span>);<br>System.out.println(<span class="hljs-string">&quot;先取一下user对象中的值：&quot;</span>+user.getAge()+<span class="hljs-string">&quot;----&gt;&quot;</span>+user.hashCode());<br>user.setAge(<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;普通变量var:&quot;</span> + (++<span class="hljs-keyword">var</span>) + <span class="hljs-string">&quot;===静态变量staticVar:&quot;</span> + (++staticVar) + <span class="hljs-string">&quot;===配置变量testInt:&quot;</span> + (++testVal)<br>+ <span class="hljs-string">&quot;===ThreadLocal变量tl:&quot;</span> + t1.get()+<span class="hljs-string">&quot;===注入变量user:&quot;</span> + user.getAge());<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;普通变量var:&quot;</span> + <span class="hljs-keyword">var</span> + <span class="hljs-string">&quot;,静态变量staticVar:&quot;</span> + staticVar + <span class="hljs-string">&quot;,配置读取变量testInt:&quot;</span> + testVal + <span class="hljs-string">&quot;,ThreadLocal变量tl:&quot;</span><br>+ t1.get() + <span class="hljs-string">&quot;注入变量user:&quot;</span> + user.getAge();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>启动测试，调用第一个接口，发现普通变量的值会随着请求次数的增加而+1，所以是线程不安全的</p><p>但我们加上@scope注解时，让它不走默认的singleton，而是走原型，启动程序，发现普通变量的值不会会随着请求次数的增加而+1，现在看来没有出现线程不安全的情况，那我们继续测试，假如static变量，我们知道类加载是懒加载机制，在准别阶段就会对static变量进行初始化，后面就不管了，我们启动程序发现，static变量会随着请求次数的增加而+1，所以加了@scope注解并不一定是线程安全的！</p><p>这里就引入了TheadLocal，为每一个线程创建一个副本，实现线程的上下文传递同一个对象，隔离了多线程之间数据共享的问题，所以启动程序会发现t1变量是线程安全的，但static和User对象都是线程不安全的。</p><p>TestController 是每次请求的时候都初始化了一个对象，但是静态变量始终是只有一份的，而且这个注入的user对象也是只有一份的。静态变量只有一份这是当然的咯，那么有没有办法让user对象可以每次都new一个新的呢？当然可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">26</span> <span class="hljs-number">15</span>:<span class="hljs-number">05</span><br>\*/<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@Scope(value = &quot;prototype&quot;)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">user</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在注入IOC容器的时候，加入@scope，把它设置成原型即可，测试程序发现User的hashcode是不一样的，每次赋值前取user中的变量值也都是默认值0。</p><p>总结下：</p><ol><li>在@Controller&#x2F;@Service等容器中，默认情况下，scope是singleton的，是线程不安全的</li><li>尽量不要在@Controller&#x2F;@Service等容器中定义静态变量，不论是单例还是多实例，因为都不能保证线程安全</li><li>默认注入的Bean对象，在不设置scope的时候也是线程不安全的</li><li>一定要定义变量的话，用TheadLocal进行封装，来保证线程安全</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程必知必会</title>
    <link href="/2021/03/24/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2021/03/24/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="进程和线程的联系和区别"><a href="#进程和线程的联系和区别" class="headerlink" title="进程和线程的联系和区别"></a>进程和线程的联系和区别</h1><p>**进程：**是程序在执行中进行资源分配和调度的基本单位</p><p><strong>线程：</strong> 是进程的进一步划分，是进程的一个执行体，更小的独立运行的基本单位，亦称轻量级线程</p><p>举个栗子：</p><p>我们在使用QQ的时候假设是一个进程，那我们使用QQ的发短信，发文件，发说说等功能就可以说是线程。</p><p>进程和线程的区别：</p><ul><li><p>进程是独立的地址空间，但同一个进程内的线程共享本进程的地址空间</p></li><li><p>同一进程的线程共享资源比如CPU，内存等等，但进程之间是相互独立的</p></li><li><p>一个进程崩溃后，在保护模式下不会对其他进程产生影响</p></li><li><p>一个线程崩溃整个进程都死掉，所以多进程要比多线程要健壮</p></li><li><p>进程可以独立运行，且每个独立的进程有一个程序运行的入口、顺序执行序列和程序入口</p></li><li><p>线程不能独立执行，必须依存在应用程序中，由应用程序提供多个线程的执行控制，线程是处理器调度的基本单位，但进程不是</p></li><li><p>两者都支持并发执行。进程切换时，消耗的资源大，效率高。所以涉及到频繁的切换时，使用线程要好于进程。如果同时要求进行并且又要共享某些变量的并发操作，就只能用线程（进程之间是想独立的）</p><p>​</p></li></ul><h1 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h1><p>内容摘录自：<a href="https://zhuanlan.zhihu.com/p/58966050">https://zhuanlan.zhihu.com/p/58966050</a></p><p><img src="https://i.loli.net/2021/03/24/iMAe6TZCO5poaN2.jpg" alt="v2-3640b7f86a072bc188199aa8bb76c271\_720w.jpg"></p><p>下面详细说明下，线程共有6种状态：</p><p>new，runnable，blocked，waiting，timed waiting，terminated</p><p>1，当进入synchronized同步代码块或同步方法时，且没有获取到锁，线程就进入了blocked状态，直到锁被释放，重新进入runnable状态</p><p>2，当线程调用wait()或者join时，线程都会进入到waiting状态，当调用notify或notifyAll时，或者join的线程执行结束后，会进入runnable状态</p><p>3，当线程调用sleep(time)，或者wait(time)时，进入timed waiting状态，</p><p>当休眠时间结束后，或者调用notify或notifyAll时会重新runnable状态。</p><p>4，程序执行结束，线程进入terminated状态</p><p>案例篇</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> huangguizhao<br>\* 测试线程的状态<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadStateTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>());<br>System.out.println(thread.getState());<span class="hljs-comment">//NEW</span><br>thread.start();<br>System.out.println(thread.getState());<span class="hljs-comment">//RUNNABLE</span><br><span class="hljs-comment">//保险起见，让当前主线程休眠下</span><br>Thread.sleep(<span class="hljs-number">10</span>);<br>System.out.println(thread.getState());<span class="hljs-comment">//terminated</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadStateTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">BlockTask</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockTask</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(task);<br>t1.start();<br>t2.start();<br><span class="hljs-comment">//从严谨的角度来说，t1线程不一定会先执行，此处是假设t1先执行</span><br>System.out.println(t1.getState());<span class="hljs-comment">//RUNNABLE</span><br>System.out.println(t2.getState());<span class="hljs-comment">//BLOCKED</span><br>Thread.sleep(<span class="hljs-number">10</span>);<br>System.out.println(t1.getState());<span class="hljs-comment">//TIMED\_WAITING</span><br>Thread.sleep(<span class="hljs-number">1000</span>);<br>System.out.println(t1.getState());<span class="hljs-comment">//WAITING</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>)&#123;<br><span class="hljs-comment">//另一个线程会进入block状态</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//目的是让线程进入waiting time状态</span><br>Thread.sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//进入waiting状态</span><br>wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>blocked，waiting，timed waiting 我们都称为阻塞状态</p><p>上述的就绪状态和运行状态，都表现为runnable状态</p><h1 id="synchornized原理"><a href="#synchornized原理" class="headerlink" title="synchornized原理"></a>synchornized原理</h1><p>相信只要对Java的多线程有一定了解的同学就一定知道这个关键字，我这里举一个大一学习数据库时，老师举的一个例子：</p><p>一个人和他的夫人有两张一模一样的银行卡（现实中是不存在的），卡里有1000块，在当地的两家银行同时并发的取1000块钱，是不是两个人都成功取出钱呢？</p><p>答案毫无疑问是否定的，要是这样还能成功，那银行早就关门倒闭了。</p><p>老师给我们讲了锁的机制，就是当取钱的请求发出后，就会有一个锁的机制，只有等上一个人的操作执行完后，下一个人才能进行取钱，这就不会出现取出两倍钱的现象。</p><p>当然，可能老师说的是数据库的行级锁或者表级锁，但我们这里也可以引申到Java中，当两个线程都去操作一个账户，那就必然需要锁的机制来控制线程的执行，synchorinized就是一把这样的锁！</p><p>关于synchornized的使用，我在JUC中已经讲到，这里就再讲，这里的核心是讲解synchornized的原理。</p><p>废话不多说，直接上代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* syschronized原理分析<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">22</span> <span class="hljs-number">10</span>:<span class="hljs-number">57</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchorizedDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-keyword">synchronized</span> (o)&#123;<br>System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用例也很简单，创建了一个Object对象，通过synchorized对它进行加锁，拿到锁打印OK</p><p>通过JDK自带的反编译工具javap，我们反编译它的字节码文件，看它在JVM运行时真正的面貌</p><p>public static void main(java.lang.String[]);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs plain">descriptor: ([Ljava/lang/String;)V<br>flags: ACC\_PUBLIC, ACC\_STATIC<br>Code:<br>stack=2, locals=4, args\_size=1<br>0: new #2 // class java/lang/Object<br>3: dup<br>4: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 无参构造<br>7: astore\_1<br>8: aload\_1<br>9: dup<br>10: astore\_2<br>11: monitorenter // 加锁<br>12: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream;<br>15: ldc #4 // String ok<br>17: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V<br>20: aload\_2<br>21: monitorexit //释放锁<br>22: goto 30<br>25: astore\_3<br>26: aload\_2<br>27: monitorexit<br>28: aload\_3<br>29: athrow<br>30: return<br></code></pre></td></tr></table></figure><p>可以很清楚的看到，出现<strong>monitorenter和monitorexit</strong>，对于其他的JVM指令就是一些拷贝，赋值等操作，这里我们只需关注monitorenter和monitorexit两条JVM指令即可；</p><p>synchronized是java提供的原子性内置锁，这种内置的并且使用者看不到的锁也被称为监视器锁，使⽤</p><p>synchronized之后，会在编译之后在同步的代码块前后加上monitorenter和monitorexit字节码指令，</p><p>他依赖操作系统底层互斥锁实现。他的作用主要就是实现原子性操作和解决共享变量的内存可见性问</p><p>题。</p><p>执行monitorenter指令时会尝试获取对象锁，如果对象没有被锁定或者已经获得了锁，锁的计数器+1。</p><p>此时其他竞争锁的线程则会进⼊等待队列中。</p><p>执行monitorexit指令时则会把计数器-1，当计数器值为0时，则锁释放，处于等待队列中的线程再继续</p><p>竞争锁。</p><p>synchronized是排它锁，当⼀个线程获得锁之后，其他线程必须等待该线程释放锁后才能获得锁，而且</p><p>由于Java中的线程和操作系统原生线程是⼀⼀对应的，线程被阻塞或者唤醒时时会从用户态切换到内核</p><p>态，这种转换非常消耗性能。</p><p>从内存语义来说，加锁的过程会清除⼯作内存中的共享变量，再从主内存读取，而释放锁的过程则是将</p><p>工作内存中的共享变量写回主内存。</p><p>若再深入了解，synchronized实际上有两个队列<strong>waitSet</strong>和<strong>entryList</strong>。</p><ol><li>当多个线程进⼊同步代码块时，首先进入entryList</li><li>有⼀个线程获取到monitor锁后，就赋值给当前线程，并且计数器+1</li><li>如果线程调用wait方法，将释放锁，当前线程置为null，计数器-1，同时进⼊waitSet等待被唤醒，</li></ol><p>调用notify或者notifyAll之后又会进⼊entryList竞争锁</p><ol><li>如果线程执行完毕，同样释放锁，计数器-1，当前线程置为null</li></ol><p><img src="https://i.loli.net/2021/03/22/nf6FljQke9YDovH.jpg"></p><p>需要注意的是：</p><blockquote><p>方法级别的 synchronized 不会在字节码指令中有所体现，使用ACC_SYNCHRONIZED标记符隐式的实现。</p></blockquote><h1 id="锁的优化"><a href="#锁的优化" class="headerlink" title="锁的优化"></a>锁的优化</h1><p>这一块很难，我找了一篇很不错的博文，有时间一定要多读读！</p><p><a href="https://www.jianshu.com/p/e674ee68fd3f">Java中的锁[原理、锁优化、CAS、AQS]</a></p><h1 id="CAS的原理"><a href="#CAS的原理" class="headerlink" title="CAS的原理"></a>CAS的原理</h1><p>CAS叫做CompareAndSwap，比较并交换，主要通过处理器的指令来保证操作的原子性，它包含三个操作数：</p><ol><li>变量内存地址，V表示</li><li>旧的预期值，A表示</li><li>准备设置的新值，B表示</li></ol><p>当指向CAS指令时，只有当V等于A时，才会用B去更新V的值，否则不会执行更新操作。</p><h1 id="CAS的缺点"><a href="#CAS的缺点" class="headerlink" title="CAS的缺点"></a>CAS的缺点</h1><p>主要有3点：</p><p>**ABA问题：**ABA的问题是指在CAS更新的过程中，当读取到的值是A，然后准备赋值的时候仍然是A，但实际上有可能A的值被改成了B，然后又改回了A，这个CAS更新的漏洞就叫做ABA。只是ABA的问题大部分场景下都不影响并发的最终效果。</p><p>Java中有AtomicStampedReference来解决这个问题，他加入了预期标准和更新后标准两个字段，更新时不光检查值，还要检查当前的标志是否等于预期标志，全部相等的话才会更新。</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CAS 解决ABA问题<br>\* 类似乐观锁！！<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASDemo2</span> &#123;<br><span class="hljs-comment">//Integer使用了对象缓存机制,默认范围是-128 ~ 127推荐使用静态工厂方法valueOf获取对象实例,</span><br><span class="hljs-comment">// 而不是new ,因为valueOf使用缓存,而new -定会创建新的对象分配新的内存空间;</span><br><span class="hljs-comment">//CAS compareAndSet：比较并交换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;Integer&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp();<br>System.out.println(<span class="hljs-string">&quot;a1=&gt;&quot;</span>+atomicStampedReference.getStamp());<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;a2=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>atomicStampedReference.compareAndSet(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;a3=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>&#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><span class="hljs-comment">//另外一个线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp();<br>System.out.println(<span class="hljs-string">&quot;b1=&gt;&quot;</span>+stamp);<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;b2=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>&#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>循环时间长开销大</strong>：自旋锁CAS的方式如果长时间不成功，会给CPU带来很大的开销。</p><p><strong>只能保证一个共享变量的原子操作</strong>：只对一个共享变量操作可以保证原子性，但是多个则不行，多个可以通过AtomicReference来处理或者使用锁synchronized来实现</p><h1 id="ReentrantLock原理？它和synchronized的区别"><a href="#ReentrantLock原理？它和synchronized的区别" class="headerlink" title="ReentrantLock原理？它和synchronized的区别"></a>ReentrantLock原理？它和synchronized的区别</h1><p>相比于synchronized,ReentrantLock需要显式的获取锁和释放锁，相对现在基本上都是用JDK7和JDK8的版本，ReentrantLock的效率和synchronized区别基本可以持平。他们的主要区别有以下几点：</p><ol><li><p>synchronized是Java语言关键字，是原生语法层面的互斥，需要JVM实现。而ReentrantLock它是JDK1.5之后提供的AIP层面的互斥锁，需要lock()和unlock()方法配合try&#x2F;finaly语句块来完成</p></li><li><p>等待可中断，等待可中断是指当前持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待改为处理其他事情。可等待特性对处理执行时间非常长的同步快很有帮助。synchronized就不支持等待可中断，一个线程持有锁不释放，另一个线程就会一直等待。ReentrantLock则可以中断等待，去做别的事情</p></li><li><p>公平锁，公平锁就是线程不能插队，严格的先来后到。非公平锁就是线程可以插队。是指synchronized和ReentrantLock默认都是非公平锁，但ReentrantLock可以通过构造函数传参变成公平锁，但这样性能也会急剧下降</p></li><li><p>锁绑定多个条件。synchronized中，锁对象的wait()和notify()或notifyAll()方法可以实现一个隐含的条件。但如果要多于一个的条件关联，就不得不额外添加一把锁。ReentrantLock可以同时绑定多个Condition对象，只需多次调用new Condition()即可</p><p>​</p></li></ol><p>ReentrantLock基于<strong>AQS</strong>(AbstractQueueSynchronizer <strong>抽象队列同步器</strong>)实现，AQS也是用来构建锁或者其他同步组件的基础框架。大名鼎鼎的AQS真的来了！！</p><ol><li><p><strong>使用一个int类型的成员变量表示同步状态</strong></p><ul><li>getState()：获取当前同步状态</li><li>setState(int newState)：设置当前同步状态</li><li>compareAndSetState(int expect,int update)：使用CAS设置当前状态，该方法能够保证状态设置的原子性。</li></ul></li><li><p><strong>通过内置的FIFO双向队列来完成获取锁线程的排队工作</strong></p><ul><li><p>同步器包含两个节点类型的应用，一个指向节点，一个指向尾节点，未获取的线程会创建节点线程安全（compareAndSetTail）的加入队列尾部。同步队列遵循FIFO，首节点是获取同步状态成功的节点。</p><p><img src="https://i.loli.net/2021/03/22/gJoCs1xQ5pKanq9.jpg"></p><p>​</p></li><li><p>未获取到锁的线程将创建一个节点，设置到尾节点</p><p><img src="https://i.loli.net/2021/03/22/Xq32R6MViNa51hr.jpg"></p></li><li><p>首节点的线程在释放锁时，将会唤醒后继节点。而后继节点将会在获取锁成功时将自己设置成首节点。。</p><p><img src="https://i.loli.net/2021/03/22/fHFc6vpIRXhSr9L.jpg"></p><p>​</p><p>总的来说就是：</p><p>AQS内部维护⼀个state状态位，尝试加锁的时候通过CAS(CompareAndSwap)修改值，如果成功设置为</p><p>1，并且把当前线程ID赋值，则代表加锁成功，⼀旦获取到锁，其他的线程将会被阻塞进⼊阻塞队列⾃</p><p>旋，获得锁的线程释放锁的时候将会唤醒阻塞队列中的线程，释放锁的时候则会把state重新置为0，同</p><p>时当前线程ID置为空。</p><p>​</p></li></ul></li></ol><h1 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h1><p>这个我上一篇博文已经彻底分析过，这里就不再说了，贴个链接：</p><p><a href="https://luffy997.github.io/2021/03/04/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">HashMap源码分析</a></p><h1 id="多线程环境下怎么使用Map？ConcurrentHashMap有了解过吗？"><a href="#多线程环境下怎么使用Map？ConcurrentHashMap有了解过吗？" class="headerlink" title="多线程环境下怎么使用Map？ConcurrentHashMap有了解过吗？"></a>多线程环境下怎么使用Map？ConcurrentHashMap有了解过吗？</h1><p>HashMap由于底层并没有加入同步锁的机制，所以会出现线程安全问题，所以解决方法有：</p><ol><li>使用Collections.synchronizedMap()同步加锁的方式</li><li>还可以使用HashTable，虽然是线程安全，但性能很差</li><li>在多线程环境下，可以使用JUC下的ConcurrentHashMap</li></ol><p>ConcurrentHashmap在JDK1.7和1.8的版本改动比较大，1.7使⽤Segment+HashEntry分段锁的方式实</p><p>现，1.8则抛弃了Segment，改为使⽤CAS+synchronized+Node实现，同样也加入了红⿊树，避免链表</p><p>过长导致性能的问题。</p><p>关于ConcurrentHashMap的源码分析，后面单独写一篇。</p><h1 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a>volatile原理</h1><p>相比synchronized的加锁方式来解决共享变量的内存可见性问题，volatile就是更轻量的选择，他没有上下文切换的额外开销成本。使用volatile声明的变量，可以确保值被更新的时候其他线程立刻可见。</p><p>volatile使用内存屏障来保证不会发生指令重排，解决内存可见性的问题，但不保证原子性。</p><p>线程并不会时时和主内存进行直接交互，线程都是从主内存中读取共享变量到工作内存来操作，完成之后再把结果写回主内存，但是这样就会带来可见性问题。举个例子，假设现在我们是两级缓存的双核CPU架构，包含L1、L2两级缓存。对于什么是工作内存和主存我在JUC系列已经讲过，这里就不再继续讲。</p><ol><li><p>线程A首先获取变量X的值，由于最初两级缓存都是空，所以直接从主内存中读取X，假设X初始值为0，线程A读取之后把X值都修改为1，同时写回主内存。这时候缓存和主内存的情况如下：</p><p><img src="https://i.loli.net/2021/03/22/dlgtVvHkZ9UyMRn.jpg"></p></li><li><p>线程B也这样同时读取x的值，由于L2缓存已经有缓存x&#x3D;1，所以直接从L2缓存读取，之后线程B把x</p><p>修改为2，同时写回L2和主内存。这是的x值如下:</p><p>那么线程A如果再想获取变量x的值，因为L1缓存已经有了x&#x3D;1，所以这时候变量内存不可见问题就产生了，B修改为2的值对A来说没有任何感知</p><p><img src="https://i.loli.net/2021/03/22/EO3BV8I5AXNUtiS.jpg"></p><p>​</p><p>这时，可以通过volatile修设变量，当线程A再次读取变量x的话，CPU就会根据缓存一致性协议强制线程A重新从主内存加载最新的值到自己的工作内存，而不是直接用缓存中的值。</p><p>再来说内存屏障的问题，volatile修设之后会加入不同的内存屏障来保证可见性的问题能正确执行。这里写的屏障基于书中提供的内容，但实际上由于CPU架构不同，重排序的策略也不同，提供的内存屏障也一样，比如在x86平台上，只有StoreLoad一致内存屏障。</p><ol><li>StoreStore屏障，保证上面的普通写不和volatile写发⽣重排序</li><li>StoreLoad屏障，保证volatile写与后⾯可能的volatile读写不发⽣重排序</li><li>LoadLoad屏障，禁止volatile读与后⾯的普通读重排序</li><li>LoadStore屏障，禁⽌volatile读和后⾯的普通写重排序</li></ol></li></ol><p><img src="https://i.loli.net/2021/03/22/UAX1NtFPx8IpZRi.jpg"></p><h1 id="JMM内存模型的理解？为什么需要JMM"><a href="#JMM内存模型的理解？为什么需要JMM" class="headerlink" title="JMM内存模型的理解？为什么需要JMM"></a>JMM内存模型的理解？为什么需要JMM</h1><p>本身随着CPU和内存的发展速度差异的问题，导致CPU的速度远快于内存，所以现在的CPU加⼊了高速<br>缓存，高速缓存⼀般可以分为L1、L2、L3三级缓存。基于上面的例子我们知道了这导致了缓存⼀致性的<br>问题，所以加⼊了缓存⼀致性协议，同时导致了内存可见性的问题，而编译器和CPU的重排序导致了原<br>子性和有序性的问题，JMM内存模型正是对多线程操作下的⼀系列规范约束，因为不可能让程序员的代<br>码去兼容所有的CPU，通过JMM我们才屏蔽了不同硬件和操作系统内存的访问差异，这样保证了Java程序在不同的平台下达到一致的内存访问效果，同时也是保证在高并发的时候能够正确执行。</p><p><img src="https://i.loli.net/2021/03/23/n7ToREwJh2p4e5Y.jpg"></p><p>**原子性：**Java内存内存模型通过read、load、assign、use、store、write来保证原子性操作，另外还有lock和unlock，直接对应着synchronized关键字的monitorenter和monitorexit字节码指令。</p><p>**可见性：**可见性的问题在上面已经回到了，Java保证可见性可以通过volatile、synchornized、final来实现。</p><p>**有序性：**由于处理器和编译器的重排序导致的有序性问题，Java通过volatile、synchornized来保证。</p><p><strong>happen-before规则</strong></p><p>虽然指令重排提高了并发的性能，但是Java虚拟机会对指令重排做出⼀些规则限制，并不能让所有的指</p><p>令都随意的改变执行位置，主要有以下几点：</p><ol><li><p>单线程每个操作，happen-before于该线程中任意后续操作</p></li><li><p>volatile写happen-before与后续对这个变量的读</p></li><li><p>synchronized解锁happen-before后续对这个锁的加锁</p></li><li><p>final变量的写happen-before于final域对象的读，happen-before后续对final变量的读</p></li><li><p>传递性规则，A先于B，B先于C，那么A⼀定先于C发生</p><p>​</p></li></ol><h1 id="工作内存和主存到底是什么？"><a href="#工作内存和主存到底是什么？" class="headerlink" title="工作内存和主存到底是什么？"></a>工作内存和主存到底是什么？</h1><p>主存就可以认为就是物理内存，Java内存模型中实际就是虚拟机内存的一部分。而工作内存就是CPU缓存，他可能是寄存器也可能是L1\L2\L3缓存，都是有可能的。</p><h1 id="ThreadLocal的理解和原理"><a href="#ThreadLocal的理解和原理" class="headerlink" title="ThreadLocal的理解和原理"></a>ThreadLocal的理解和原理</h1><p><strong>ThreadLocal的作用：</strong></p><p>为每个线程创建一个副本，实现在线程的上下文传递同一个对象。</p><p>这里我们写一个测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* ThreadLocal 测试类<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">24</span> <span class="hljs-number">8</span>:<span class="hljs-number">06</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WithThreadLocal</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Integer&gt; num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;Integer&gt;() &#123;<br><span class="hljs-comment">// 重写这个方法，可以修改“线程变量”的初始值，默认是null</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Integer <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">if</span> (num.get().equals(<span class="hljs-number">0</span>))&#123;<br>num.set(<span class="hljs-number">1</span>);<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;---&gt;&quot;</span>+num.get());<br>&#125;).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">if</span> (num.get().equals(<span class="hljs-number">0</span>))&#123;<br>num.set(<span class="hljs-number">2</span>);<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;---&gt;&quot;</span>+num.get());<br>&#125;).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">if</span> (num.get().equals(<span class="hljs-number">0</span>))&#123;<br>num.set(<span class="hljs-number">3</span>);<br>&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;---&gt;&quot;</span>+num.get());<br>&#125;).start();<br>System.out.println(<span class="hljs-string">&quot;最终的num---&gt;&quot;</span>+num.get());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>若没有ThreadLocal相关的知识，这段代码其实最终的也不能确定（线程的执行顺序是凭CPU调度的，这个和代码顺序关系不大），因为我们只能把num当作一个静态的全局变量，没有对它进行任何的加锁操作，在多线程环境下会有线程安全问题，起码打印的不会是num的初始值0，但我们运行发现最终的num就是0，在每条线程中打印的数据也都是注入的数据，是不是很奇怪？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">Thread-0---&gt;1<br>Thread-1---&gt;2<br>最终的num---&gt;0<br>Thread-2---&gt;3<br></code></pre></td></tr></table></figure><p>查阅资料，发现TheadLoca相关资料发现，它为每一个线程都提供了变量的副本，使得每个线程在某一时间访问到的并不是同一个对象，这样就隔离了多个线程对数据的数据共享。这就解释了为什么明明线程对它进行了修改，但为什么还是初始值的原因！</p><p>接下来我们就翻读源码，看看ThreadLocal的内部实现原理和常用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalMap</span> &#123;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;<br><span class="hljs-comment">// 与当前ThreadLocal相关的对象</span><br>Object value;<br>Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;<br><span class="hljs-built_in">super</span>(k);<br>value = v;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 初始容量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> INITIAL\_CAPACITY = <span class="hljs-number">16</span>;<br><span class="hljs-comment">// 存放信息的数组</span><br><span class="hljs-keyword">private</span> Entry[] table;<br><span class="hljs-comment">// 当前容器大小</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 当容量到达阈值就会进行扩容</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> threshold; <span class="hljs-comment">// Default to 0</span><br><span class="hljs-comment">// 设置阈值threshold为数组长度的2/3</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setThreshold</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>threshold = len \* <span class="hljs-number">2</span> / <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-comment">// ThreadLocalMap的构造器，可以看出key是经过ThreadLocal内部一个变量threadLocalHashCode</span><br><span class="hljs-comment">// 计算而来的一个索引位置，稍后详解</span><br>ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[INITIAL\_CAPACITY];<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL\_CAPACITY - <span class="hljs-number">1</span>);<br>table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(firstKey, firstValue);<br>size = <span class="hljs-number">1</span>;<br>setThreshold(INITIAL\_CAPACITY);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个ThreadLocalMap时，实际上内部是构建了一个Entry类型的数组，Entry是类似Map的Key-Value结构的，Key是根据当前ThreadLocal计算来了一个hashCode，Value就是要保存的线程变量的副本（如上文中的SimpleDateFormat）。key初始化大小为16，阈值threshold为数组长度的2&#x2F;3，Entry类型为，有一个弱引用指向ThreadLocal对象。</p><p>所以每个Thread内部都维护这一个类似Map（虽然不是，但是可以简单的认为是HashMap），当我们创建一个ThreadLocal后，实际上是把当前的ThreadLocal信息存放到Thread内部所维护的ThreadLocalMap中。ThreadLocalMap是对当前线程中所有的方法都开放的，所以当就做到了每个线程共享，接下来进行详细分析。</p><p>继续看ThreadLocal的几个常用方法，其实真的就几个，这里把get()，set()，setInitialValue()拿出来讲讲</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(T value)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> Thread.currentThread();<br><span class="hljs-type">ThreadLocalMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> getMap(t);<br><span class="hljs-keyword">if</span> (map != <span class="hljs-literal">null</span>)<br>map.set(<span class="hljs-built_in">this</span>, value);<br><span class="hljs-keyword">else</span><br>createMap(t, value);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码非常简单，拿到当前线程对象，从上面的map获取map对象，若为空就以向map中添以t为key，value就是当前对象，若不为空，就刷新value。到这是不是很多同学会疑惑，那这样的操作map的key不就不一样了吗，一个是当前线程对象，一个是this，也就是ThreadLocal对象，我们点开createMap()源码发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">void createMap(Thread t, T firstValue) &#123;<br>t.threadLocals = new ThreadLocalMap(this, firstValue);<br>&#125;<br></code></pre></td></tr></table></figure><p>没错，这里直接修改的是引用，t的类型最后就是ThreadLocal了，所以还是以ThreadLocal为key，传入的参数作为value。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plain">public T get() &#123;<br>Thread t = Thread.currentThread();<br>ThreadLocalMap map = getMap(t);<br>if (map != null) &#123;<br>ThreadLocalMap.Entry e = map.getEntry(this);<br>if (e != null) &#123;<br>T result = (T)e.value;<br>return result;<br>&#125;<br>&#125;<br>return setInitialValue();<br>&#125;<br></code></pre></td></tr></table></figure><p>get()方法没什么好讲的，就是从map中的Entry取值，假如有阅读过HashMap源码的经验，这里其实就是先从map中拿到key(ThreadLoacl)，再判断map是不是空，不为空就是直接获取值，然后返回，为空就调用setInitialValue()进行初始化操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain">private T setInitialValue() &#123;<br>T value = initialValue();<br>Thread t = Thread.currentThread();<br>ThreadLocalMap map = getMap(t);<br>if (map != null)<br>map.set(this, value);<br>else<br>createMap(t, value);<br>return value;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到setInitialValue()还是和createMap相关，把数据存入ThreadLocalMap的操作。</p><p>上文中我们清楚了ThreadLocalMap其实就是一个Entry类型的数组，类似map，任何Map都要解决的的就是哈希冲突。其中int i &#x3D; firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - 1);的i是ThreadLocal存放在ThreadLocalMap中的索引位置，然后threadLocalHashCode的具体细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">threadLocalHashCode</span> <span class="hljs-operator">=</span> nextHashCode();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextHashCode</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH\_INCREMENT);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextHashCode</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> nextHashCode.getAndAdd(HASH\_INCREMENT);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">nextHashCode</span> <span class="hljs-operator">=</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;<br>table = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>[INITIAL\_CAPACITY];<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> firstKey.threadLocalHashCode &amp; (INITIAL\_CAPACITY - <span class="hljs-number">1</span>);<br>table[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Entry</span>(firstKey, firstValue);<br>size = <span class="hljs-number">1</span>;<br>setThreshold(INITIAL\_CAPACITY);<br>&#125;<br></code></pre></td></tr></table></figure><p>每一个ThreadLocal都会根据nextHashCode生成一个int值，作为哈希值。然后根据这个哈希值和数组的长度len-1（因为len的长度总是2的倍数，减一的话就可以保证低N位都是1）进行求和，从而获取哈希值的低N位，从而获取再数组中的索引位置。而且nextHashCode的类型是AtomicInteger，这个就是为了在多线程环境下能保证数值操作原子性的类。</p><p><strong>如何解决哈希冲突呢？</strong></p><p>熟悉的HashMap发生哈希冲突我们都很熟悉了，通过链表或者红黑树进行解决，而ThreadLocalMap它本身就是一个很简单Entry数组，并不像HashMap具有那么复杂的数据结构，那么ThreadLocalMap是如何解决的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;<br>ThreadLocal.ThreadLocalMap.Entry[] tab = table;<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> tab.length;<br><span class="hljs-comment">// 求索引位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> key.threadLocalHashCode &amp; (len-<span class="hljs-number">1</span>);<br><span class="hljs-comment">// 如果要存放的i位置有数据，就说明发生了哈希冲突</span><br><span class="hljs-keyword">for</span> (ThreadLocal.ThreadLocalMap.<span class="hljs-type">Entry</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> tab[i];<br>e != <span class="hljs-literal">null</span>;<br>e = tab[i = nextIndex(i, len)]) &#123;<br>ThreadLocal&lt;?&gt; k = e.get();<br><span class="hljs-comment">// 如果是同一个ThreadLocal对象，就直接覆盖</span><br><span class="hljs-keyword">if</span> (k == key) &#123;<br>e.value = value;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 如果key为null，则替换它的位置</span><br><span class="hljs-keyword">if</span> (k == <span class="hljs-literal">null</span>) &#123;<br>replaceStaleEntry(key, value, i);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 否则就nextIndex(i, len)，去找下一个位置</span><br>&#125;<br>tab[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>.ThreadLocalMap.Entry(key, value);<br><span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> ++size;<br><span class="hljs-keyword">if</span> (!cleanSomeSlots(i, sz) &amp;&amp; sz &gt;= threshold)<br>rehash();<br>&#125;<br></code></pre></td></tr></table></figure><p>如果发生哈希冲突采用<strong>线性探测</strong>的方式，主要就是判断当前位置是否可以替换，<strong>如果发现这个位置上已经有其他key值的元素被占用，则利用固定的算法寻找一定步长的下个位置，依次判断，直至找到能够存放的位置。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextIndex</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> len)</span> &#123;<br><span class="hljs-keyword">return</span> ((i + <span class="hljs-number">1</span> &lt; len) ? i + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>ThreadLocal内存泄漏</strong></p><p>但是有些时候使用ThreadLocal是会发生内存泄漏的，而为什么会发生内存泄漏呢？下面是我理解的一些答案：<br>如果ThreadLocal没有外部强引用，那么在发生垃圾回收的时候，ThreadLocal就必定会被回收，而ThreadLocal又作为Map中的key，ThreadLocal被回收就会导致一个key为null的entry，外部就无法通过key来访问这个entry，垃圾回收也无法回收，这就造成了内存泄漏</p><p><strong>解决方案</strong><br>解决办法是每次使用完ThreadLocal都调用它的remove()方法清除数据，或者按照JDK建议将ThreadLocal变量定义成private static，这样就一直存在ThreadLocal的强引用，也就能保证任何时候都能通过ThreadLocal的弱引用访问到Entry的value值，进而清除掉。</p><p><strong>ThreadLocal在开发中的应用场景</strong></p><p>比如：hibernate管理session，mybatis管理sqlsession，其内部都是采用ThreadLocal来实现的。</p><p>前提知识：不管是什么框架，最本质的操作都是基于JDBC，当我们需要跟数据库打交道的时候，都需要有一个connection。</p><p>那么，当我们需要在业务层实现事务控制时，该如何达到这个效果？</p><p>我们构建下代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-comment">//省略接口的声明</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">UserDao</span> <span class="hljs-variable">userDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDao</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-type">LogDao</span> <span class="hljs-variable">logDao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogDao</span>();<br><span class="hljs-comment">//事务的边界放在业务层</span><br><span class="hljs-comment">//JDBC的封装，connection</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>userDao.add();<br>logDao.add();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;UserDao add。。。&quot;</span>);<br><span class="hljs-comment">//创建connection对象</span><br><span class="hljs-comment">//connection.commit();</span><br><span class="hljs-comment">//connection.rollback();</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;LogDao add。。。&quot;</span>);<br><span class="hljs-comment">//创建connection对象</span><br><span class="hljs-comment">//connection.commit();</span><br><span class="hljs-comment">//connection.rollback();</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果代码按上面的方式来管理connection，我们还可以保证service的事务控制吗？</p><p>这是不行的，假设第一个dao操作成功了，那么它就提交事务了，而第二个dao操作失败了，它回滚了事务，但不会影响到第一个dao的事务，因为上面这么写是两个独立的事务</p><p>那么怎么解决。</p><p>上面的根源就是两个dao操作的是不同的connection</p><p>所以，我们保证是同个connection即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//事务的边界放在业务层</span><br><span class="hljs-comment">//JDBC的封装，connection</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Connection</span>();<br>userDao.add(connection);<br>logDao.add(connection);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的方式代码不够优雅</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConnectionUtils</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;Connection&gt; threadLocal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> threadLocal.get();<br><span class="hljs-keyword">if</span>(connection == <span class="hljs-literal">null</span>)&#123;<br>connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Connection</span>();<br>threadLocal.set(connection);<br>&#125;<br><span class="hljs-keyword">return</span> connection;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;UserDao add。。。&quot;</span>);<br><span class="hljs-comment">//创建connection对象</span><br><span class="hljs-comment">//connection.commit();</span><br><span class="hljs-comment">//connection.rollback();</span><br><span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> ConnectionUtils.getConnection();<br>System.out.println(<span class="hljs-string">&quot;UserDao-&gt;&quot;</span>+connection);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>到此，我们可以保证两个dao操作的是同一个connection</p><h1 id="引用类型有哪些"><a href="#引用类型有哪些" class="headerlink" title="引用类型有哪些"></a><strong>引用类型有哪些</strong></h1><p>引用类型主要分为强软弱虚四种：</p><ul><li>强引用指的就是代码中普遍存在的赋值⽅式，比如A a &#x3D; new A()这种。强引⽤关联的对象，永远不</li></ul><p>会被GC回收。</p><ul><li>软引用可以用SoftReference来描述，指的是那些有⽤但是不是必须要的对象。系统在发⽣内存溢</li></ul><p>出前会对这类引用的对象进行回收。</p><ul><li>弱引用可以用WeakReference来描述，他的强度比软引⽤更低⼀点，弱引用的对象下⼀次GC的时</li></ul><p>候⼀定会被回收，而不管内存是否足够。</p><ul><li>虚引用也被称作幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的 存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚 引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供 了PhantomReference类来实现虚引用。</li></ul><h1 id="线程池的三大方法、七大参数和四种拒绝策略"><a href="#线程池的三大方法、七大参数和四种拒绝策略" class="headerlink" title="线程池的三大方法、七大参数和四种拒绝策略"></a>线程池的三大方法、七大参数和四种拒绝策略</h1><p>这个面试也是必问的，在之前的文章中已经详细讲到了，这里就不再赘述</p><p><a href="https://luffy997.github.io/2021/01/26/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/">JUC并发编程系列(三)</a></p><h1 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h1><h1 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h1><h1 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h1><p>上面这三个常用辅助类我在之前的文章也讲过</p><p><a href="https://luffy997.github.io/2021/01/25/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/#8-1-CountDownLatch">JUC并发编程系列(二)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql必知必会</title>
    <link href="/2021/03/18/Mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <url>/2021/03/18/Mysql%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><strong>MySQL</strong> 是最流行的关系型数据库管理系统，在 WEB 应用方面 MySQL 是最好的 RDBMS(Relational Database Management System：关系数据库管理系统)应用软件之一。</p><p><strong>mysql架构图</strong></p><p><img src="https://i.loli.net/2021/03/18/QKW4emFJLshMDxV.png"></p><h1 id="myisam和innodb"><a href="#myisam和innodb" class="headerlink" title="myisam和innodb"></a>myisam和innodb</h1><p><strong>myisam</strong>引擎是5.1版本之前的默认引擎，有如下特点：</p><ul><li><p>不支持事务</p></li><li><p>只支持表级锁定 —&gt;数据更新时锁定整个表，就说说对一个数据进行操作就会锁定整个表，其他人不能同时操作这个表，实现容易但并发效率低。</p></li><li><p>只会缓存索引 —&gt; myisam可以通过key_buffer_size的值来提高缓存索引，以大大提高访问性能减少磁盘IO，但是这个缓存区只会缓存索引，而不会缓存数据。</p></li><li><p>读取速度较快，占用资源较少</p></li><li><p>不支持外键约束，但只是全文索引</p></li><li><p>对于count(*)查询来说MyISAM更有优势，因为其保存了行数</p><p>​</p></li></ul><p><strong>使用场景：</strong></p><p>1.不需要支持事务的业务</p><p>2.读数据比较多的应用，读写都频繁的场景不适应（表级锁定）</p><p>3.独写并发访问较低的业务</p><p><strong>innodb</strong></p><ul><li>支持事务，支持4个事务的隔离级别，支持多版本读</li><li>默认行级锁（更新时一般是锁定当前行），也支持表级锁。通过索引实现，全表扫描仍然会是表锁，需注意间隙锁的影响</li><li>具有非常高的缓存特性：缓存索引和数据</li><li>不支持全文索引，支持外键约束</li><li>通过MVCC支持高并发</li><li>基于聚簇索引创建</li></ul><p><strong>使用场景：</strong></p><ol><li>需要事务支持</li><li>行级锁对高并发有很好的适应能力，但需要确保查询是通过索引完成的</li><li>数据更新较频繁的场景</li><li>数据一致性要求高</li><li>硬件内存较大，可以提供很好的缓存效果</li></ol><h1 id="mysql的索引有哪些？聚簇索引和非聚簇索引是什么？"><a href="#mysql的索引有哪些？聚簇索引和非聚簇索引是什么？" class="headerlink" title="mysql的索引有哪些？聚簇索引和非聚簇索引是什么？"></a>mysql的索引有哪些？聚簇索引和非聚簇索引是什么？</h1><p>索引按数据结构来分主要包含：<strong>B+树和Hash索引</strong></p><p>这里就不得不提下，为什么Mysql默认索引是B+树，不是B树？</p><ol><li>B+树是B树的变种，B+树的非叶子节点只用来保存索引，不存储数据，所有的数据都保存在叶子节点；而B树的非叶子节点也会保存数据。这样就使得B+树的查询效率更加稳定，均为从根节点到叶子节点的路径。</li><li>B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相比B树更小，同样空间可以读入更多的节点，所以B+树的磁盘读写代价更低。</li></ol><p>在Mysql文档里，实际上B+树索引写成了BTREE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> t(<br>aid <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not null</span> auto\_increment,<br>userid <span class="hljs-type">int</span> unsigned <span class="hljs-keyword">not null</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>,<br>username <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">not null</span> <span class="hljs-keyword">default</span> ‘’,<br>detail <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">not null</span> <span class="hljs-keyword">default</span> ‘’,<br><span class="hljs-keyword">primary key</span>(aid),<br><span class="hljs-keyword">unique</span> key(uid) <span class="hljs-keyword">USING</span> BTREE,<br>key (username(<span class="hljs-number">12</span>)) <span class="hljs-keyword">USING</span> BTREE — 此处 uname 列只创建了最左<span class="hljs-number">12</span>个字符长度的部分索引<br>)engine<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/18/M4rAIHGJvQW1tX8.jpg"></p><p>B+树是左小右大的顺序存储结构，节点只包含id索引列，而叶子节点包含索引列和数据，这种<strong>数据和索引在一起</strong>存储的索引方式叫做聚簇索引。非聚簇索引（二级索引）是在B+树的叶子节点上存储的数据，并不是数据本身，保存的是<strong>主键id值</strong>，这⼀点和myisam保存的是数据地址是不同的。。并且聚簇索引的数据的物理存放顺序与索引顺序是一致的，即只要索引是相邻的，那么对应的数据一定也是相邻的。聚簇索引要比非聚簇索引查询效率高很多。</p><p><img src="https://i.loli.net/2021/03/18/zyEWSuB5fNMjvRV.jpg"></p><p>一张表只能有一个聚簇索引，因为物理地址是唯一确定的。假设没有定义主键，InnoDb会选择一个唯一的非空索引代替，如果没有的话则会隐式定义一个主键作为聚簇索引。</p><p><strong>Hash索引</strong></p><p><img src="https://i.loli.net/2021/03/18/qsIXucABdtEFGg8.jpg"></p><p>简单的说，Hash索引就说采用一定的Hash算法，把键值对换算成新的Hash值，检索时不需要类似B+树那样从根节点到叶子节点逐级查找，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。</p><p>B+树索引和哈希索引的明显区别是：</p><ul><li><p><strong>如果是等值查询，那么哈希索引明显有绝对优势</strong>，因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据；</p></li><li><p>从示意图中也能看到，<strong>如果是范围查询检索，这时候哈希索引就毫无用武之地了</strong>，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索；</p></li><li><p>同理，<strong>哈希索引也没办法利用索引完成排序</strong>，以及like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）；</p></li><li><p><strong>哈希索引也不支持多列联合索引的最左匹配规则</strong>；</p></li><li><p>B+树索引的关键字检索效率比较平均，不像B树那样波动幅度大，<strong>在有大量重复键值情况下，哈希索引的效率也是极低的，因为存在的哈希碰撞问题</strong>。</p><p>​</p></li></ul><h1 id="覆盖索引和回表"><a href="#覆盖索引和回表" class="headerlink" title="覆盖索引和回表"></a>覆盖索引和回表</h1><p>覆盖索引是常见的SQL优化策略，指在一次查询中，如果一个索引包含或者说覆盖所有查询的字段值，我们就称为覆盖索引，而不需要回表查询。</p><p>回表是如何执行的呢？</p><p><img src="https://i.loli.net/2021/03/18/nQecETFYpGKfyti.jpg"></p><p>如粉红色路径，需要扫描两遍索引树：</p><ol><li>先通过普通索引定位到id&#x3D;5；</li><li>再通过聚集索引定位到行记录；</li></ol><p>这就是所谓的回表查询，先定位主键值，再定位行记录，它的性能较扫描一遍索引树慢。</p><p>确定⼀个查询是否是覆盖索引，我们只需要explain sql语句看Extra的结果是否是“Using index”即可。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">explain <span class="hljs-keyword">select</span> \<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询的name⽆法从索引数据获取<br>explain <span class="hljs-keyword">select</span> id,age <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">1</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>可以直接从索引获取<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/heyanan/p/13570033.html">mysql覆盖索引与回表</a></p><h1 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h1><p>mysql锁分为共享锁和排他锁，也叫读锁和写锁。</p><p>读锁是共享的，可以通过lock in share mode 实现，这时候只能读不能写。</p><p>写锁是排他的，它会阻塞其他的写锁和读锁。从颗粒度来区分，可以分为表锁和行锁两种。</p><p>表锁会锁定整张表并且阻塞其他用户对该表的所有读写操作，比如alter修改表结构的时候就会锁表。</p><p>行锁又可分为乐观锁和悲观锁，悲观锁可以通过for update实现，乐观锁通过版本号实现。</p><h1 id="事务的基本特性和隔离级别"><a href="#事务的基本特性和隔离级别" class="headerlink" title="事务的基本特性和隔离级别"></a>事务的基本特性和隔离级别</h1><p>mysql必问事务的！</p><p><strong>事务基本特性ACID：</strong></p><ul><li>原子性（Atomicity）：事务作为一个整体被执行，要么全部执行，要么全部不执行；</li><li>一致性（Consistrncy）：保证数据库状态从一个一致状态转变为另一个一致状态。比如A转账给B100块，假设转成功，那么A和B在没进行转账之前的金额之和是等于转账成功现在的A和B的金额之和。假如中间sql执行过程中系统崩溃A也不会损失100块，因为事务没有提交，修改也不会保存到数据库中。</li><li>隔离性（ISolation）：一个事务的修改在最终提交前，对其他事务是不可见的。</li><li>持久性（Durability）：一个事务一旦提交，对数据库的修改是永久保存的。</li></ul><p><strong>四个隔离级别：</strong></p><ul><li><p>read uncommit 读未提交，可能读到其他事务未提交的数据，也叫脏读，举个栗子：用户A开启事务，修改自己的原来的age &#x3D; 10为age &#x3D; 20，但还未提交，用户B开启事务读取用户A的age，会发现读取的age &#x3D; 20，但用户A的事务没提交，用户B去读取用户A的age应该是10，这就是脏读。</p></li><li><p>read commit 读已提交，两次读取结果不一致，叫做不可重复读。不可重复读解决了脏读的问题，但又出现个问题它只会读取已提交的事务。举个栗子，用户B在用户A尚未开启事务的时候去读取age &#x3D; 10，但再次读取的时候A已经开启并提交事务，B再次读取A的时候age &#x3D; 20，这就造成前后读的数据不一致。</p></li><li><p>repeatable read 可重复度，这是mysql的默认级别，就是每次读取结果都⼀样，但是有可能产⽣幻读。</p></li><li><p>serializable 串行，一般不使用，它会给每一行读取的数据加锁，会导致大量超时和锁竞争问题。</p><p>​</p></li></ul><h1 id="不做控制，多个事务并发操作数据库会出现什么问题"><a href="#不做控制，多个事务并发操作数据库会出现什么问题" class="headerlink" title="不做控制，多个事务并发操作数据库会出现什么问题?"></a>不做控制，多个事务并发操作数据库会出现什么问题?</h1><ul><li><strong>丢失更新</strong> 两个事务同时获得相同的数据，然后在各自事务中同时修改了数据，谁先提交事务，谁的数据就会被后面提交事务的数据所覆盖，先提交的事务被后提交的所覆盖，导致数据更新失败。</li><li><strong>脏读</strong> 事务A读取了事务B未提交的数据，由于事务B回滚，导致事务A读取了事务B未提交的数据，出现脏读。</li><li><strong>不可重复读</strong> 一个事务在自己没更新数据库的情况，同一个查询操作执行两次或多次结果数值不一样，因为有别的事务更新了该数据，并且提交了事务。</li><li><strong>幻读</strong> 事务A读的时候读出了N条记录，事务B在事务A执行的过程中增加了1条，事务A再读的时候就变成了N+1条，这种情况就叫做幻读。</li></ul><p>注意：幻读是一种结构上的改变，比如数据条数的改变；不可重复读是读出的数值发生了改变。</p><h1 id="ACID靠什么保证？"><a href="#ACID靠什么保证？" class="headerlink" title="ACID靠什么保证？"></a>ACID靠什么保证？</h1><p>A原子性由undo log日志保证，它记录了需要回滚的日志信息，事务回滚撤销已经执行成功的SQL</p><p>C一致性一般由代码层面来保证</p><p>I隔离性由MVCC来保证</p><p>D持久性由内存+redo log(重做日志)来保证，mysql修改数据同时在内存和redo log记录这次操作，事务提交的时候通过redo log刷盘，宕机的时候可以从redo log恢复，这个能力称为crash-safe。</p><h1 id="MVCC的是什么？"><a href="#MVCC的是什么？" class="headerlink" title="MVCC的是什么？"></a>MVCC的是什么？</h1><p>MVCC叫做多版本并发控制，实际上就是保存了数据在某个时间节点的快照。</p><p>我们每行数据实际上隐藏了两列，创建时间版本号，过期（删除）时间版本，每开始一个新的事务，版本号都会自动递增。</p><p>比如我们创建一个user表，字段为id，name，假如我们插入两条数据，它实际上长这样</p><table><thead><tr><th>id</th><th>name</th><th>create_version</th><th>delete_version</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td></td></tr><tr><td>2</td><td>李四</td><td>2</td><td></td></tr></tbody></table><p>假设这时候小明去执行查询，此时current_vision&#x3D;3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> \<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>同时，小红在这个时候开启事务去修改id&#x3D;1的记录，current_vision&#x3D;4</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张三三&#x27;</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>执行成功后的结果是这样的</p><table><thead><tr><th>id</th><th>name</th><th>create_vison</th><th>delete_versin</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td></td></tr><tr><td>2</td><td>李四</td><td>2</td><td></td></tr><tr><td>1</td><td>张三三</td><td>4</td><td></td></tr></tbody></table><p>如果这时候还有小黑在删除id&#x3D;2的数据，current_version&#x3D;5,执行后结果是这样的。</p><table><thead><tr><th>id</th><th>name</th><th>create_vison</th><th>delete_version</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td></td></tr><tr><td>2</td><td>李四</td><td>2</td><td>5</td></tr><tr><td>1</td><td>张三三</td><td>4</td><td></td></tr></tbody></table><p>由于MVCC的<strong>原理是查找创建版本小于或等于当前事务版本，删除版本为空或者大于当前事务版本</strong>，小明真实的查询应该是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> \<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;=</span><span class="hljs-number">3</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">create</span>\_version<span class="hljs-operator">&lt;=</span><span class="hljs-number">3</span> <span class="hljs-keyword">and</span>(<span class="hljs-keyword">delete</span>\_version <span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">delete</span>\_version <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>所以小明最后查询到的id&#x3D;1的名字还是‘张三’，并且id&#x3D;2也能查询到。这样做是为了<strong>保证事务读取的数据是在事务之前就已经存在的，要么是事务自己插入或者修改的。</strong></p><p>明白MVCC原理，我们来说什么是幻读就简单多了。举一个常见的场景，用户在注册时，我们先查询用户名是否存在，不存在就插入，假设用户名是唯一索引。</p><ol><li><p>小明开启事务current_version&#x3D;6查询名字为’王五‘的记录，发现不存在。</p></li><li><p>小红开启事务current_version&#x3D;7插入一条数据，结果是这样的：</p><p>​</p></li></ol><table><thead><tr><th>id</th><th>name</th><th>create_version</th><th>delete_version</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>1</td><td></td></tr><tr><td>2</td><td>李四</td><td>2</td><td></td></tr><tr><td>3</td><td>王五</td><td>7</td><td></td></tr></tbody></table><ol><li>小明执行插入名字’王五‘的记录，发现唯一索引冲突，无法插入，这就是<strong>幻读</strong>。</li></ol><h1 id="Mysql的日志模块redo-log和binlog是什么？"><a href="#Mysql的日志模块redo-log和binlog是什么？" class="headerlink" title="Mysql的日志模块redo log和binlog是什么？"></a>Mysql的日志模块redo log和binlog是什么？</h1><p>在MySQL的使用中，更新操作也是很频繁的，如果每一次更新操作都根据条件找到对应的记录，然后将记录更新，再写回磁盘，那么<strong>IO</strong>成本以及查找记录的成本都很高。所以，出现了日志模块，即我们的update更新操作是<strong>先写日志，在合适的时间才会去写磁盘</strong>，日志更新完毕就将执行结果返回给了客户端。</p><p>MySQL中的日志模块主要有<strong>redo log</strong>（重做日志）和binlog（归档日志）。</p><p><strong>redo log</strong></p><p>redo log是<strong>InnoDB引擎特有</strong>的日志模块，redo log是<strong>物理日志</strong>，记录了某个数据页上做了哪些修改。InnoDB的redo log是固定大小的，比如可以配置为一组4个文件，每个文件的大小是1GB，那么redolog总共就可以记录 4GB的操作。从头开始写，写到末尾就又回到开头循环写。</p><p>InnoDB的redo log保证了数据库发生异常重启之后，之前提交的记录不会丢失，这个能力称为crash-safe。</p><p><strong>binlog</strong></p><p>binlog是<strong>Server层自带</strong>的日志模块，binlog是逻辑日志，记录本次修改的原始逻辑，说白了就是SQL语句。binlog是追加写的形式，可以写多个文件，不会覆盖之前的日志。通过mysqlbinlog可以解析查看binlog日志。binlog日志文件的格式：statement，row，mixed。</p><ol><li><strong>statement</strong>格式的binlog记录的是完整的SQL语句，优点是日志文件小，性能较好，缺点也很明显，那就是准确性差，遇到SQL语句中有now()等函数会导致不准确</li><li><strong>row</strong>格式的binlog中记录的是数据行的实际数据的变更，优点就是数据记录准确，缺点就是日志文件较大。</li><li><strong>mixed</strong>格式的binlog是前面两者的混合模式</li></ol><p>业界目前推荐使用的是 row 模式，因为很多情况下对准确性的要求是排在第一位的。</p><p>在更新数据库的时候，通过redo log和binlog的<strong>两阶段提交</strong>，可以确保数据库异常崩溃之后数据的正确恢复。</p><p>在对数据库误操作之后，可以通过<strong>备份库+binlog</strong>可以将数据库状态恢复到“任意“时刻。</p><h1 id="什么是间隙锁？"><a href="#什么是间隙锁？" class="headerlink" title="什么是间隙锁？"></a>什么是间隙锁？</h1><p>间隙锁是可重复读级别下才会有的锁，结合MVCC和间隙锁可以解决幻读的问题。我们还是以user举</p><p>例，假设现在user表有几条记录</p><table><thead><tr><th>id</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>10</td></tr><tr><td>2</td><td>20</td></tr><tr><td>3</td><td>30</td></tr></tbody></table><p>当我们执行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">select</span> \<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age<span class="hljs-operator">=</span><span class="hljs-number">20</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>; <span class="hljs-operator">/</span><span class="hljs-operator">/</span>独占锁<br><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">user</span>(age) <span class="hljs-keyword">values</span>(<span class="hljs-number">10</span>); #成功<br><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">user</span>(age) <span class="hljs-keyword">values</span>(<span class="hljs-number">11</span>); #失败<br><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">user</span>(age) <span class="hljs-keyword">values</span>(<span class="hljs-number">20</span>); #失败<br><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">user</span>(age) <span class="hljs-keyword">values</span>(<span class="hljs-number">21</span>); #失败<br><span class="hljs-keyword">insert into</span> <span class="hljs-keyword">user</span>(age) <span class="hljs-keyword">values</span>(<span class="hljs-number">30</span>); #失败<br></code></pre></td></tr></table></figure><p>只有10可以插⼊成功，那么因为表的间隙mysql⾃动帮我们⽣成了区间(左开右闭)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">(negative infinity，<span class="hljs-number">10</span>],(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>],(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>],(<span class="hljs-number">30</span>,positive infinity)<br></code></pre></td></tr></table></figure><p>由于20存在记录，所以(10,20]，(20,30]区间都被锁定了⽆法插⼊、删除。</p><p>如果查询21呢？就会根据21定位到(20,30)的区间(都是开区间)。</p><p>需要注意的是唯⼀索引是不会有间隙索引的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>八大排序算法（下）</title>
    <link href="/2021/03/17/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2021/03/17/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该方法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各个答案拼接在一起，即为分而治之）。</p><p><strong>实现思想</strong></p><p><img src="https://i.loli.net/2021/03/17/xMubRDktIYjQdOX.jpg"></p><p><strong>具体步骤</strong></p><p><img src="https://i.loli.net/2021/03/17/kLhDN6S9mYcEQb7.jpg"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分+合方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br><span class="hljs-keyword">if</span>(left &lt; right) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) / <span class="hljs-number">2</span>; <span class="hljs-comment">//中间索引</span><br><span class="hljs-comment">//向左递归进行分解</span><br>mergeSort(arr, left, mid, temp);<br><span class="hljs-comment">//向右递归进行分解</span><br>mergeSort(arr, mid + <span class="hljs-number">1</span>, right, temp);<br><span class="hljs-comment">//合并</span><br>merge(arr, left, mid, right, temp);<br>&#125;<br>&#125;<br><span class="hljs-comment">//合并的方法</span><br>/\*\*<br>\*<br>\* <span class="hljs-meta">@param</span> arr 排序的原始数组<br>\* <span class="hljs-meta">@param</span> left 左边有序序列的初始索引<br>\* <span class="hljs-meta">@param</span> mid 中间索引<br>\* <span class="hljs-meta">@param</span> right 右边索引<br>\* <span class="hljs-meta">@param</span> temp 做中转的数组<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right, <span class="hljs-type">int</span>[] temp)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">// 初始化i, 左边有序序列的初始索引</span><br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid + <span class="hljs-number">1</span>; <span class="hljs-comment">//初始化j, 右边有序序列的初始索引</span><br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 指向temp数组的当前索引</span><br><span class="hljs-comment">//(一)</span><br><span class="hljs-comment">//先把左右两边(有序)的数据按照规则填充到temp数组</span><br><span class="hljs-comment">//直到左右两边的有序序列，有一边处理完毕为止</span><br><span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="hljs-comment">//继续</span><br><span class="hljs-comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span><br><span class="hljs-comment">//即将左边的当前元素，填充到 temp数组</span><br><span class="hljs-comment">//然后 t++, i++</span><br><span class="hljs-keyword">if</span>(arr[i] &lt;= arr[j]) &#123;<br>temp[t] = arr[i];<br>t += <span class="hljs-number">1</span>;<br>i += <span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//反之,将右边有序序列的当前元素，填充到temp数组</span><br>temp[t] = arr[j];<br>t += <span class="hljs-number">1</span>;<br>j += <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//(二)</span><br><span class="hljs-comment">//把有剩余数据的一边的数据依次全部填充到temp</span><br><span class="hljs-keyword">while</span>( i &lt;= mid) &#123; <span class="hljs-comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span><br>temp[t] = arr[i];<br>t += <span class="hljs-number">1</span>;<br>i += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">while</span>( j &lt;= right) &#123; <span class="hljs-comment">//右边的有序序列还有剩余的元素，就全部填充到temp</span><br>temp[t] = arr[j];<br>t += <span class="hljs-number">1</span>;<br>j += <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//(三)</span><br><span class="hljs-comment">//将temp数组的元素拷贝到arr</span><br><span class="hljs-comment">//注意，并不是每次都拷贝所有</span><br>t = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">tempLeft</span> <span class="hljs-operator">=</span> left; <span class="hljs-comment">//</span><br><span class="hljs-comment">//第一次合并 tempLeft = 0 , right = 1 // tempLeft = 2 right = 3 // tL=0 ri=3</span><br><span class="hljs-comment">//最后一次 tempLeft = 0 right = 7</span><br><span class="hljs-keyword">while</span>(tempLeft &lt;= right) &#123;<br>arr[tempLeft] = temp[t];<br>t += <span class="hljs-number">1</span>;<br>tempLeft += <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释写的很详细，这里就不做过多论述了。</p><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序（RADIX-SORT）属于“分配式排序”，又称“桶子法”，顾名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的效果。</p><p>基数排序是属于稳定性的排序，基数排序法是效率高的稳定性排序法</p><p>基数排序是桶排序的扩展。</p><p><strong>基本思想</strong></p><p>将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低为开始，依次进行排序。</p><p>这样从最低位排序一直到最高位排序完成以后，数列就是一个有序序列。</p><p><strong>图文说明</strong></p><p><img src="https://i.loli.net/2021/03/17/DW5qLVdYaIAQ3ON.jpg"></p><p><img src="https://i.loli.net/2021/03/17/esxpcPiIalXC1WJ.jpg"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">radixSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-comment">//根据前面的推导过程，我们可以得到最终的基数排序代码</span><br><span class="hljs-comment">//1.得到最大的位数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] &gt; max) &#123;<br>max = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">maxLength</span> <span class="hljs-operator">=</span> (max + <span class="hljs-string">&quot; &quot;</span>).length(); <span class="hljs-comment">//转字符串 去length 得到长度</span><br><span class="hljs-comment">//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1. 二维数组包含10个一维数组</span><br><span class="hljs-comment">//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length</span><br><span class="hljs-comment">//3. 名明确，基数排序是使用空间换时间的经典算法</span><br><span class="hljs-type">int</span>[][] bucket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][arr.length];<br><span class="hljs-comment">//循环处理</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, n = <span class="hljs-number">1</span>; i &lt; maxLength; i++, n \*= <span class="hljs-number">10</span>) &#123;<br><span class="hljs-type">int</span>[] bucketElementCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//第n轮</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br><span class="hljs-comment">//取出每个元素的个位的值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">digitOfElement</span> <span class="hljs-operator">=</span> arr[j] / n % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//放入到对应的桶中</span><br>bucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];<br>bucketElementCounts[digitOfElement]++;<br>&#125;<br><span class="hljs-comment">//按照这个桶的顺序（一维数组的下标依次取出数据，放入原来数组）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//遍历每一桶，并将桶中数据，放入原数组</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; bucketElementCounts.length; k++) &#123;<br><span class="hljs-comment">//如果桶中有数据，我们放入到原数组</span><br><span class="hljs-keyword">if</span> (bucketElementCounts[k] != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//循环该桶即第K个桶（即第k个一维数组），放入</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; l &lt; bucketElementCounts[k]; l++) &#123;<br><span class="hljs-comment">//取出元素放入到arr</span><br>arr[index++] = bucket[k][l];<br>&#125;<br>&#125;<br>bucketElementCounts[k] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// System.out.println(&quot;第&quot; + (i + 1) + &quot;轮基数排序后：&quot; + Arrays.toString(arr));</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。</p><p><strong>堆是什么？</strong></p><p>具有完全以下性质的完全二叉树：每个节点的值都大于或等于其左右孩子节点的值，称为大顶堆，不要求节点的左孩子和右孩子值的大小。</p><p><img src="https://i.loli.net/2021/03/17/HGnRPQfUjYJWtV9.jpg"></p><p>每个节点的值都小于或等于其左右孩子节点的值，称为小顶堆</p><p><img src="https://i.loli.net/2021/03/17/xEocFaQnu24Hlp1.jpg"></p><p><strong>一般升序采用大顶堆，降序采用小顶堆</strong></p><p><strong>基本思想</strong></p><ol><li>将待排序序列构造成一个大顶堆</li><li>此时，整个序列的最大值就是堆顶的最大值</li><li>将其与末尾元素进行交换，此时末尾就为最大值</li><li>然后将剩下的n-1个元素重新构造成一个堆，这样会得到n个元素的次小值。如此反复执行，就得到一个有序序列了。</li></ol><p><strong>图解</strong></p><blockquote><p>步骤一：构造初始堆。将给定无序序列构造成一个大顶堆</p></blockquote><p>1.假设给定无序序列结构如下</p><p><img src="https://i.loli.net/2021/03/17/R7Pzd6y3x129tKH.jpg"></p><p>2.此时我们从最后一个非叶子结点开始（叶结点自然不用调整，第一个非叶子结点 arr.length&#x2F;2-1&#x3D;5&#x2F;2-1&#x3D;1，也就是下面的6结点），从左至右，从下至上进行调整。</p><p><img src="https://i.loli.net/2021/03/17/JzqwdAPQgOe4ytB.jpg"></p><p>3.找到第二个非叶节点4，由于[4,9,8]中9元素最大，4和9交换。</p><p><img src="https://i.loli.net/2021/03/17/J4kIA3uaQmcUgRp.jpg"></p><p>4.这时，交换导致了子根[4,5,6]结构混乱，继续调整，[4,5,6]中6最大，交换4和6。</p><p><img src="https://i.loli.net/2021/03/17/duXn1TpNODwcbyC.jpg"></p><p>此时，我们就将一个无序序列构造成了一个大顶堆。</p><blockquote><p>步骤二 ：将堆顶元素与末尾元素进行交换，使末尾元素最大。然后继续调整堆，再将堆顶元素与末尾元素交换，得到第二大元素。如此反复进行交换、重建、交换。</p></blockquote><p>6.将堆顶元素9和末尾元素4进行交换</p><p><img src="https://i.loli.net/2021/03/17/5mLhj6FV7rW9pJQ.jpg"></p><p>7.重新调整结构，使其继续满足堆定义</p><p><img src="https://i.loli.net/2021/03/17/WpYXTH2VzIQ38Gh.jpg"></p><p>8.再将堆顶元素8与末尾元素5进行交换，得到第二大元素8.</p><p><img src="https://i.loli.net/2021/03/17/aG1XdTEW9ZCSNH7.jpg"></p><p>9.后续过程，继续进行调整，交换，如此反复进行，最终使得整个序列有序</p><p><img src="https://i.loli.net/2021/03/17/RyQJpsnNoCKZg3X.jpg"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">headSort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr [])</span>&#123;<br><span class="hljs-comment">// System.out.println(&quot;堆排序&quot;);</span><br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// //分步完成</span><br><span class="hljs-comment">// adjustHeap(arr,1,arr.length);</span><br><span class="hljs-comment">// System.out.println(&quot;第一次&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment">// adjustHeap(arr,0,arr.length);</span><br><span class="hljs-comment">// System.out.println(&quot;第二次&quot;+ Arrays.toString(arr));</span><br><span class="hljs-comment">//将无序序列构建成一个堆，根据升序降序需求选择大顶堆或小顶堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length /<span class="hljs-number">2</span> -<span class="hljs-number">1</span>;i &gt;=<span class="hljs-number">0</span>;i --)&#123;<br>adjustHeap(arr,i,arr.length);<br>&#125;<br>/\*\*<br>\* <span class="hljs-number">2.</span>将堆顶元素与末尾元素交换，将最大元素沉到数组末端<br>\* <span class="hljs-number">3.</span>重新调整结构，使其满足堆定义，然后继续交换堆顶元素与当前末尾元素，反复执行<br>\*/<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> arr.length -<span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--)&#123;<br><span class="hljs-comment">//交换</span><br>temp = arr[j];<br>arr[j] = arr[<span class="hljs-number">0</span>];<br>arr[<span class="hljs-number">0</span>] = temp;<br>adjustHeap(arr,<span class="hljs-number">0</span>,j);<br>&#125;<br><span class="hljs-comment">// System.out.println(&quot;数组=&quot;+Arrays.toString(arr));</span><br>&#125;<br>/\*\*<br>\*<br>\* <span class="hljs-meta">@param</span> arr 待调整的数组<br>\* <span class="hljs-meta">@param</span> i 表示非叶子节点在数组中的索引<br>\* <span class="hljs-meta">@param</span> length 表示对多少个元素进行调整，length是在逐渐减少<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adjustHeap</span><span class="hljs-params">(<span class="hljs-type">int</span> arr [],<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> length)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span>arr[i]; <span class="hljs-comment">//先取出当前元素的值，保存在临时变量</span><br><span class="hljs-comment">//开始调整</span><br><span class="hljs-comment">//说明</span><br><span class="hljs-comment">//1，k = i \*2 +1 k是i节点的左子节点</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> i \* <span class="hljs-number">2</span> +<span class="hljs-number">1</span>; k &lt; length; k = i \* <span class="hljs-number">2</span> +<span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (k+<span class="hljs-number">1</span> &lt; length &amp;&amp; arr[k] &lt; arr [k+<span class="hljs-number">1</span>])&#123; <span class="hljs-comment">//说明左子节点的值小于右子节点的值</span><br>k ++;<br>&#125;<br><span class="hljs-keyword">if</span> (arr [k] &gt; temp)&#123; <span class="hljs-comment">//如果子节点大于父节点</span><br>arr[i] = arr [k]; <span class="hljs-comment">//把较大的值赋给当前节点</span><br>i = k;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//当for 循环结束后，我们已经将以i 为父节点的树的最大值，放在了最顶（局部）</span><br>arr [i] = temp; <span class="hljs-comment">//将temp值放到调整后的位置</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这篇介绍是三种排序确定有点难，需要大家先理解实现思路，在debug进去程序，去看每一步的操作。</p><h1 id="八大排序算法时间复杂度分析"><a href="#八大排序算法时间复杂度分析" class="headerlink" title="八大排序算法时间复杂度分析"></a>八大排序算法时间复杂度分析</h1><table><thead><tr><th>排序算法</th><th>平均时间</th><th>最差情形</th><th>稳定度</th><th>额外空间</th><th>备注</th></tr></thead><tbody><tr><td>冒泡</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>交换</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>选择</td><td>O(n^2)</td><td>O(n^2)</td><td>不稳定</td><td>O(1)</td><td>n小时较好</td></tr><tr><td>插入</td><td>O(n^2)</td><td>O(n^2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序较好</td></tr><tr><td>基数</td><td>O(logRB)</td><td>O(logRB)</td><td>稳定</td><td>O(n)</td><td>B是真数（0-9）R是基数（个十百）</td></tr><tr><td>Shell</td><td>O(nlogn)</td><td>O(n^s) 1&lt;s&lt;2</td><td>不稳定</td><td>O(1)</td><td>s是所选分组</td></tr><tr><td>快排</td><td>O(nlogn)</td><td>O(n^2)</td><td>不稳定</td><td>O(nlogn)</td><td>n大时较好</td></tr><tr><td>归并</td><td>O(nlogn)</td><td>O(nlogn)</td><td>稳定</td><td>O(1)</td><td>n大时较好</td></tr><tr><td>堆</td><td>O(nlogn)</td><td>O(nlogn)</td><td>不稳定</td><td>O(1)</td><td>n大时较好</td></tr></tbody></table><p><strong>平均时间复杂度和最坏时间复杂度</strong></p><ol><li><p>平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。</p></li><li><p>最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。 这样做的原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会比最坏情况更长。</p><p>​</p></li></ol><p>我个人喜欢快排，尤其是递归实现的快排，理解思想和代码阅读都很容易，在开发中遇到排序通常调用的是集合工具类Arrays的sort()方法，它底层也是用的快排。</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式的多种实现方式</title>
    <link href="/2021/03/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/03/16/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%A4%9A%E7%A7%8D%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>单例模式，顾名思义就是只有一个实例，并且它自己负责创建自己的对象，这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。下面我们来看下有哪几种实现方式吧。</p><p>单例模式分饿汉式和懒汉式，下面介绍下两种的具体写法：</p><h1 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h1><p>饿汉式就是在类加载的时候就已经创建实例，不管你用没用到，都创建。</p><p>好处：线程安全</p><p>坏处：浪费内存空间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hungry</span> &#123;<br><span class="hljs-comment">//构造器私有</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Hungry</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Hungry</span> <span class="hljs-variable">hungry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hungry</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hungry <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> hungry;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以简单的测试下，它在多线程环境下是否会产生线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestHungry</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">8</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;<br>pool.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(Thread.currentThread().getName()+Hungry.getInstance());<br>&#125;<br>&#125;);<br>&#125;<br>pool.shutdown();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>pool-1-thread-8design.singleton.Hungry@fa49b1e<br>pool-1-thread-7design.singleton.Hungry@fa49b1e<br>pool-1-thread-8design.singleton.Hungry@fa49b1e<br>pool-1-thread-5design.singleton.Hungry@fa49b1e<br>pool-1-thread-1design.singleton.Hungry@fa49b1e</p><p>由于打印数据过多，我们只截取一部分，发现他们的hashcode都是一样的，说明他们都是同一个实例对象</p><p>那为什么这种方法就能实现线程安全呢？</p><p>类加载的方式是按需加载，且只加载一次。</p><p>因此，在上述单例类被加载时，就会实例化一个对象并交给自己的引用，供系统使用。单例就是该类只能返回一个实例。</p><p>换句话说，在线程访问单例对象之前就已经创建好了。再加上，<strong>由于一个类在整个生命周期中只会被加载一次</strong>，因此该单例类只会创建一个实例。</p><p>也就是说，线程每次都只能也必定只可以拿到这个唯一的对象。因此就说，饿汉式单例天生就是线程安全的。</p><h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><p>懒汉式，顾名思义就是实例在用到的时候才去创建，“比较懒”，用的时候才去检查有没有实例，如果有则返回，没有则新建。有线程安全和线程不安全两种写法。</p><h2 id="Lazy01"><a href="#Lazy01" class="headerlink" title="Lazy01"></a>Lazy01</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 懒汉式单例<span class="hljs-number">01</span><br>\* 单例实例在第一次使用的时候进行创建，这个类是线程不安全的<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">12</span>:<span class="hljs-number">25</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy01</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy01</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy01</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy01 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//多个线程调用，可能会创建多个对象</span><br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy01</span>();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过测试，发现多线程环境下，拿到实例的hashcode有的是不一样的，就说明它并不能保证线程安全。</p><h2 id="Lazy02"><a href="#Lazy02" class="headerlink" title="Lazy02"></a>Lazy02</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 单例实例在第一次使用的时候进行创建，这个类是线程安全的，但是这个写法不推荐<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">14</span>:<span class="hljs-number">59</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy02</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy02</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy02</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Lazy02 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy02</span>();<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到在获取实例时，该类在方法是加入synchronized以保证线程的有序性，但synchronized是重量级锁，效率并不高。</p><h2 id="Lazy03"><a href="#Lazy03" class="headerlink" title="Lazy03"></a>Lazy03</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 懒汉模式（双重锁同步锁单例模式），单例实例在第一次使用的时候进行创建，但是，<br>\* 这个类不是线程安全的！！！！！<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">15</span>:<span class="hljs-number">01</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy03</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy03</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy03</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//线程不安全</span><br><span class="hljs-comment">//当执行instance = new Lazy04();这行代码时，CPU会执行如下指令：</span><br><span class="hljs-comment">//1.memory = allocate() 分配对象的内存空间</span><br><span class="hljs-comment">//2.ctorInstance() 初始化对象</span><br><span class="hljs-comment">//3.instance = memory 设置instance指向刚分配的内存</span><br><span class="hljs-comment">//单纯执行以上三步没啥问题，但是在多线程情况下，可能会发生指令重排序。</span><br><span class="hljs-comment">// 指令重排序对单线程没有影响，单线程下CPU可以按照顺序执行以上三个步骤，但是在多线程下，如果发生了指令重排序，则会打乱上面的三个步骤。</span><br><span class="hljs-comment">//如果发生了JVM和CPU优化，发生重排序时，可能会按照下面的顺序执行：</span><br><span class="hljs-comment">//1.memory = allocate() 分配对象的内存空间</span><br><span class="hljs-comment">//3.instance = memory 设置instance指向刚分配的内存</span><br><span class="hljs-comment">//2.ctorInstance() 初始化对象</span><br><span class="hljs-comment">//假设目前有两个线程A和B同时执行getInstance()方法，A线程执行到instance = new</span><br><span class="hljs-comment">//SingletonExample4(); B线程刚执行到第一个 if (instance == null)&#123;处，</span><br><span class="hljs-comment">//如果按照1.3.2的顺序，假设线程A执行到3.instance = memory 设置instance指向刚分配的内</span><br><span class="hljs-comment">//存，此时，线程B判断instance已经有值，就会直接return instance;</span><br><span class="hljs-comment">//而实际上，线程A还未执行2.ctorInstance() 初始化对象，也就是说线程B拿到的instance对象</span><br><span class="hljs-comment">// 还未进行初始化，这个未初始化的instance对象一旦被线程B使用，就会出现问题。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy03 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span> (Lazy03.class)&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy03</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注释说的很详细了，就是由于指令的重排，照成代码执行顺序的不一致，可能未初始化取返回给需要实例的类，就会造成安全问题。</p><p>指令重排会发生在编译器或指令并行或者操作系统中，虽然这个概率很小，但并不不能说该单例模式是线程安全的。</p><p>Java中有Volatile关键字，就可以禁止指令重排，具体原因，是操作系统的知识了（本菜鸟现在也没学），以后再深究。</p><h2 id="Lazy04"><a href="#Lazy04" class="headerlink" title="Lazy04"></a>Lazy04</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* （双重锁同步锁单例模式）单例实例在第一次使用的时候进行创建，这个类是线程安全的，使<br>\* 用的是 <span class="hljs-keyword">volatile</span> + 双重检测机制来禁止指令重排达到线程安全<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">15</span>:<span class="hljs-number">07</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy04</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy04</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy05</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy04 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span> (Lazy04.class)&#123;<br><span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>)&#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy05</span>();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加入valitile，禁止指令重排，实现线程安全！</p><h2 id="Lazy05"><a href="#Lazy05" class="headerlink" title="Lazy05"></a>Lazy05</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 单例实例在类装载的时候（使用静态代码块）进行创建，是线程安全的<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">15</span>:09<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy05</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy05</span> <span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Lazy05</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span> &#123;<br>instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy05</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy05 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> instance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>静态代码块，在项目运行时只加载一次，可能和饿汉式有点像，都是借助类加载只会加载一次的特点。</p><h2 id="Lazy06"><a href="#Lazy06" class="headerlink" title="Lazy06"></a>Lazy06</h2><p>以上在懒汉单例模式中实现了线程安全，但都会被万恶之源反射给攻破，所以引入枚举来实现最终的单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 枚举方式进行实例化，是线程安全的，此种方式也是线程最安全的<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">3</span>/<span class="hljs-number">16</span> <span class="hljs-number">15</span>:<span class="hljs-number">11</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Lazy06</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Lazy06</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Lazy06 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> Lazy.INSTANCE.getInstance();<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Lazy</span>&#123;<br>INSTANCE;<br><span class="hljs-keyword">private</span> Lazy06 singleton;<br><span class="hljs-comment">//JVM保证这个方法只会被调一次</span><br>Lazy()&#123; <span class="hljs-comment">//构造方法私有</span><br>singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lazy06</span>();<br>&#125;<br><span class="hljs-keyword">public</span> Lazy06 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> singleton;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>具体为什么能实现避免反射的问题，下面的博文讲的很好：</p><p><a href="https://www.cnblogs.com/chiclee/p/9097772.html">为什么要用枚举实现单例模式（避免反射、序列化问题）</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在写饿汉式单例模式的时候，我建议可以写Lazy04和Lazy06，前者双重检测+volatile，后者是JDK5引入枚举后写单例的方式，都需要掌握。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HashMap源码分析</title>
    <link href="/2021/03/04/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/03/04/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="1-HashMap介绍"><a href="#1-HashMap介绍" class="headerlink" title="1.HashMap介绍"></a>1.HashMap介绍</h1><h2 id="1-1-HashMap底层存储结构"><a href="#1-1-HashMap底层存储结构" class="headerlink" title="1.1 HashMap底层存储结构"></a>1.1 HashMap底层存储结构</h2><blockquote><p>HashMap最早出现在JDK1.2中，底层基于散列算法实现。HashMap 允许 null 键和 null 值，是非线程安全类，在多线程环境下可能会存在问题。</p></blockquote><p>1.8版本的HashMap底层存储结构：</p><p>数组+链表+红黑树</p><p><img src="https://i.loli.net/2021/03/04/Yo9vtBKTcAbWmwx.png"></p><h2 id="1-2-HashMap类的定义"><a href="#1-2-HashMap类的定义" class="headerlink" title="1.2 HashMap类的定义"></a>1.2 HashMap类的定义</h2><p>先来看看HashMap类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HashMap</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractMap</span>&lt;K,V&gt;<br><span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>&lt;K,V&gt;, Cloneable, Serializable &#123;<br></code></pre></td></tr></table></figure><p>从中我们可以了解到：</p><ul><li><p><code>HashMap&lt;K,V&gt;</code>：<code>HashMap</code>是以<code>key-value</code>形式存储数据的。</p></li><li><p><code>extends AbstractMap&lt;K,V&gt;</code>：继承了<code>AbstractMap</code>，大大减少了实现Map接口时需要的工作量。</p></li><li><p><code>implements Map&lt;K,V&gt;</code>：实现了<code>Map</code>，提供了所有可选的<code>Map</code>操作。</p></li><li><p><code>implements Cloneable</code>：表明其可以调用<code>clone()</code>方法来返回实例的<code>field-for-field</code>拷贝。</p></li><li><p><code>implements Serializable</code>：表明该类是可以序列化的。</p><p>​</p></li></ul><p><img src="https://i.loli.net/2021/03/04/FUn6KCZqD2OBdwx.png"></p><h2 id="1-3-put-数据原理分析"><a href="#1-3-put-数据原理分析" class="headerlink" title="1.3 put()数据原理分析"></a>1.3 put()数据原理分析</h2><p><img src="https://i.loli.net/2021/03/04/XK9mWsMO87aFgdS.png"></p><h2 id="1-4常见名词解释"><a href="#1-4常见名词解释" class="headerlink" title="1.4常见名词解释"></a>1.4常见名词解释</h2><ol><li><p>hashmap的底层数据结构名为table的数组，是一个Node数组</p></li><li><p>table数组中的每个元素是一个Node元素（但是这个Node元素可能指向下一个Node元素从而形成链表），table数组的每个位置称为桶，比如talbe[0] 称为一个桶，也可以称为一个bin</p><p>​</p></li></ol><h1 id="2-源码"><a href="#2-源码" class="headerlink" title="2.源码"></a>2.源码</h1><h2 id="2-1-核心属性分析"><a href="#2-1-核心属性分析" class="headerlink" title="2.1 核心属性分析"></a>2.1 核心属性分析</h2><p><strong>静态常量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* The <span class="hljs-keyword">default</span> initial capacity - MUST be a power of two.<br>\* 默认的初始容量，必须是二的次方<br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> DEFAULT\_INITIAL\_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span><br>/\*\*<br>\* The maximum capacity, used <span class="hljs-keyword">if</span> a higher value is implicitly specified<br>\* by either of the constructors with arguments.<br>\* MUST be a power of two &lt;= <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">30.</span><br>\*<br>\* 最大容量，当通过构造函数隐式指定了一个大于MAXIMUM\_CAPACITY的时候使用<br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MAXIMUM\_CAPACITY = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;<br>/\*\*<br>\* The load factor used <span class="hljs-keyword">when</span> none specified in constructor.<br>\* 加载因子，当构造函数没有指定加载因子的时候的默认值的时候使用<br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> DEFAULT\_LOAD\_FACTOR = <span class="hljs-number">0.75f</span>;<br>/\*\*<br>\* The bin count threshold <span class="hljs-keyword">for</span> using a tree rather than list <span class="hljs-keyword">for</span> a<br>\* bin. Bins are converted to trees <span class="hljs-keyword">when</span> adding an element to a<br>\* bin with at least <span class="hljs-built_in">this</span> many nodes. The value must be greater<br>\* than <span class="hljs-number">2</span> and should be at least <span class="hljs-number">8</span> to mesh with assumptions in<br>\* tree removal about conversion back to plain bins upon<br>\* shrinkage.<br>\*<br>\* TREEIFY\_THRESHOLD为当一个bin从list转化为tree的阈值，当一个bin中元素的总元素最低超过这个值的时候，bin才被转化为tree；<br>\* 为了满足转化为简单bin时的要求，TREEIFY\_THRESHOLD必须比<span class="hljs-number">2</span>大而且比<span class="hljs-number">8</span>要小<br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TREEIFY\_THRESHOLD = <span class="hljs-number">8</span>;<br>/\*\*<br>\* The bin count threshold <span class="hljs-keyword">for</span> untreeifying <span class="hljs-title function_">a</span> <span class="hljs-params">(split)</span> bin during a<br>\* resize operation. Should be less than TREEIFY\_THRESHOLD, and at<br>\* most <span class="hljs-number">6</span> to mesh with shrinkage detection under removal.<br>\*<br>\* bin反tree化时的最大值，应该比TREEIFY\_THRESHOLD要小，<br>\* 为了在移除元素的时候能检测到移除动作，UNTREEIFY\_THRESHOLD必须至少为<span class="hljs-number">6</span><br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> UNTREEIFY\_THRESHOLD = <span class="hljs-number">6</span>;<br>/\*\*<br>\* The smallest table capacity <span class="hljs-keyword">for</span> which bins may be treeified.<br>\* (Otherwise the table is resized <span class="hljs-keyword">if</span> too many nodes in a bin.)<br>\* Should be at least <span class="hljs-number">4</span> \* TREEIFY\_THRESHOLD to avoid conflicts<br>\* between resizing and treeification thresholds.<br>\*<br>\* 树化的另外一个阈值，table的长度(注意不是bin的长度)的最小得为<span class="hljs-number">64</span>。为了避免扩容和树型结构化阈值之间的冲突，MIN\_TREEIFY\_CAPACITY 应该最小是 <span class="hljs-number">4</span> \* TREEIFY\_THRESHOLD<br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MIN\_TREEIFY\_CAPACITY = <span class="hljs-number">64</span>;<br></code></pre></td></tr></table></figure><p>成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* The table, initialized on first use, and resized as<br>\* necessary. When allocated, length is always a power of two.<br>\* (We also tolerate length zero in some operations to allow<br>\* bootstrapping mechanics that are currently not needed.)<br>\*<br>\* table，第一次被使用的时候才进行加载<br>\*/<br><span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;<br>/\*\*<br>\* Holds cached <span class="hljs-title function_">entrySet</span><span class="hljs-params">()</span>. Note that AbstractMap fields are used<br>\* <span class="hljs-keyword">for</span> <span class="hljs-title function_">keySet</span><span class="hljs-params">()</span> and <span class="hljs-title function_">values</span><span class="hljs-params">()</span>.<br>\* 键值对缓存，它们的映射关系集合保存在entrySet中。即使Key在外部修改导致hashCode变化，缓存中还可以找到映射关系<br>\*/<br><span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;<br>/\*\*<br>\* The number of key-value mappings contained in <span class="hljs-built_in">this</span> map.<br>\* table中 key-value 元素的个数<br>\*/<br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> size;<br>/\*\*<br>\* The number of times <span class="hljs-built_in">this</span> HashMap has been structurally modified<br>\* Structural modifications are those that change the number of mappings in<br>\* the HashMap or otherwise modify its internal <span class="hljs-title function_">structure</span> <span class="hljs-params">(e.g.,</span><br><span class="hljs-params">\* rehash)</span>. This field is used to make iterators on Collection-views of<br>\* the HashMap fail-fast. (See ConcurrentModificationException).<br>\*<br>\* HashMap在结构上被修改的次数，结构上被修改是指那些改变HashMap中映射的数量或者以其他方式修改其内部结构的次数（例如，rehash）。<br>\* 此字段用于使HashMap集合视图上的迭代器快速失败。<br>\*/<br><span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> modCount;<br>/\*\*<br>\* The next size value at which to <span class="hljs-title function_">resize</span> <span class="hljs-params">(capacity \* load factor)</span>.<br>\*<br>\* 下一次resize扩容阈值，当前table中的元素超过此值时，触发扩容<br>\* threshold = capacity \* load factor<br>\* <span class="hljs-meta">@serial</span><br>\*/<br><span class="hljs-comment">// (The javadoc description is true upon serialization.</span><br><span class="hljs-comment">// Additionally, if the table array has not been allocated, this</span><br><span class="hljs-comment">// field holds the initial array capacity, or zero signifying</span><br><span class="hljs-comment">// DEFAULT\_INITIAL\_CAPACITY.（???????）)</span><br><span class="hljs-type">int</span> threshold;<br>/\*\*<br>\* The load factor <span class="hljs-keyword">for</span> the hash table.<br>\* 负载因子<br>\* <span class="hljs-meta">@serial</span><br>\*/<br><span class="hljs-keyword">final</span> <span class="hljs-type">float</span> loadFactor;<br></code></pre></td></tr></table></figure><p>这里讲下负载因子：</p><blockquote><p>对于 HashMap 来说，负载因子是一个很重要的参数，该参数反应了 HashMap 桶数组的使用情况。通过调节负载因子，可使 HashMap 时间和空间复杂度上有不同的表现。</p></blockquote><p>当我们调低负载因子时，HashMap 所能容纳的键值对数量变少。扩容时，重新将键值对存储新的桶数组里，键的键之间产生的碰撞会下降，链表长度变短。此时，HashMap 的增删改查等操作的效率将会变高，这里是典型的拿空间换时间。</p><p>相反，如果增加负载因子（负载因子可以大于1），HashMap 所能容纳的键值对数量变多，空间利用率高，但碰撞率也高。这意味着链表长度变长，效率也随之降低，这种情况是拿时间换空间。至于负载因子怎么调节，这个看使用场景了。</p><p>一般情况下，我们用默认值就可以了。大多数情况下0.75在时间跟空间代价上达到了平衡所以不建议修改。</p><h2 id="2-2-构造方法分析"><a href="#2-2-构造方法分析" class="headerlink" title="2.2 构造方法分析"></a>2.2 构造方法分析</h2><p>只看构造方法中参数最多的一个即可，其他的都是调用这个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br><span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +<br>initialCapacity);<br><span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM\_CAPACITY)<br>initialCapacity = MAXIMUM\_CAPACITY;<br><span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +<br>loadFactor);<br><span class="hljs-built_in">this</span>.loadFactor = loadFactor;<br><span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);<br>&#125;<br>/\*\*<br>\* Returns a power of two size <span class="hljs-keyword">for</span> the given target capacity.<br>\*<br>\* <span class="hljs-number">1.</span>返回一个大于等于当前值cap的一个的数字，并且这个数字一定是<span class="hljs-number">2</span>的次方数<br>\* 假如cap为<span class="hljs-number">10</span>，那么n= <span class="hljs-number">9</span> = <span class="hljs-number">0b1001</span><br>\* <span class="hljs-number">0b1001</span> | <span class="hljs-number">0b0100</span> = <span class="hljs-number">0b1101</span><br>\* <span class="hljs-number">0b1101</span> | <span class="hljs-number">0b0011</span> = <span class="hljs-number">0b1111</span><br>\* <span class="hljs-number">0b1111</span> | <span class="hljs-number">0b0011</span> = <span class="hljs-number">0b1111</span><br>\* ......<br>\* .....<br>\* n = <span class="hljs-number">0b1111</span> = <span class="hljs-number">15</span><br>\*<br>\* <span class="hljs-number">2.</span>这里的cap必须要减<span class="hljs-number">1</span>，如果不减，并且如果传入的cap为<span class="hljs-number">16</span>，那么算出来的值为<span class="hljs-number">32</span><br>\*<br>\* <span class="hljs-number">3.</span>这个方法就是为了把最高位<span class="hljs-number">1</span>的后面都变为<span class="hljs-number">1</span><br>\* <span class="hljs-number">0001</span> <span class="hljs-number">1101</span> <span class="hljs-number">1100</span> -&gt; <span class="hljs-number">0001</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> -&gt; +<span class="hljs-number">1</span> -&gt; <span class="hljs-number">0010</span> <span class="hljs-number">1111</span> <span class="hljs-number">1111</span><br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;<br>n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br><span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM\_CAPACITY) ? MAXIMUM\_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3-put方法分析"><a href="#2-3-put方法分析" class="headerlink" title="2.3 put方法分析"></a>2.3 put方法分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@param</span> key key with which the specified value is to be associated<br>\* <span class="hljs-meta">@param</span> value value to be associated with the specified key<br>\* <span class="hljs-meta">@return</span> the previous value associated with key, or<br>\* <span class="hljs-literal">null</span> <span class="hljs-keyword">if</span> there was no mapping <span class="hljs-keyword">for</span> key.<br>\* (A <span class="hljs-literal">null</span> <span class="hljs-keyword">return</span> can also indicate that the map<br>\* previously associated <span class="hljs-literal">null</span> with key.)<br>\* 返回先前key对应的value值（如果value为<span class="hljs-literal">null</span>，也返回<span class="hljs-literal">null</span>），如果先前不存在这个key，那么返回的就是<span class="hljs-literal">null</span>；<br>\*/<br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> &#123;<br><span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br>/<br>\* 在往haspmap中插入一个元素的时候，由元素的hashcode经过一个扰动函数之后再与table的长度进行与运算才找到插入位置，下面的这个hash()方法就是所谓的扰动函数<br>\* 作用：让key的hashCode值的高<span class="hljs-number">16</span>位参与运算,hash()方法返回的值的低十六位是有hashCode的高低<span class="hljs-number">16</span>位共同的特征的<br>\* 举例<br>\* hashCode = 0b <span class="hljs-number">0010</span> <span class="hljs-number">0101</span> <span class="hljs-number">1010</span> <span class="hljs-number">1100</span> <span class="hljs-number">0011</span> <span class="hljs-number">1111</span> <span class="hljs-number">0010</span> <span class="hljs-number">1110</span><br>\*<br>\* 0b <span class="hljs-number">0010</span> <span class="hljs-number">0101</span> <span class="hljs-number">1010</span> <span class="hljs-number">1100</span> <span class="hljs-number">0011</span> <span class="hljs-number">1111</span> <span class="hljs-number">0010</span> <span class="hljs-number">1110</span> ^<br>\* 0b <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0000</span> <span class="hljs-number">0010</span> <span class="hljs-number">0101</span> <span class="hljs-number">1010</span> <span class="hljs-number">1100</span><br>\* 0b <span class="hljs-number">0010</span> <span class="hljs-number">0101</span> <span class="hljs-number">1010</span> <span class="hljs-number">1100</span> <span class="hljs-number">0001</span> <span class="hljs-number">1010</span> <span class="hljs-number">1000</span> <span class="hljs-number">0010</span><br>\*/<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> &#123;<br><span class="hljs-type">int</span> h;<br><span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>让高16位参与运算的原因，说明一下：当数组的长度很短时，只有低位数的hashcode值能参与运算。而让高16位参与运算可以更好的均匀散列，减少碰撞，进一步降低hash冲突的几率。并且使得高16位和低16位的信息都被保留了。<br>然后有不少博客提到了因为int是4个字节，所以右移16位。原因大家可以打开hashmap的源码，找到hash方法，按住ctrl点击方法里的hashcode，跳转到Object类，然后可以看到hashcode的数据类型是int。int为4个字节，1个字节8个比特位，就是32个比特位，所以16很可能是因为32对半的结果，也就是让高的那一半也来参与运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,</span><br><span class="hljs-params"><span class="hljs-type">boolean</span> evict)</span> &#123;<br><span class="hljs-comment">// tab表示当前hashmap的table</span><br><span class="hljs-comment">// p表示table的元素</span><br><span class="hljs-comment">// n表示散列表的长度</span><br><span class="hljs-comment">// i表示路由寻址结果</span><br>Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, i;<br><span class="hljs-comment">// 延迟初始化逻辑，第一次调用putval()方法的时候才进行初始化hashmap中最耗内存的talbe</span><br><span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>n = (tab = resize()).length;<br><span class="hljs-comment">// 1.最简单的一种情况，寻找到的桶位，刚好是null，这个时候直接构建Node节点放进去就行了</span><br><span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)<br>tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// e，如果key不为null，并且找到了当前要插入的key一致的node元素，就保存在e中</span><br><span class="hljs-comment">// k表示一个临时的key</span><br>Node&lt;K,V&gt; e; K k;<br><span class="hljs-comment">// 2.表示该桶位中的第一个元素与你当前插入的node元素的key一致，表示后序要进行替换操作</span><br><span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>e = p;<br><span class="hljs-comment">// 3.表示当前桶位已经树化了</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);<br><span class="hljs-comment">// 4.当前捅位是一个链表</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) &#123;<br><span class="hljs-comment">// 4.1 迭代到最后一个元素了也没有找到要插入的key一致的node</span><br><span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) &#123;<br>p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);<br><span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY\_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>treeifyBin(tab, hash);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// 4.1 找到了与要插入的key一致的node元素</span><br><span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br><span class="hljs-keyword">break</span>;<br>p = e;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 如果找到了与要插入的key一致的node元素，那么进行替换</span><br><span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// existing mapping for key</span><br><span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br><span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)<br>e.value = value;<br>afterNodeAccess(e);<br><span class="hljs-keyword">return</span> oldValue;<br>&#125;<br>&#125;<br><span class="hljs-comment">// nodeCount表示散列表table结构的修改次数，替换Node元素的value不算</span><br>++modCount;<br><span class="hljs-keyword">if</span> (++size &gt; threshold)<br>resize();<br>afterNodeInsertion(evict);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>HashMap的hash算法(hash()方法)。</li><li>(n - 1) &amp; hash等价于对 length 取余</li></ol><h2 id="2-4-resize方法分析"><a href="#2-4-resize方法分析" class="headerlink" title="2.4 resize方法分析"></a>2.4 resize方法分析</h2><p>在 HashMap 中，桶数组的长度均是2的幂，阈值大小为桶数组长度与负载因子的乘积。当 HashMap 中的键值对数量超过阈值时，进行扩容。</p><p><strong>举个例子：</strong></p><p>当在table长度位16中的元素移到table长度位32的table中的时候；我们可以知道，原来在15这个槽位的元素的hash()值的后四位一定是1111（因为跟1111即table长度-1 进行与运算得到了1111）。所以所以当table长度变为32的时候，原来在15这个槽位的元素要么还在15这个槽位，要么在31这个操作（因为原来15这个槽位的元素后五位一定是11111或者01111，跟 11111即table新长度-1 进行与运算一定得到 01111或者11111）</p><p><img src="https://i.loli.net/2021/03/04/p51KGxsFgOA4qhQ.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 对table进行初始化或者扩容。<br>\* 如果table为<span class="hljs-literal">null</span>，则对table进行初始化<br>\* 如果对table扩容，因为每次扩容都是翻倍，与原来计算（n-<span class="hljs-number">1</span>）&amp;hash的结果相比，节点要么就在原来的位置，要么就被分配到“原位置+旧容量”这个位置。<br>\*/<br><span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;<br>Node&lt;K,V&gt;[] oldTab = table;<br><span class="hljs-comment">// oldCap表示扩容之前table数组的长度</span><br><span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;<br><span class="hljs-comment">// oldThr表示本次扩容之前的阈值，触发本次扩容操作的阈值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;<br><span class="hljs-comment">// newCap：表示扩容之后table数组的大小； newThr表示扩容之后，下次出发扩容的条件</span><br><span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//===================给newCap和newThr赋值start=============================</span><br><span class="hljs-comment">// oldCap大于零，说明之前已经初始化过了（hashmap中的散列表不是null），要进行正常的扩容操作</span><br><span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// 已经最大值了，不再扩容了</span><br><span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM\_CAPACITY) &#123;<br>threshold = Integer.MAX\_VALUE;<br><span class="hljs-keyword">return</span> oldTab;<br>&#125;<br><span class="hljs-comment">// （1）进行翻倍扩容(假如旧的oldCap为8， &lt; DEFAULT\_INITIAL\_CAPACITY，那么此条件不成立newThr将不会赋值)</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM\_CAPACITY &amp;&amp;<br>oldCap &gt;= DEFAULT\_INITIAL\_CAPACITY)<br>newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span><br>&#125;<br><span class="hljs-comment">// （2）</span><br><span class="hljs-comment">// oldCap == 0（说明hashmap中的散列表是null）且oldThr &gt; 0 ；下面几种情况都会出现oldCap == 0,oldThr &gt; 0</span><br><span class="hljs-comment">// 1.public HashMap(int initialCapacity);</span><br><span class="hljs-comment">// 2.public HashMap(Map&lt;? extends K, ? extends V&gt; m);并且这个map有数据</span><br><span class="hljs-comment">// 3.public HashMap(int initialCapacity, float loadFactor);</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span><br>newCap = oldThr;<br><span class="hljs-comment">// oldCap == 0, oldThr == 0</span><br><span class="hljs-comment">// public HashMap();</span><br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// zero initial threshold signifies using defaults</span><br>newCap = DEFAULT\_INITIAL\_CAPACITY;<br>newThr = (<span class="hljs-type">int</span>)(DEFAULT\_LOAD\_FACTOR \* DEFAULT\_INITIAL\_CAPACITY);<br>&#125;<br><span class="hljs-comment">// 对应上面（1）不成立或者（2）成立的情况</span><br><span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap \* loadFactor;<br>newThr = (newCap &lt; MAXIMUM\_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM\_CAPACITY ?<br>(<span class="hljs-type">int</span>)ft : Integer.MAX\_VALUE);<br>&#125;<br><span class="hljs-comment">//===================给newCap和newThr赋值end=============================</span><br>threshold = newThr;<br><span class="hljs-meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span><br>Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];<br>table = newTab;<br><span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>Node&lt;K,V&gt; e;<br><span class="hljs-comment">// 头结点不为空</span><br><span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 将对应的桶位指向null，方便jvm回收</span><br>oldTab[j] = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">// 1.如果只有一个节点</span><br><span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)<br>newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br><span class="hljs-comment">// 2.树化了</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);<br><span class="hljs-comment">// 3.还是链表</span><br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br><span class="hljs-comment">// 低位链表：存放在扩容之后的数组下标的位置，与当前数组下标位置一致的元素</span><br><span class="hljs-comment">// 高位链表：存放在扩容之后的数组下标的位置为当前数组下标位置+ 扩容之前数组长度的元素</span><br>Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;<br>Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;<br>Node&lt;K,V&gt; next;<br><span class="hljs-keyword">do</span> &#123;<br>next = e.next;<br><span class="hljs-comment">// 比如e.hash只能为两种可能 1 1111 或者 0 1111 ， oldCap 为 10000</span><br><span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)<br>loHead = e;<br><span class="hljs-keyword">else</span><br>loTail.next = e;<br>loTail = e;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)<br>hiHead = e;<br><span class="hljs-keyword">else</span><br>hiTail.next = e;<br>hiTail = e;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);<br><span class="hljs-comment">// 如果低位链表有数据</span><br><span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) &#123;<br>loTail.next = <span class="hljs-literal">null</span>;<br>newTab[j] = loHead;<br>&#125;<br><span class="hljs-comment">// 如果高位链表有数据</span><br><span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) &#123;<br>hiTail.next = <span class="hljs-literal">null</span>;<br>newTab[j + oldCap] = hiHead;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> newTab;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>整体步骤：</strong></p><ol><li>计算新桶数组的容量 newCap 和新阈值 newThr</li><li>根据计算出的 newCap 创建新的桶数组，桶数组 table 也是在这里进行初始化的</li><li>将键值对节点重新映射到新的桶数组里。如果节点是 TreeNode 类型，则需要拆分红黑树。如果是普通节点，则节点按原顺序进行分组。</li></ol><p>总结起来，一共有三种<strong>扩容方式</strong>：</p><ol><li><p>使用默认构造方法初始化HashMap。从前文可以知道HashMap在一开始初始化的时候会返回一个空的table，并且thershold为0。因此第一次扩容的容量为默认值DEFAULT_INITIAL_CAPACITY也就是16。同时threshold &#x3D; DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR &#x3D; 12。</p></li><li><p>指定初始容量的构造方法初始化HashMap。那么从下面源码可以看到初始容量会等于threshold，接着threshold &#x3D; 当前的容量（threshold） * DEFAULT_LOAD_FACTOR。</p></li><li><p>HashMap不是第一次扩容。如果HashMap已经扩容过的话，那么每次table的容量以及threshold量为原有的两倍。</p><p>​</p></li></ol><p>细心点的人会很好奇，为什么要判断loadFactor为0呢？</p><blockquote><p>loadFactor小数位为 0，整数位可被2整除且大于等于8时，在某次计算中就可能会导致 newThr 溢出归零。</p></blockquote><h2 id="2-5-get方法分析"><a href="#2-5-get方法分析" class="headerlink" title="2.5 get方法分析"></a>2.5 get方法分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> &#123;<br>Node&lt;K,V&gt; e;<br><span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;<br>&#125;<br><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;<br><span class="hljs-comment">// tab：引用当前hashmap的table</span><br><span class="hljs-comment">// first：桶位中的头元素</span><br><span class="hljs-comment">// n：table的长度</span><br><span class="hljs-comment">// e：是临时Node元素</span><br><span class="hljs-comment">// k：是key的临时变量</span><br>Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;<br><span class="hljs-comment">// 1.如果哈希表为空，或key对应的桶为空，返回null</span><br><span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>(first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 2.这个桶的头元素就是想要找的</span><br><span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br><span class="hljs-keyword">return</span> first;<br><span class="hljs-comment">// 说明当前桶位不止一个元素，可能是链表，也可能是红黑树</span><br><span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 3.树化了</span><br><span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br><span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br><span class="hljs-comment">// 4.链表</span><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br><span class="hljs-keyword">return</span> e;<br>&#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-6-remove方法分析"><a href="#2-6-remove方法分析" class="headerlink" title="2.6 remove方法分析"></a>2.6 remove方法分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> &#123;<br>Node&lt;K,V&gt; e;<br><span class="hljs-keyword">return</span> (e = removeNode(hash(key), key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) == <span class="hljs-literal">null</span> ?<br><span class="hljs-literal">null</span> : e.value;<br>&#125;<br><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">removeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value,</span><br><span class="hljs-params"><span class="hljs-type">boolean</span> matchValue, <span class="hljs-type">boolean</span> movable)</span> &#123;<br><span class="hljs-comment">// tab：引用当前hashmap的table</span><br><span class="hljs-comment">// p：当前的node元素</span><br><span class="hljs-comment">// n：当前的散列表数组长度</span><br><span class="hljs-comment">// index：表示寻址结果</span><br>Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, index;<br><span class="hljs-comment">// 1.如果数组table为空或key映射到的桶为空，返回null。</span><br><span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>(p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// node：查找到的结果</span><br><span class="hljs-comment">// e：当前Node的下一个元素</span><br>Node&lt;K,V&gt; node = <span class="hljs-literal">null</span>, e; K k; V v;<br><span class="hljs-comment">// 2.桶位的头元素就是我们要找的</span><br><span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;<br>((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br>node = p;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = p.next) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 3.树化了</span><br><span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);<br><span class="hljs-comment">// 4.链表中</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>((k = e.key) == key ||<br>(key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k)))) &#123;<br>node = e;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>p = e;<br>&#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 如果node不为null，说明按照key查找到想要删除的数据了</span><br><span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||<br>(value != <span class="hljs-literal">null</span> &amp;&amp; value.equals(v)))) &#123;<br><span class="hljs-comment">// 是树，删除节点</span><br><span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)<br>((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="hljs-built_in">this</span>, tab, movable);<br><span class="hljs-comment">// 删除的桶的第一个元素</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == p)<br>tab[index] = node.next;<br><span class="hljs-comment">// 不是第一个元素</span><br><span class="hljs-keyword">else</span><br>p.next = node.next;<br>++modCount;<br>--size;<br>afterNodeRemoval(node);<br><span class="hljs-keyword">return</span> node;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-replace方法分析"><a href="#2-7-replace方法分析" class="headerlink" title="2.7 replace方法分析"></a>2.7 replace方法分析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">replace</span><span class="hljs-params">(K key, V oldValue, V newValue)</span> &#123;<br>Node&lt;K,V&gt; e; V v;<br><span class="hljs-keyword">if</span> ((e = getNode(hash(key), key)) != <span class="hljs-literal">null</span> &amp;&amp;<br>((v = e.value) == oldValue || (v != <span class="hljs-literal">null</span> &amp;&amp; v.equals(oldValue)))) &#123;<br>e.value = newValue;<br>afterNodeAccess(e);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> V <span class="hljs-title function_">replace</span><span class="hljs-params">(K key, V value)</span> &#123;<br>Node&lt;K,V&gt; e;<br><span class="hljs-keyword">if</span> ((e = getNode(hash(key), key)) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;<br>e.value = value;<br>afterNodeAccess(e);<br><span class="hljs-keyword">return</span> oldValue;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8-其他常用方法"><a href="#2-8-其他常用方法" class="headerlink" title="2.8 其他常用方法"></a>2.8 其他常用方法</h2><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a><strong>isEmpty()</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">/\*\*<br>\* 如果map中没有键值对映射，返回true<br>\*<br>\* @return &lt;如果map中没有键值对映射，返回true<br>\*/<br>public boolean isEmpty() &#123;<br>return size == 0;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="putMapEntries"><a href="#putMapEntries" class="headerlink" title="putMapEntries()"></a>putMapEntries()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putMapEntries</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m, <span class="hljs-type">boolean</span> evict)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> m.size();<br><span class="hljs-keyword">if</span> (s &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">// table为null，代表这里使用HashMap(Map&lt;? extends K, ? extends V&gt; m)构造函数 或者其它方式实例化hashmap但是还没往里面添加过元素</span><br><span class="hljs-keyword">if</span> (table == <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// pre-size</span><br><span class="hljs-comment">//前面讲到，initial capacity\*load factor就是当前hashMap允许的最大元素数目。那么不难理解，s/loadFactor+1即为应该初始化的容量。</span><br><span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> ((<span class="hljs-type">float</span>)s / loadFactor) + <span class="hljs-number">1.0F</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> ((ft &lt; (<span class="hljs-type">float</span>)MAXIMUM\_CAPACITY) ?<br>(<span class="hljs-type">int</span>)ft : MAXIMUM\_CAPACITY);<br><span class="hljs-keyword">if</span> (t &gt; threshold)<br>threshold = tableSizeFor(t);<br>&#125;<br><span class="hljs-comment">//table已经初始化，并且map的大小大于临界值</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s &gt; threshold)<br><span class="hljs-comment">//扩容处理</span><br>resize();<br><span class="hljs-comment">//将map中所有键值对添加到hashMap中</span><br><span class="hljs-keyword">for</span> (Map.Entry&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">K</span>, ? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">V</span>&gt; e : m.entrySet()) &#123;<br><span class="hljs-type">K</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> e.getKey();<br><span class="hljs-type">V</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> e.getValue();<br>putVal(hash(key), key, value, <span class="hljs-literal">false</span>, evict);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="putAll"><a href="#putAll" class="headerlink" title="putAll()"></a>putAll()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 将参数map中的所有键值对映射插入到hashMap中，如果有碰撞，则覆盖value。<br>\* <span class="hljs-meta">@param</span> m 参数map<br>\* <span class="hljs-meta">@throws</span> NullPointerException 如果map为<span class="hljs-literal">null</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">putAll</span><span class="hljs-params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;<br>putMapEntries(m, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 删除map中所有的键值对<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> &#123;<br>Node&lt;K,V&gt;[] tab;<br>modCount++;<br><span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; size &gt; <span class="hljs-number">0</span>) &#123;<br>size = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tab.length; ++i)<br>tab[i] = <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="containsValue-Object-value"><a href="#containsValue-Object-value" class="headerlink" title="containsValue( Object value)"></a>containsValue( Object value)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 如果hashMap中的键值对有一对或多对的value为参数value，返回<span class="hljs-literal">true</span><br>\*<br>\* <span class="hljs-meta">@param</span> value 参数value<br>\* <span class="hljs-meta">@return</span> 如果hashMap中的键值对有一对或多对的value为参数value，返回<span class="hljs-literal">true</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsValue</span><span class="hljs-params">(Object value)</span> &#123;<br>Node&lt;K,V&gt;[] tab; V v;<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; size &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//遍历数组table</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; tab.length; ++i) &#123;<br><span class="hljs-comment">//遍历桶中的node</span><br><span class="hljs-keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="hljs-literal">null</span>; e = e.next) &#123;<br><span class="hljs-keyword">if</span> ((v = e.value) == value ||<br>(value != <span class="hljs-literal">null</span> &amp;&amp; value.equals(v)))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-疑问和解答"><a href="#3-疑问和解答" class="headerlink" title="3.疑问和解答"></a>3.疑问和解答</h1><p><strong>1. JDK1.7是基于数组+单链表实现（为什么不用双链表）</strong></p><p>首先，用链表是为了解决hash冲突。</p><p>单链表能实现为什么要用双链表呢?(双链表需要更大的存储空间)</p><p><strong>2. 为什么要用红黑树，而不用平衡二叉树？</strong></p><p>插入效率比平衡二叉树高，查询效率比普通二叉树高。所以选择性能相对折中的红黑树。</p><p><strong>3. 重写对象的Equals方法时，要重写hashCode方法，为什么？跟HashMap有什么关系？</strong></p><p>equals与hashcode间的关系:</p><ol><li>如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同；</li><li>如果两个对象的hashCode相同，它们并不一定相同(即用equals比较返回false)</li></ol><p>因为在 HashMap 的链表结构中遍历判断的时候，特定情况下重写的 equals 方法比较对象是否相等的业务逻辑比较复杂，循环下来更是影响查找效率。所以这里把 hashcode 的判断放在前面，只要 hashcode 不相等就玩儿完，不用再去调用复杂的 equals 了。很多程度地提升 HashMap 的使用效率。</p><p>所以重写 hashcode 方法是为了让我们能够正常使用 HashMap 等集合类，因为 HashMap 判断对象是否相等既要比较 hashcode 又要使用 equals 比较。而这样的实现是为了提高 HashMap 的效率。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> &#123;<br>Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="hljs-type">int</span> n; K k;<br><span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>(first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span><br>((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br><span class="hljs-keyword">return</span> first;<br><span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)<br><span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))<br><span class="hljs-keyword">return</span> e;<br>&#125; <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4. 既然红黑树那么好，为啥hashmap不直接采用红黑树，而是当大于8个的时候才转换红黑树？</strong></p><p>因为红黑树需要进行左旋，右旋操作， 而单链表不需要。</p><p>以下都是单链表与红黑树结构对比。</p><p>如果元素小于8个，查询成本高，新增成本低。</p><p>如果元素大于8个，查询成本低，新增成本高。</p><p>至于为什么选数字8，是大佬折中衡量的结果，就像loadFactor默认值0.75一样。</p><p><strong>5. JDK1.8的HashMap在链表插入时是尾插法，而1.7是头插法，为什么？</strong></p><p>HashMap在jdk1.7中采用头插入法，在扩容时会改变链表中元素原本的顺序，以至于在并发场景下导致链表成环的问题。而在jdk1.8中采用尾插入法，在扩容时会保持链表元素原本的顺序，就不会出现链表成环的问题了。</p><p><strong>6. 总结下HashMap在1.7和1.8之间的变化：</strong></p><ul><li><p>1.7采用数组+单链表，1.8在单链表超过一定长度后改成红黑树存储。</p></li><li><p>1.7扩容时需要重新计算哈希值和索引位置，1.8并不重新计算哈希值，巧妙地采用和扩容后容量进行&amp;操作来计算新的索引位置。</p></li><li><p>1.7插入元素到单链表中采用头插入法，1.8采用的是尾插入法。</p><p>​</p></li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h1><p><a href="https://www.bilibili.com/video/BV1LJ411W7dP?p=5">HashMap全B站最细致源码分析课程</a></p><p><a href="https://blog.csdn.net/yue_2018/article/details/89235709">HashMap源码分析</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈==和equals</title>
    <link href="/2021/02/27/%E6%B5%85%E8%B0%88-%E5%92%8Cequals/"/>
    <url>/2021/02/27/%E6%B5%85%E8%B0%88-%E5%92%8Cequals/</url>
    
    <content type="html"><![CDATA[<h1 id="1-运行时数据区"><a href="#1-运行时数据区" class="headerlink" title="1.运行时数据区"></a>1.运行时数据区</h1><p><img src="https://i.loli.net/2021/02/27/ZpzPiYEoBR9GSns.png"></p><p>粗略的讲下Java的内存结构，要想深入的讲还需要把JVM的知识拿来，但我们现在的核心是<strong>比较&#x3D;&#x3D;和equals的区别</strong>以及<strong>常见数据类型</strong>在取等和调用equals时产生的结果和原因。</p><p>如上图，很重要的就是栈，堆，方法区，下面简单介绍他们的作用：</p><p>栈（stack）：位于通用RAM中，但通过它的“栈指针”可以从处理器哪里获得支持。栈指针若向下移动，则分配新的内存；若向上移动，则释放那些 内存。这是一种快速有效的分配存储方法，仅次于寄存器。创建程序时候，JAVA编译器必须知道存储在栈内所有数据的确切大小和生命周期，因为它必须生成 相应的代码，以便上下移动栈指针。这一约束限制了程序的灵活性，所以虽然某些JAVA数据存储在栈中——特别是对象引用，但是JAVA对象不存储其中。</p><p>– 存放基本类型的变量数据和对象，数组的<strong>引用</strong>，但对象本身不存放在栈中，而是存放在堆（new 出来的对象）或者常量池中（字符串常量对象存放在常量池中）。</p><p>堆（heap）：一种通用性的内存池（也存在于RAM中），用于存放所以的JAVA对象。堆不同于栈的好处是：编译器不需要知道要从堆里分配多少存储区 域，也不必知道存储的数据在堆里存活多长时间。因此，在堆里分配存储有很大的灵活性。当你需要创建一个对象的时候，只需要new写一行简单的代码，当执行 这行代码时，会自动在堆里进行存储分配。当然，为这种灵活性必须要付出相应的代码。用堆进行存储分配比用栈进行存储存储需要更多的时间。</p><p>— 存放所有new出来的对象，GC会调用垃圾回收算法回收过期的对象。</p><p>方法区：里面存储运行时<strong>常量池</strong>，已被虚拟机加载的<strong>类信息、常量、静态变量</strong>，及时编译器编译后的代码等数据，常量以HashSet的策略存储。</p><p>以上三者，速度最快的是方法区，其次是堆，最后的栈，</p><h1 id="2-和-equals比较的到底是什么？"><a href="#2-和-equals比较的到底是什么？" class="headerlink" title="2.&#x3D;&#x3D; 和 equals比较的到底是什么？"></a>2.&#x3D;&#x3D; 和 equals比较的到底是什么？</h1><p>很多朋友可能和我一样，大一才学Java，老师就只说&#x3D;&#x3D; 比较的是数据储存的地址，equals比较的是内容，举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br>System.out.println(s1 == s2);<br>System.out.println(s1.equals(s2));<br></code></pre></td></tr></table></figure><p>按照老师的说法，这两个应该都是正确的，确实我们运行代码与我们预期相符，那么现在又来了个兄弟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(s1 == s3);<br>System.out.println(s1.equals(s3));<br></code></pre></td></tr></table></figure><p>可以思考下结果，我们即将进入今天的正题！</p><p>运行程序结果发现是</p><p>false</p><p>true</p><p>s3不也是字符串“123”吗为什么是false？</p><p>为了理清楚里面的奥妙，我们需要记住下面关于&#x3D;&#x3D;和equals的规则：</p><p>1.&#x3D;&#x3D;<br> 比较基本数据类型时，比较的是数值 byte，short，char，int，float，double，long，boolean<br> 他们作为常量在方法区中的常量池以<strong>HashSet的策略存储</strong>,栈中的数据可以共享,所以基本数据类型和String常量是可以之间通过&#x3D;&#x3D;来比较的<br> 比较引用类型：比较引用指向的地址<br> 2.equals<br> 默认比较地址，该方法最初定义在Object上，默认的实现就是比较地址<br> 自定义的类，如果需要比较的是内容，就需要重写String的equals方法</p><p>&#x3D;&#x3D;对于基本数据类型比较的就是值，因为他们存储在方法区的常量池，对于应用类型（如String）就是比较的地址，equals默认是比较的地址，也就是说默认和&#x3D;&#x3D;是没区别的，但String重写了equals方法，比较字符串的内容！而对于基本数据就只能通过&#x3D;&#x3D;来比较，用equals连编译都无法通过！</p><p>要想知道s3不是字符串“123”吗？为什么是false，我们要一步一步的来！</p><h1 id="3-关于String不得不清楚的八大情况"><a href="#3-关于String不得不清楚的八大情况" class="headerlink" title="3.关于String不得不清楚的八大情况"></a>3.关于String不得不清楚的八大情况</h1><p><strong>1. String str &#x3D; “abc”; &#x2F;&#x2F;引用常量池的对象</strong></p><blockquote><p>String str &#x3D; “abc” 的创建过程：<br> 1 首先在常量池中查找是否存在内容为”abc”字符串对象<br> 2 如果不存在则在常量池中创建”abc”，并让str引用该对象<br> 3 如果存在则直接让str引用该对象</p></blockquote><p><strong>2.String str1 &#x3D; “abc”;</strong></p><p><strong>String str2 &#x3D; new String(“abc”).intern();</strong></p><p><strong>System.out.println(str1 &#x3D;&#x3D; str2);</strong></p><blockquote><p>String str &#x3D; new String(“abc”)创建实例的过程：<br>1.首先在堆中（不是常量池）创建一个指定的对象”abc”，并让str引用指向该对象<br>在字符串常量池中查看，是否存在内容为”abc”字符串对象<br>若存在，则将new出来的字符串对象与字符串常量池中的对象联系起来<br>若不存在，则在字符串常量池中创建一个内容为”abc”的字符串对象，并将堆中的对象与之联系起来<br>intern 方法可以返回该字符串在常量池中的对象的引用，可以通过下面代码简单的测试<br>当调用 intern 方法时，如果池已经包含一个等于此 String 对象的字符串（用 equals(Object) 方法确定），则返回池中的字符串。否则，将此 String 对<br>它遵循以下规则：对于任意两个字符串 s 和 t ，当且仅当 s.equals(t) 为 true 时，s.intern() &#x3D;&#x3D; t.intern() 才为 true 。</p></blockquote><p>到这里我们就可以介绍上面的问题s3是字符串“123”为什么是false，因为s3是new出来的，首先就在堆中创建了“123”，即使后面再常量池中查找“123”是存在的，但&#x3D;&#x3D;始终是比较的地址，所以即使取等内容相同的s1和s3也是返回false；</p><p><strong>3.String str3 &#x3D; “ab” + “c”;</strong></p><p>​ <strong>System.out.println(str1 &#x3D;&#x3D; str3);</strong></p><blockquote><p>str2会找常量池中是否存在”abc”，如果存在就把str2指向str1，显然str1已经在常量区创建了”abc”,&#x3D;&#x3D; 是对于引用类型是比较地址，所以str1 和str2 都指向”abc”,结果为true。</p></blockquote><p><strong>4.String str4 &#x3D; “ab”;</strong></p><p><strong>String str5 &#x3D; str4 + “c”;</strong></p><p><strong>System.out.println(str5 &#x3D;&#x3D; str1);</strong></p><blockquote><p>是因为String str5 &#x3D; str4 + “c”涉及到变量（不全是常量）的相加，所以会生成新的对象，其内部实现是先new一个StringBuilder，然后 append(str4),append(“c”);然后让str5引用toString()返回的对象。</p></blockquote><p>简单的说就是new了一个StringBuilder，产生了新对象。</p><p><strong>5.System.out.println(str1 &#x3D;&#x3D; str2);</strong></p><blockquote><p>我们知道用equals比较str1和str2是毫无疑问返回true的，因为equal默认比较的是引用地址<br> &#x3D;&#x3D;对于引用类型也是比较地址，str1 str2 常量存放在常量区，上文也已经提到str1和str2的创建过程，先看常量区是否存在”abc”,若有就不创建了，之间让str2应用该地址，若无则创建，可以看到str1和str2都是指向的该地址，故&#x3D;&#x3D;返回</p></blockquote><p><strong>6.str1 &#x3D; “bcd”;</strong></p><p><strong>System.out.println(str1 &#x3D;&#x3D; str2);</strong></p><blockquote><p>赋值的变化导致了类对象引用的变化，str1指向了另外一个新对象！而str2仍旧指向原来的对象。上例中，当我们将str1的值改为”bcd”时，</p><p>JVM发现在 常量池中没有存放该值的地址，便开辟了这个地址，并创建了一个新的对象，其字符串的值指向这个地址。</p></blockquote><p><strong>7.String str6 &#x3D; str1;</strong></p><p><strong>System.out.println(str6);</strong></p><p><strong>String str7 &#x3D; “bcd”;</strong></p><p><strong>System.out.println(str1 &#x3D;&#x3D; str7);</strong></p><blockquote><p>常量池中不仅仅是对于基本数据类型是以HashSer策略存储的，对于String也是一样，一个常量只会对于一个地址</p></blockquote><p><strong>8.String str8 &#x3D; new String(“abc”);</strong></p><p><strong>String str9 &#x3D; “abc”;</strong></p><p><strong>System.out.println(str8 &#x3D;&#x3D; str9);</strong></p><blockquote><p>new会之间在堆中创建对象，所以str8的引用也是指向的堆中的对象<br> str8是常量区的，即使数据相同，也不会返回true</p></blockquote><h1 id="4-Integer的缓存机制、自带拆箱"><a href="#4-Integer的缓存机制、自带拆箱" class="headerlink" title="4.Integer的缓存机制、自带拆箱"></a>4.Integer的缓存机制、自带拆箱</h1><p><strong>1.Integer i1 &#x3D; new Integer(12);</strong></p><p><strong>Integer i2 &#x3D; new Integer(12);</strong></p><p><strong>System.out.println(i1 &#x3D;&#x3D; i2); &#x2F;&#x2F;false</strong></p><blockquote><p>这里很简单，new了新的对象，在堆中开辟新的空间，&#x3D;&#x3D;对于引用类型比较的是地址，很显然两者地址不一样(数值相同)</p></blockquote><p><strong>2.Integer i3 &#x3D; 14;</strong></p><p><strong>Integer i4 &#x3D; 14;</strong></p><p><strong>int i5 &#x3D; 14;</strong></p><p><strong>System.out.println(i3 &#x3D;&#x3D; i4);</strong> &#x2F;&#x2F;true</p><p><strong>System.out.println(i3 &#x3D;&#x3D; i5);</strong> &#x2F;&#x2F;true</p><blockquote><p>对于i3 &#x3D;&#x3D; i4是返回true，很多人可能觉得是存放在常量区的原因，其实不然，这是Integer的缓存机制，我们将在下一个示例中得到验证</p><p>i3 &#x3D;&#x3D; i4 返回true是自动拆箱机制，Integer转int &#x3D;&#x3D;对于基本数据类型比较的是值</p></blockquote><p><strong>3.Integer i6 &#x3D; 128;</strong></p><p><strong>Integer i7 &#x3D; 128;</strong></p><p><strong>int i8 &#x3D; 128;</strong></p><p><strong>System.out.println(i6 &#x3D;&#x3D; i7);</strong> &#x2F;&#x2F; false 超出Integer缓存范围，</p><p>**System.out.println(i6 &#x3D;&#x3D; i8); **&#x2F;&#x2F;true</p><blockquote><p>可以看到即使i6 和 i7 数值相同，但取&#x3D;&#x3D;并不返回true，这时我们可以翻阅Integer的源码：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Integer <span class="hljs-title function_">valueOf</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br><span class="hljs-keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)<br><span class="hljs-keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(i);<br>&#125;<br><span class="hljs-comment">//若数值在-127 - 128之间则会从缓存中拿，不会new 也就不会</span><br><span class="hljs-comment">//存在的值而已</span><br><span class="hljs-comment">//若不在，则会new 开辟新的堆空间</span><br></code></pre></td></tr></table></figure><p>其实，Integer是个大坑，在阿里开发手册就明确写道：</p><p><strong>整型包装类对象之间值的比较，全部使用 equals 方法比较！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>八大排序算法（上）</title>
    <link href="/2021/02/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2021/02/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="排序算法的介绍"><a href="#排序算法的介绍" class="headerlink" title="排序算法的介绍"></a>排序算法的介绍</h1><p>排序也称排序算法(Sort Algorithm)，排序是将<strong>一组数据</strong>，依<strong>指定的顺序</strong>进行<strong>排列的过程</strong>。</p><h1 id="排序的分类"><a href="#排序的分类" class="headerlink" title="排序的分类"></a>排序的分类</h1><p>​ 1.内部排序：</p><p>​ 指将需要处理的所有数据都加载到<strong>内部存储器</strong>（内存）中进行排序。</p><p>​ 2.外部排序：</p><p>​ <strong>数据量过大</strong>，无法全部加载到内存中，需要借助<strong>外部存储</strong>（文件等）进行排序。</p><p>​ 3.常见的内部排序算法：</p><p>​ <img src="https://i.loli.net/2021/02/18/omYbVgidws6nUyM.jpg"></p><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>冒泡排序（Bubble Sorting）的基本思想是：通过待排序序列从前向后（从下标较小的元素开始），依次比较相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就像水滴的气泡逐渐向上冒。</p><p>一句话概括：<strong>先找大的，找到了就按先后顺序往末尾移动。</strong></p><p><img src="https://i.loli.net/2021/02/18/waCAqrxp1BeV68D.jpg"></p><p>思路很简单，就是把在前面通过比较相邻的两个数，遍历数组找到最大的，移动到数组的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] bubbleSort(<span class="hljs-type">int</span>[] array)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span> ; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length -<span class="hljs-number">1</span> -i ; j++) &#123;<br><span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>])&#123;<br>temp = array[j];<br>array[j] = array[j+<span class="hljs-number">1</span>];<br>array[j+<span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以在图示中看到，在第三趟排序退出时，数组已经是有序的了，但还是依然会走第四趟排序，再与相邻元素进行比较，所以可以优化，加入标志位，判断是否进入交换 if (array[j] &gt; array[j+1])中，未进入，说明数组已经是有序的了，直接返回即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] bubbleSort(<span class="hljs-type">int</span>[] array)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length - <span class="hljs-number">1</span> ; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length -<span class="hljs-number">1</span> -i ; j++) &#123;<br><span class="hljs-keyword">if</span> (array[j] &gt; array[j+<span class="hljs-number">1</span>])&#123;<br>temp = array[j];<br>array[j] = array[j+<span class="hljs-number">1</span>];<br>array[j+<span class="hljs-number">1</span>] = temp;<br>flag = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (!flag) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>flag = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>一句话来说：<strong>把最小的值提到数组前面，在数组的首部逐步有序化</strong></p><p><img src="https://i.loli.net/2021/02/18/NnmeAFlwDL4IgTU.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br><span class="hljs-comment">//假定第一个是最小</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; array.length - <span class="hljs-number">1</span>; j++) &#123;<br><span class="hljs-comment">//交换次数 n- 1 与冒泡一样 时间复杂度O(n^2)</span><br><span class="hljs-comment">//假定最小的值，其索引为0，遍历数组，找到真正最小的值，交换，然后将0索引后移一位，找到第二小的</span><br>minIndex = j;<br>min = array[j];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> minIndex +<span class="hljs-number">1</span>; i &lt; array.length; i++) &#123;<br><span class="hljs-keyword">if</span> (array[i] &lt; min)&#123;<br>minIndex = i;<br>min = array[i];<br>&#125;<br>&#125;<br><span class="hljs-comment">//将找到的最小值与假定的最小值进行交换-- 交换排序的核心</span><br>array[minIndex] = array[j];<br>array[j] = min;<br>System.out.println(Arrays.toString(array));<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;最终-&quot;</span>+Arrays.toString(array));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比冒泡排序和选择排序，前者找最大的放末尾，后置找最小的放首部，感觉这完全就是一种算法吧，在冒泡在改变条件，也可以实现这样的效果，其实并不这样，这两种算法虽然表面是兄弟，但实现思想却不一样：</p><p>冒泡是在从索引为0的元素相邻之间逐个比较，最后把最大元素放到最后，没错是<strong>相邻之间，一直进行比较和交换</strong>。</p><p>选择排序又是基于另一种算法思想，假定索引为0的元素是最小，遍历数组，看有不有更小的，<strong>直到遍历完全，保存最小元素的索引，最后进行交换</strong>，而不是每次一比较就交换。</p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序就是把数组分成有序和无序的两部分，每次取到无序部分的元素，把它放在有序部分的合适位置，实现数组的逐步有序化。</p><table><thead><tr><th></th><th>R[0]</th><th>R[1]</th><th>R[2]</th><th>R[3]</th><th>R[4]</th><th><strong>R[5]</strong></th></tr></thead><tbody><tr><td>初始状态</td><td>（17）</td><td>3</td><td>25</td><td>14</td><td>20</td><td>9</td></tr><tr><td>第一次插入</td><td>（3</td><td>17）</td><td>25</td><td>14</td><td>20</td><td>9</td></tr><tr><td>第二次插入</td><td>（3</td><td>17</td><td>25）</td><td>14</td><td>20</td><td>9</td></tr><tr><td>第三次插入</td><td>（3</td><td>14</td><td>17</td><td>25）</td><td>20</td><td>9</td></tr><tr><td>第四次插入</td><td>（3</td><td>14</td><td>17</td><td>20</td><td>25）</td><td>9</td></tr><tr><td>第五次插入</td><td>（3</td><td>9</td><td>14</td><td>17</td><td>20</td><td>25）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] insertSort(<span class="hljs-type">int</span>[] array)&#123;<br><span class="hljs-comment">//待插入的数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">insertVal</span> <span class="hljs-operator">=</span> array[<span class="hljs-number">1</span>];<br><span class="hljs-type">int</span> <span class="hljs-variable">insertIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> -<span class="hljs-number">1</span>; <span class="hljs-comment">//即arr[1] 的前面这个数的下标</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; array.length ; i++) &#123;<br>insertVal = array[i];<br>insertIndex = i -<span class="hljs-number">1</span>; <span class="hljs-comment">//即arr[1] 的前面这个数的下标</span><br><span class="hljs-comment">//insertIndex &gt;=0 不越界</span><br><span class="hljs-comment">//insertVal &lt; array[insertIndex] 说明insertVal比有序数组中的任意数都要小（因为array[insertIndex]就是最大的）</span><br><span class="hljs-comment">//现在需要找到insertVal合适的位置即可</span><br><span class="hljs-comment">//若不满足，拿insertVal比有序数组最大的都大 直接放在有序数组的最后面</span><br><span class="hljs-keyword">while</span> (insertIndex &gt;=<span class="hljs-number">0</span> &amp;&amp; insertVal &lt; array[insertIndex])&#123; <span class="hljs-comment">//插入到有序数组中</span><br>array[insertIndex + <span class="hljs-number">1</span>] = array[insertIndex];<br>insertIndex -- ; <span class="hljs-comment">//找到待插入数合适的位置</span><br>&#125;<br>array[insertIndex + <span class="hljs-number">1</span>] = insertVal;<br><span class="hljs-comment">// System.out.println(&quot;第&quot;+i+&quot;轮：&quot;+ Arrays.toString(array));</span><br>&#125;<br><span class="hljs-keyword">return</span> array;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序是针对普通插入排序排序存在的问题而提出的，假如数组中较小的元素在数组的末尾，在找最后一个元素合适位置的时候，while循环次数很多，效率不高，希尔排序通过设置增量实现效率的极大提升！</p><p><img src="https://i.loli.net/2021/02/18/YNhHqGIsFWmALw9.png"></p><p>可以看到，思想确实很好，类似一个宏观调控，对数组简单的微调，无需大量移动操作即可完成整个数组的排序。</p><p>但通常有两种实现方式，一种是交换法，在每次分组后，元素就要完成交换，小的在前，大的在后；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 交换法<br>\* <span class="hljs-meta">@param</span> array<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> array.length;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> length / <span class="hljs-number">2</span>; n &gt;=<span class="hljs-number">1</span>; n/=<span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n; i &lt; length; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i -n; j &gt;= <span class="hljs-number">0</span>; j-=n)&#123;<br><span class="hljs-keyword">if</span> (array[j] &gt; array[j+n])&#123;<br>temp = array[j+n];<br>array[j+n] = array[j];<br>array[j] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这也是最好理解的，但效率低于用移位法实现的希尔排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 移位法<br>\* <span class="hljs-meta">@param</span> array<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shellSort2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> array.length / <span class="hljs-number">2</span> ; gap &gt;=<span class="hljs-number">1</span> ; gap /= <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> gap; i &lt; array.length; i++) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span>i;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> array[j];<br><span class="hljs-keyword">if</span> (array[j] &lt; array[j - gap])&#123;<br><span class="hljs-keyword">while</span> (j - gap &gt;=<span class="hljs-number">0</span> &amp;&amp; temp &lt; array[j - gap])&#123;<br>array[j] = array[j -gap];<br>j -= gap;<br>&#125;<br>array[j] = temp;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，**移位法类似插入排序，**都是while循环找到元素最终的位置，再进行移动，减少元素交换所消耗的时间。</p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序(Quicksort)是对冒泡排序的一种改进。</p><p>基本思想是:通过一趟排序将 要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p>一句话概括：<strong>分组排序！</strong></p><p>提到分组，可能很多朋友看到这会想到分治算法了吗？这里的我说是分组就是递归的意思，后面的归并排序才是分治算法的一个实践。</p><p><img src="https://i.loli.net/2021/02/18/hklmtLKyszEUO8p.jpg"></p><p>快排有很多实现方法，主要的区别就是选取的标准不一样，有点找末尾，有点选中间，但操作都是大同小异，通过标准数第一次把数组分成左右两部分，然后对左右两部分分别进行递归，递归结束，数组也就变得有序了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> left;<br><span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> right;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//pivot 中轴</span><br><span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> array[(left + right) / <span class="hljs-number">2</span>];<br><span class="hljs-keyword">while</span> (l &lt; r)&#123;<br><span class="hljs-keyword">while</span> (array[l] &lt; pivot)&#123;<br>++l;<br>&#125;<br><span class="hljs-keyword">while</span> (array[r] &gt; pivot)&#123;<br>--r;<br>&#125;<br><span class="hljs-keyword">if</span> (l &gt;= r)&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>temp = array[l];<br>array[l] = array[r];<br>array[r] = temp;<br><span class="hljs-keyword">if</span> (array[<span class="hljs-number">1</span>] == pivot)&#123;<br>--r;<br>&#125;<br><span class="hljs-keyword">if</span> (array[r] == pivot)&#123;<br>++l;<br>&#125;<br>&#125;<br><span class="hljs-comment">//防止l = r 很重要！</span><br><span class="hljs-keyword">if</span> (l == r)&#123;<br>++l;<br>--r;<br>&#125;<br><span class="hljs-comment">//向左递归</span><br><span class="hljs-keyword">if</span> (left &lt; r)&#123;<br>quickSort(array,left,r);<br>&#125;<br><span class="hljs-comment">//向右递归</span><br><span class="hljs-keyword">if</span> (right &gt; l)&#123;<br>quickSort(array,l,right);<br>&#125;<br><span class="hljs-comment">//System.out.println(Arrays.toString(array));</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们测试下五种排序算法的效率</p><p>随机生成10W条数据的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">100000</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;<br>array[i] = (<span class="hljs-type">int</span>) (Math.random()\*<span class="hljs-number">100000</span>);<br>&#125;<br><span class="hljs-comment">// int[] array = &#123;2,5,3,6,9,4,500,200,40&#125;;</span><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-comment">// bubble(array); //所花费时间17411ms</span><br><span class="hljs-comment">// select(array); //所花费时间3229ms</span><br><span class="hljs-comment">// insert(array); //所花费时间1003ms</span><br><span class="hljs-comment">// shell(array); //所花费时间18ms</span><br>quick(array); <span class="hljs-comment">//所花费时间22ms</span><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;所花费时间&quot;</span>+(end - start) +<span class="hljs-string">&quot;ms&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bubble</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>BubbleSort.bubbleSort(array);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">select</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>SelectSort.selectSort(array);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>InsertSort.insertSort(array);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shell</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>ShellSort.shellSort2(array);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick</span><span class="hljs-params">(<span class="hljs-type">int</span>[] array)</span>&#123;<br>QuickSort.quickSort(array,<span class="hljs-number">0</span>,array.length -<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>希尔排序和快排效率确实较前三种排序算法要高很多，后面的三种排序放下一篇讲!</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发编程系列（四）</title>
    <link href="/2021/01/26/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/01/26/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="JUC并发编程系列（四）"><a href="#JUC并发编程系列（四）" class="headerlink" title="JUC并发编程系列（四）"></a>JUC并发编程系列（四）</h2><h2 id="17-Volatile"><a href="#17-Volatile" class="headerlink" title="17.Volatile"></a>17.Volatile</h2><blockquote><p>1.保证可见性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Volatile的可见性<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JMMDemo1</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//主存中num已经置为10 但线程中未得到信息 陷入死循环</span><br><span class="hljs-comment">//加入Volatile 保证可见性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">while</span> (num == <span class="hljs-number">0</span>)&#123;<br>&#125;<br>&#125;).start();<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>num = <span class="hljs-number">10</span>;<br>System.out.println(<span class="hljs-string">&quot;num:&quot;</span>+num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在上一篇的JMM中，我们提到，JMM是不能保证可见性的，main线程中把num置为10了，但新开的线程由于不知道到把num置为10，一直在while循环中跳不出来，程序出现死循环，解决的办法就是在num的声明中加入volatile，保证线程之间的可见性！</p><blockquote><p>2.不保证原子性</p></blockquote><p>原子性 : 不可分割</p><p>线程A在执行任务的时候，不能被打扰的，也不能被分割。要么同时成功，要么同时失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Volatile不保证原子性<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JMMDemo2</span> &#123;<br><span class="hljs-comment">//加于不加 volatile 均不能保证原子性</span><br><span class="hljs-comment">//解决方法</span><br>/\*\*<br>\* <span class="hljs-number">1.</span>加sync保证add的同步性<br>\* <span class="hljs-number">2.</span>加lock 原理和sync一样 不演示<br>\* <span class="hljs-number">3.</span><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>\*/<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>num++;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//理论是num 应该是2万</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">1000</span>; j++) &#123;<br>add();<br>&#125;<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">while</span> (Thread.activeCount()&gt;<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">//只有 main gc</span><br>Thread.<span class="hljs-keyword">yield</span>();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;num:&quot;</span>+num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>理论上，最后输出的num是20000，但结课确始终达不到。</p><p>可以到这很多朋友会想到用锁，<strong>加入sync或者lock保证线程的同步</strong>，没错这个方法可以达到我们的预期！</p><p>但若不加sync或者lock锁，怎么保证原子性呢？</p><p>在反编译源文件后，发现最大的问题是这个num++方法不是原子性操作，那么可以使用JDK提供的原子类来解决原子性问题！</p><p><img src="https://i.loli.net/2021/01/26/vcGlPztmZ2W3j1M.jpg"></p><p>可以发现原子类是util下的一个大类，里面有很多基本类型和集合的原子类</p><p>引入原子类，改造我们的代码，实现Volatile保证原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Volatile不保证原子性<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JMMDemo2</span> &#123;<br><span class="hljs-comment">//加于不加 volatile 均不能保证原子性</span><br><span class="hljs-comment">//解决方法</span><br>/\*\*<br>\* <span class="hljs-number">1.</span>加sync保证add的同步性<br>\* <span class="hljs-number">2.</span>加lock 原理和sync一样 不演示<br>\* <span class="hljs-number">3.</span><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br>\*/<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>&#123;<br>num.getAndIncrement();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//理论是num 应该是2万</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">1000</span>; j++) &#123;<br>add();<br>&#125;<br>&#125;).start();<br>&#125;<br><span class="hljs-keyword">while</span> (Thread.activeCount()&gt;<span class="hljs-number">2</span>)&#123; <span class="hljs-comment">//只有 main gc</span><br>Thread.<span class="hljs-keyword">yield</span>();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;num:&quot;</span>+num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原子类的底层直接与操作系统挂钩，在内存中修改值，很安全！</p><blockquote><p>3.禁止指令重排</p></blockquote><p>什么是 指令重排：<strong>你写的程序，计算机并不是按照你写的那样去执行的。</strong></p><p>源代码–&gt;编译器优化的重排–&gt; 指令并行也可能会重排–&gt; 内存系统也会重排—&gt; 执行</p><p><strong>处理器在进行指令重排的时候，考虑：数据之间的依赖性</strong>。</p><p>单线程环境里面确保程序最终执行结果和代码顺序执行结果一致。</p><p>处理器在进行指令重排序时必须考虑指令之间的<strong>数据依赖性</strong></p><p>多线程环境中线程交替执行，由于编译器指令重排的存在，两个线程使用的变量能否保证一致性是无法确认的，结果无法预测。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 1</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 2</span><br>x = x + <span class="hljs-number">5</span>; <span class="hljs-comment">// 3</span><br>y = x \* x; <span class="hljs-comment">// 4</span><br>我们所期望的：<span class="hljs-number">1234</span> 但是可能执行的时候回变成 <span class="hljs-number">2134</span> <span class="hljs-number">1324</span><br>可不可能是 <span class="hljs-number">4123</span>？ 当然可能！<br></code></pre></td></tr></table></figure><p>可能造成影响的结果： a b x y 这四个值默认都是 0；</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>x&#x3D;a</td><td>y&#x3D;b</td></tr><tr><td>b&#x3D;1</td><td>a&#x3D;2</td></tr></tbody></table><p>正常的结果： x &#x3D; 0；y &#x3D; 0；但是可能由于指令重排</p><table><thead><tr><th>线程A</th><th>线程B</th></tr></thead><tbody><tr><td>b&#x3D;1</td><td>a&#x3D;2</td></tr><tr><td>x&#x3D;a</td><td>y&#x3D;b</td></tr></tbody></table><p>由于指令重排导致：x &#x3D; 2；y &#x3D; 1；</p><blockquote><p>禁止指令重排底层原理</p></blockquote><p>volatile实现禁止指令重排优化，从而避免多线程环境下程序出现乱序执行的现象</p><p>​ 先了解下概念，内存屏障（Memory Barrier）又称内存栅栏，是一个CPU指令，它的作用有两个：</p><ul><li><strong>保证特定操作执行的顺序性</strong></li><li><strong>保证某些变量的内存可见性（利用该特性实现volatile内存可见性）</strong></li></ul><p><strong>volatile实现禁止指令重排优化底层原理：</strong></p><p>​ <strong>由于编译器和处理器都能执行指令重排优化。如果在指令间插入一条Memory Barrier则会告诉编译器和CPU，不管什么指令都不能和这条Memory Barrier指令重排，也就是说通过插入内存屏障，就能禁止在内存屏障前后的指令执行重排优化。内存屏障另外一个作用就是强制刷出各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。</strong></p><p>左边：写操作场景：先LoadStore指令，后LoadLoad指令。</p><p>右边：读操作场景：先LoadLoad指令，后LoadStore指令。</p><p><img src="https://i.loli.net/2021/01/26/RV6zv3EgCxfKstw.jpg"></p><h2 id="18-单例模式"><a href="#18-单例模式" class="headerlink" title="18.单例模式"></a>18.单例模式</h2><p>手写单例模式也是面试必考的知识点！</p><blockquote><p>饿汉式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*饿汉式单例<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hungry</span> &#123;<br><span class="hljs-comment">//可能会浪费空间</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>\*<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>\*<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>\*<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] data4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>\*<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Hungry</span><span class="hljs-params">()</span>&#123;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Hungry</span> <span class="hljs-variable">HUNGRY</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hungry</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Hungry <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> HUNGRY;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>DCl 饿汉式</p></blockquote><p>这里通过多重检测，但最终都能被反射破坏，于是引入<strong>枚举</strong>即可解决这个问题！</p><p>上代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-keyword">enum</span>？ 本身也是一个类<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EnumSingle</span> &#123;<br>INSTANCE;<br><span class="hljs-keyword">public</span> EnumSingle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> INSTANCE;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> EnumSingle.INSTANCE;<br><span class="hljs-comment">//Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: Cannot reflectively create enum objects</span><br><span class="hljs-comment">// at java.lang.reflect.Constructor.newInstance(Constructor.java:417)</span><br><span class="hljs-comment">//有参构造 并非无参!!!!!!!!!!!</span><br>Constructor&lt;EnumSingle&gt; declaredConstructor = EnumSingle.class.getDeclaredConstructor(String.class,<span class="hljs-type">int</span>.class);<br>declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance();<br><span class="hljs-comment">//正常 throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</span><br><span class="hljs-comment">//java.lang.NoSuchMethodException: com.dev.single.EnumSingle.&lt;init&gt;()</span><br>System.out.println(instance1);<br>System.out.println(instance2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 懒汉式单例<br>\* 道高一尺魔高一丈<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyMan</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">luffy</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyMan</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//第三重检测</span><br><span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br><span class="hljs-keyword">if</span> (luffy == <span class="hljs-literal">false</span>)&#123;<br>luffy = <span class="hljs-literal">true</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不要试图用反射破坏&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><span class="hljs-comment">//双重检测锁模式 DCL 懒汉式单例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-literal">null</span>)&#123;<br>lazyMan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyMan</span>(); <span class="hljs-comment">//不是原子性操作</span><br>/\*\*<br>\* <span class="hljs-number">1.</span>分配内存空间<br>\* <span class="hljs-number">2.</span>执行构造方法，初始化对象<br>\* <span class="hljs-number">3.</span>把对象指向在这个空间<br>\*<br>\* 可能发生指令重排<br>\*<br>\* <span class="hljs-number">123</span><br>\* <span class="hljs-number">132</span><br>\*/<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> lazyMan;<br>&#125;<br><span class="hljs-comment">//单线程下OK</span><br><span class="hljs-comment">//并发下</span><br><span class="hljs-comment">// public static void main(String[] args) &#123;</span><br><span class="hljs-comment">// for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="hljs-comment">// new Thread(()-&gt;&#123;</span><br><span class="hljs-comment">// LazyMan.getInstance();</span><br><span class="hljs-comment">// &#125;).start();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">//反射</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">// LazyMan instance1= LazyMan.getInstance();</span><br><span class="hljs-comment">//破环密钥的私有权限</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">luffy</span> <span class="hljs-operator">=</span> LazyMan.class.getDeclaredField(<span class="hljs-string">&quot;luffy&quot;</span>);<br>luffy.setAccessible(<span class="hljs-literal">true</span>);<br>Constructor&lt;LazyMan&gt; declaredConstructor = LazyMan.class.getDeclaredConstructor(<span class="hljs-literal">null</span>);<br>declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br><span class="hljs-comment">//两个用反射创建实例</span><br><span class="hljs-comment">// LazyMan instance1 = declaredConstructor.newInstance();4</span><br><span class="hljs-comment">//使用枚举 自带单例 即可解决！</span><br><span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> EnumSingle.INSTANCE;<br><span class="hljs-type">EnumSingle</span> <span class="hljs-variable">instance2</span> <span class="hljs-operator">=</span> EnumSingle.INSTANCE;<br>luffy.set(instance1,<span class="hljs-literal">false</span>);<br><span class="hljs-comment">// LazyMan instance2 = declaredConstructor.newInstance();</span><br>System.out.println(instance1.hashCode());<br>System.out.println(instance2.hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>枚举Enum是个抽象类，其实一旦一个类声明为枚举，实际上就是继承了Enum，所以会有（String.class,int.class）的构造器。既然是可以获取到父类Enum的构造器，那你也许会说刚才我的反射是因为自身的类<strong>没有无参构造方法才导致的异常</strong>，并不能说单例枚举避免了反射攻击。</p><p>这里有篇博客写的不错：</p><p><a href="https://www.cnblogs.com/chiclee/p/9097772.html">为什么要用枚举实现单例模式（避免反射、序列化问题）</a></p><h2 id="19-深入理解CAS"><a href="#19-深入理解CAS" class="headerlink" title="19.深入理解CAS"></a>19.深入理解CAS</h2><blockquote><p>什么是CAS</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CAS 比较并操作<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASDemo1</span> &#123;<br><span class="hljs-comment">//CAS compareAndSet：比较并交换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">2020</span>);<br><span class="hljs-comment">//期望、更新</span><br><span class="hljs-comment">//期望达到，就更新</span><br><span class="hljs-comment">//CAS CPU的</span><br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2020</span>, <span class="hljs-number">2022</span>));<br>System.out.println(atomicInteger.get());<br>atomicInteger.getAndIncrement();<br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2023</span>, <span class="hljs-number">2022</span>));<br>System.out.println(atomicInteger.get());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>查看原子类源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AtomicInteger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">6214790243416807050L</span>;<br><span class="hljs-comment">// setup to use Unsafe.compareAndSwapInt for updates</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> valueOffset;<br><span class="hljs-keyword">static</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>valueOffset = unsafe.objectFieldOffset<br>(AtomicInteger.class.getDeclaredField(<span class="hljs-string">&quot;value&quot;</span>));<br>&#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); &#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> value;<br></code></pre></td></tr></table></figure><p>调用的Unsafe类，进入Unsafe发现都是大多数都是Native方法，说明Java并不能直接操作内存，而是操作C++去操作内存，实现CAS，所以CAS效率巨高！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br><span class="hljs-type">int</span> var5;<br><span class="hljs-keyword">do</span> &#123;<br>var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>&#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4)); <span class="hljs-comment">//自旋锁实现</span><br><span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><p>CAS ： 比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么则执行操作！如果不是就</p><p>一直循环！</p><p>缺点：</p><p>1、 循环会耗时</p><p>2、一次性只能保证一个共享变量的原子性</p><p>3、<strong>ABA问题</strong></p><p>ABA问题也是面试常问的，接下来我们来探究下ABA问题</p><blockquote><p>CAS：ABA问题</p></blockquote><p><img src="https://i.loli.net/2021/01/26/SPsQUwr6xEMqK48.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CAS 比较并操作<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASDemo1</span> &#123;<br><span class="hljs-comment">//CAS compareAndSet：比较并交换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">atomicInteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">2020</span>);<br><span class="hljs-comment">//期望、更新</span><br><span class="hljs-comment">//期望达到，就更新</span><br><span class="hljs-comment">//CAS CPU的</span><br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2020</span>, <span class="hljs-number">2022</span>));<br>System.out.println(atomicInteger.get());<br>atomicInteger.getAndIncrement();<br>System.out.println(atomicInteger.compareAndSet(<span class="hljs-number">2023</span>, <span class="hljs-number">2022</span>));<br>System.out.println(atomicInteger.get());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="20-原子引用"><a href="#20-原子引用" class="headerlink" title="20.原子引用"></a>20.原子引用</h2><blockquote><p>解决ABA问题，引入原子引用！类似乐观锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CAS 解决ABA问题<br>\* 类似乐观锁！！<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CASDemo2</span> &#123;<br><span class="hljs-comment">//Integer使用了对象缓存机制,默认范围是-128 ~ 127推荐使用静态工厂方法valueOf获取对象实例,</span><br><span class="hljs-comment">// 而不是new ,因为valueOf使用缓存,而new -定会创建新的对象分配新的内存空间;</span><br><span class="hljs-comment">//CAS compareAndSet：比较并交换</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>AtomicStampedReference&lt;Integer&gt; atomicStampedReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;Integer&gt;(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp();<br>System.out.println(<span class="hljs-string">&quot;a1=&gt;&quot;</span>+atomicStampedReference.getStamp());<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;a2=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>atomicStampedReference.compareAndSet(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;a3=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>&#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><span class="hljs-comment">//另外一个线程</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> atomicStampedReference.getStamp();<br>System.out.println(<span class="hljs-string">&quot;b1=&gt;&quot;</span>+stamp);<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>atomicStampedReference.compareAndSet(<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,atomicStampedReference.getStamp(),atomicStampedReference.getStamp()+<span class="hljs-number">1</span>);<br>System.out.println(<span class="hljs-string">&quot;b2=&gt;&quot;</span>+atomicStampedReference.getStamp());<br>&#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p>a1&#x3D;&gt;1<br>b1&#x3D;&gt;1<br>a2&#x3D;&gt;2<br>b2&#x3D;&gt;2<br>a3&#x3D;&gt;3</p><p>可以看到，每次在修改数据后获取stamp（类似版本号），都在+1，让线程知道自己获取到的值是被修改过的。</p><h2 id="21-各种锁的理解"><a href="#21-各种锁的理解" class="headerlink" title="21.各种锁的理解"></a>21.各种锁的理解</h2><h3 id="1-公平锁和非公平锁"><a href="#1-公平锁和非公平锁" class="headerlink" title="1.公平锁和非公平锁"></a>1.公平锁和非公平锁</h3><p>公平锁： 非常公平， 不能够插队，必须先来后到！</p><p>非公平锁：非常不公平，可以插队 （默认都是非公平）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Creates an instance of &#123;<span class="hljs-meta">@code</span> ReentrantLock&#125;.<br>\* This is equivalent to using &#123;<span class="hljs-meta">@code</span> ReentrantLock(<span class="hljs-literal">false</span>)&#125;.<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br>sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br>/\*\*<br>\* Creates an instance of &#123;<span class="hljs-meta">@code</span> ReentrantLock&#125; with the<br>\* given fairness policy.<br>\*<br>\* <span class="hljs-meta">@param</span> fair &#123;<span class="hljs-meta">@code</span> <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> lock should use a fair ordering policy<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现创建ReentrantLock，默认是走的无参构造，创建非公平锁</p><p>这种图是网上一个大佬画的，十分生动形象讲了公平锁和非公平锁的区别</p><p><img src="https://i.loli.net/2021/01/26/la7GvINcTKe2RHz.png"></p><p><a href="https://www.jianshu.com/p/f584799f1c77">一张图读懂非公平锁与公平锁</a></p><h3 id="2-可重入锁"><a href="#2-可重入锁" class="headerlink" title="2.可重入锁"></a>2.可重入锁</h3><p>可重入锁（递归锁）</p><p>可重入性表现在同一个线程可以多次获得锁，而不同线程依然不可多次获得锁，底层涉及到AQS，后面出一篇讲AQS的博客，现在了解可重入锁的是什么样子就行</p><blockquote><p>sync</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 可重入锁 （递归锁）<br>\* <span class="hljs-keyword">synchronized</span>版<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>phone.sms();<br>&#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>phone.sms();<br>&#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>&#125;<br>/\*\*<br>\* a sms<br>\* a call<br>\* b sms<br>\* b call<br>\*/<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sms</span><span class="hljs-params">()</span>&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; sms&quot;</span>);<br>call(); <span class="hljs-comment">//call 也加了锁</span><br>&#125;<br>ReentrantLock lock= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; call&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>lock</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 用lock实现可重入锁<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Phone2</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone2</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>phone.sms();<br>&#125;,<span class="hljs-string">&quot;a&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>phone.sms();<br>&#125;,<span class="hljs-string">&quot;b&quot;</span>).start();<br>&#125;<br>/\*\*<br>\* a sms<br>\* a call<br>\* b sms<br>\* b call<br>\*/<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone2</span>&#123;<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sms</span><span class="hljs-params">()</span>&#123;<br>lock.lock(); <span class="hljs-comment">//细节问题 两对锁 lock.lock() lock.unlock() 必须配对</span><br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; sms&quot;</span>);<br>call(); <span class="hljs-comment">//call 也加了锁</span><br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; call&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-自旋锁"><a href="#3-自旋锁" class="headerlink" title="3.自旋锁"></a>3.自旋锁</h3><p>上面在引入原子类调用Unsafe类解决ABA问题，就看到了底层是用自旋锁去实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAndAddInt</span><span class="hljs-params">(Object var1, <span class="hljs-type">long</span> var2, <span class="hljs-type">int</span> var4)</span> &#123;<br><span class="hljs-type">int</span> var5;<br><span class="hljs-keyword">do</span> &#123;<br>var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>&#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4)); <span class="hljs-comment">//自旋锁</span><br><span class="hljs-keyword">return</span> var5;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到底层就是while的判断，不断去提交，我们可以手动实现一把自旋锁！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\*手动实现自旋锁<br>\* 底层使用CAS<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SprinLockDemo</span> &#123;<br>AtomicReference&lt;Thread&gt; atomicReference = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myLock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;==&gt; mylock&quot;</span>);<br><span class="hljs-comment">//自旋锁</span><br><span class="hljs-keyword">while</span> (!atomicReference.compareAndSet(<span class="hljs-literal">null</span>, thread)) &#123;<br>&#125;<br>&#125;<br><span class="hljs-comment">//解锁</span><br><span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">myUnlock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;==&gt; myUnlock&quot;</span>);<br>atomicReference.compareAndSet(thread,<span class="hljs-literal">null</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">22</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSpinLock</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//底层使用自旋锁 CAS</span><br><span class="hljs-type">SprinLockDemo</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SprinLockDemo</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>lock.myLock();<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">5</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>lock.myUnlock();<br>&#125;<br>&#125;,<span class="hljs-string">&quot;T1&quot;</span>).start();<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br>lock.myLock();<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.myUnlock();<br>&#125;<br>&#125;,<span class="hljs-string">&quot;T2&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p>T1&#x3D;&#x3D;&gt; mylock<br>T2&#x3D;&#x3D;&gt; mylock<br>T1&#x3D;&#x3D;&gt; myUnlock<br>T2&#x3D;&#x3D;&gt; myUnlock</p><h3 id="4-死锁"><a href="#4-死锁" class="headerlink" title="4.死锁"></a>4.死锁</h3><blockquote><p>死锁是什么？</p></blockquote><p>死锁一词应该是我们听的最多的了，数据库里的死锁，计算机网络里的死锁，那么死锁到底是什么呢？</p><p>死锁是指两个或两个以上的进程（线程）在运行过程中因争夺资源而造成的一种僵局（Deadly-Embrace) ) ，若无外力作用，这些进程（线程）都将无法向前推进。</p><blockquote><p>死锁与饥饿的区别?</p></blockquote><p>饥饿（Starvation）指一个进程一直得不到资源。</p><p>死锁和饥饿都是由于进程竞争资源而引起的。饥饿一般不占有资源，死锁进程一定占有资源。</p><p>这篇文章讲的不错：</p><p><a href="https://blog.csdn.net/wljliujuan/article/details/79614019">死锁，死锁的四个必要条件以及处理策略</a></p><h2 id="22-Gihub源码"><a href="#22-Gihub源码" class="headerlink" title="22.Gihub源码"></a>22.Gihub源码</h2><p><a href="https://github.com/luffy997/JUC-Notes">JUC-Notes</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发编程系列（三）</title>
    <link href="/2021/01/26/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/01/26/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JUC并发编程系列（三）"><a href="#JUC并发编程系列（三）" class="headerlink" title="JUC并发编程系列（三）"></a>JUC并发编程系列（三）</h1><h2 id="11-线程池"><a href="#11-线程池" class="headerlink" title="11.线程池"></a>11.线程池</h2><p>线程池：三大方法、七大参数、四种拒绝策略</p><blockquote><p>池化技术</p></blockquote><p>程序的运行，本质：占用系统的资源！ 优化资源的使用！&#x3D;&gt;池化技术</p><p>线程池、连接池、内存池、对象池&#x2F;&#x2F;&#x2F;….. 创建、销毁。十分浪费资源</p><p>池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后还给我。</p><p><strong>线程池的好处：</strong></p><p>1.降低资源的消耗</p><p>2.提高响应的速度</p><p>3.方便管理</p><p>使用线程池的好处是减少在创建和销毁线程上所花的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量同类线程而导致消耗完内存或者 “过度切换”的问题。</p><blockquote><p>线程池：三大方法</p></blockquote><p><a href="https://imgchr.com/i/sOkyWR"><img src="https://s3.ax1x.com/2021/01/25/sOkyWR.jpg"></a></p><p>其中Integer.MAX_VALUE约为21亿，FixedThreadPool是伸缩性的线程池，最小为1，最大为21亿，可想若创建21亿个线程，大量请求堆积，势必会造成内存溢出。创建一个线程的线程池又不能最大程度利用机器性能，所以阿里开发手册规定需要手动创建线程池！</p><p>下面我们先使用Executors来创建线程池，分析三种创建的底层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 线程池<br>\* 三大方法、<span class="hljs-number">7</span>大参数、<span class="hljs-number">4</span>种拒绝策略<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//阿里开发手册规定：不允许使用Executors创建线程池，而是通过ThreadPoolExcutor的方式常见，</span><br><span class="hljs-comment">//明确写出创建的线程测的规则，避免资源耗尽的风险</span><br><span class="hljs-comment">//工具类Executors创建的三种线程池底层均是ThreadPoolExecutor</span><br><span class="hljs-comment">//故手写线程池，只需要通过ThreadPoolExecutor 创建即可</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor(); <span class="hljs-comment">//一个线程</span><br><span class="hljs-comment">//ExecutorService threadPool = Executors.newFixedThreadPool(5); //固定线程池大小</span><br><span class="hljs-comment">//ExecutorService threadPool = Executors.newCachedThreadPool(); //可伸缩线程池 遇强则强，遇弱则弱</span><br><span class="hljs-comment">//使用线程池操作线程</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>threadPool.execute(() -&gt; &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; OK&quot;</span>);<br>&#125;);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-comment">//关闭线程池</span><br>threadPool.shutdown();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Executors.newSingleThreadExecutor();</strong></p><p>底层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Creates an Executor that uses a single worker thread operating<br>\* off an unbounded queue. (Note however that <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> single<br>\* thread terminates due to a failure during execution prior to<br>\* shutdown, a <span class="hljs-keyword">new</span> <span class="hljs-title class_">one</span> will take its place <span class="hljs-keyword">if</span> needed to execute<br>\* subsequent tasks.) Tasks are guaranteed to execute<br>\* sequentially, and no more than one task will be active at any<br>\* given time. Unlike the otherwise equivalent<br>\* &#123;<span class="hljs-meta">@code</span> newFixedThreadPool(<span class="hljs-number">1</span>)&#125; the returned executor is<br>\* guaranteed not to be reconfigurable to use additional threads.<br>\*<br>\* <span class="hljs-meta">@return</span> the newly created single-threaded Executor<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br><span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到是通过ThreadPoolExecutor()的有参构造创建的，具体每个变量是什么意思呢？</p><blockquote><p>线程池：七大参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Creates a <span class="hljs-keyword">new</span> &#123;<span class="hljs-meta">@code</span> ThreadPoolExecutor&#125; with the given initial<br>\* parameters.<br>\*<br>\* <span class="hljs-meta">@param</span> corePoolSize the number of threads to keep in the pool, even<br>\* <span class="hljs-keyword">if</span> they are idle, unless &#123;<span class="hljs-meta">@code</span> allowCoreThreadTimeOut&#125; is set<br>\* <span class="hljs-meta">@param</span> maximumPoolSize the maximum number of threads to allow in the<br>\* pool<br>\* <span class="hljs-meta">@param</span> keepAliveTime <span class="hljs-keyword">when</span> the number of threads is greater than<br>\* the core, <span class="hljs-built_in">this</span> is the maximum time that excess idle threads<br>\* will wait <span class="hljs-keyword">for</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">tasks</span> before terminating.<br>\* <span class="hljs-meta">@param</span> unit the time unit <span class="hljs-keyword">for</span> the &#123;<span class="hljs-meta">@code</span> keepAliveTime&#125; argument<br>\* <span class="hljs-meta">@param</span> workQueue the queue to use <span class="hljs-keyword">for</span> holding tasks before they are<br>\* executed. This queue will hold only the &#123;<span class="hljs-meta">@code</span> Runnable&#125;<br>\* tasks submitted by the &#123;<span class="hljs-meta">@code</span> execute&#125; method.<br>\* <span class="hljs-meta">@param</span> threadFactory the factory to use <span class="hljs-keyword">when</span> the executor<br>\* creates a <span class="hljs-keyword">new</span> <span class="hljs-title class_">thread</span><br>\* <span class="hljs-meta">@param</span> handler the handler to use <span class="hljs-keyword">when</span> execution is blocked<br>\* because the thread bounds and queue capacities are reached<br>\* <span class="hljs-meta">@throws</span> IllegalArgumentException <span class="hljs-keyword">if</span> one of the following holds:&lt;br&gt;<br>\* &#123;<span class="hljs-meta">@code</span> corePoolSize &lt; <span class="hljs-number">0</span>&#125;&lt;br&gt;<br>\* &#123;<span class="hljs-meta">@code</span> keepAliveTime &lt; <span class="hljs-number">0</span>&#125;&lt;br&gt;<br>\* &#123;<span class="hljs-meta">@code</span> maximumPoolSize &lt;= <span class="hljs-number">0</span>&#125;&lt;br&gt;<br>\* &#123;<span class="hljs-meta">@code</span> maximumPoolSize &lt; corePoolSize&#125;<br>\* <span class="hljs-meta">@throws</span> NullPointerException <span class="hljs-keyword">if</span> &#123;<span class="hljs-meta">@code</span> workQueue&#125;<br>\* or &#123;<span class="hljs-meta">@code</span> threadFactory&#125; or &#123;<span class="hljs-meta">@code</span> handler&#125; is <span class="hljs-literal">null</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params"><span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params"><span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">TimeUnit unit,</span><br><span class="hljs-params">BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">ThreadFactory threadFactory,</span><br><span class="hljs-params">RejectedExecutionHandler handler)</span> &#123;<br><span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>maximumPoolSize &lt; corePoolSize ||<br>keepAliveTime &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br><span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br><span class="hljs-built_in">this</span>.acc = System.getSecurityManager() == <span class="hljs-literal">null</span> ?<br><span class="hljs-literal">null</span> :<br>AccessController.getContext();<br><span class="hljs-built_in">this</span>.corePoolSize = corePoolSize;<br><span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize;<br><span class="hljs-built_in">this</span>.workQueue = workQueue;<br><span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br><span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br><span class="hljs-built_in">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><p>到这，初中生都能看懂的英语，依次是线程池的核心大小，最大线程数，存活时间，时间单位，底层实现的队列，默认线程池构造工厂，默认拒绝策略，这就是线程池的七大参数。</p><p>参数中大部分我们都知道填什么，就最后这个handler是什么？点进去发现是个接口，那就看实现类</p><p><a href="https://imgchr.com/i/sOe0Pg"><img src="https://s3.ax1x.com/2021/01/25/sOe0Pg.jpg"></a></p><p>可以看到这个接口有四个实现类，查看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* A handler <span class="hljs-keyword">for</span> rejected tasks that runs the rejected task<br>\* directly in the calling thread of the &#123;<span class="hljs-meta">@code</span> execute&#125; method,<br>\* unless the executor has been shut down, in which <span class="hljs-keyword">case</span> the task<br>\* is discarded.<br>\*/<br><span class="hljs-comment">//用于拒绝任务的处理程序，可以直接在&#123;@code execute&#125;方法的调用线程中运</span><br><span class="hljs-comment">//行被拒绝的任务\*除非执行器已被关闭，否则这种情况下该任务将被丢弃。</span><br><span class="hljs-comment">//简单点就是谁调用谁执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallerRunsPolicy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RejectedExecutionHandler</span> &#123;<br>/\*\*<br>\* Creates a &#123;<span class="hljs-meta">@code</span> CallerRunsPolicy&#125;.<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">CallerRunsPolicy</span><span class="hljs-params">()</span> &#123; &#125;<br>/\*\*<br>\* Executes task r in the caller<span class="hljs-string">&#x27;s thread, unless the executor</span><br><span class="hljs-string">\* has been shut down, in which case the task is discarded.</span><br><span class="hljs-string">\*</span><br><span class="hljs-string">\* @param r the runnable task requested to be executed</span><br><span class="hljs-string">\* @param e the executor attempting to execute this task</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="hljs-string">if (!e.isShutdown()) &#123;</span><br><span class="hljs-string">r.run();</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* A handler for rejected tasks that throws a</span><br><span class="hljs-string">\* &#123;@code RejectedExecutionException&#125;.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">//直接抛异常</span><br><span class="hljs-string">public static class AbortPolicy implements RejectedExecutionHandler &#123;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Creates an &#123;@code AbortPolicy&#125;.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public AbortPolicy() &#123; &#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Always throws RejectedExecutionException.</span><br><span class="hljs-string">\*</span><br><span class="hljs-string">\* @param r the runnable task requested to be executed</span><br><span class="hljs-string">\* @param e the executor attempting to execute this task</span><br><span class="hljs-string">\* @throws RejectedExecutionException always</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="hljs-string">throw new RejectedExecutionException(&quot;Task &quot; + r.toString() +</span><br><span class="hljs-string">&quot; rejected from &quot; +</span><br><span class="hljs-string">e.toString());</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* A handler for rejected tasks that silently discards the</span><br><span class="hljs-string">\* rejected task.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">//直接放弃</span><br><span class="hljs-string">public static class DiscardPolicy implements RejectedExecutionHandler &#123;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Creates a &#123;@code DiscardPolicy&#125;.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public DiscardPolicy() &#123; &#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Does nothing, which has the effect of discarding task r.</span><br><span class="hljs-string">\*</span><br><span class="hljs-string">\* @param r the runnable task requested to be executed</span><br><span class="hljs-string">\* @param e the executor attempting to execute this task</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* A handler for rejected tasks that discards the oldest unhandled</span><br><span class="hljs-string">\* request and then retries &#123;@code execute&#125;, unless the executor</span><br><span class="hljs-string">\* is shut down, in which case the task is discarded.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">//放弃最旧未处理的程序</span><br><span class="hljs-string">public static class DiscardOldestPolicy implements RejectedExecutionHandler &#123;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Creates a &#123;@code DiscardOldestPolicy&#125; for the given executor.</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public DiscardOldestPolicy() &#123; &#125;</span><br><span class="hljs-string">/\*\*</span><br><span class="hljs-string">\* Obtains and ignores the next task that the executor</span><br><span class="hljs-string">\* would otherwise execute, if one is immediately available,</span><br><span class="hljs-string">\* and then retries execution of task r, unless the executor</span><br><span class="hljs-string">\* is shut down, in which case task r is instead discarded.</span><br><span class="hljs-string">\*</span><br><span class="hljs-string">\* @param r the runnable task requested to be executed</span><br><span class="hljs-string">\* @param e the executor attempting to execute this task</span><br><span class="hljs-string">\*/</span><br><span class="hljs-string">public void rejectedExecution(Runnable r, ThreadPoolExecutor e) &#123;</span><br><span class="hljs-string">if (!e.isShutdown()) &#123;</span><br><span class="hljs-string">e.getQueue().poll();</span><br><span class="hljs-string">e.execute(r);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>new ThreadPoolExecutor.AbortPolicy() &#x2F;&#x2F; 银行满了，还有人进来，不处理这个人的，抛出异常</p><p>new ThreadPoolExecutor.CallerRunsPolicy() &#x2F;&#x2F; 哪来的去哪里！</p><p>new ThreadPoolExecutor.DiscardPolicy() &#x2F;&#x2F;队列满了，丢掉任务，不会抛出异常！</p><p>new ThreadPoolExecutor.DiscardOldestPolicy() &#x2F;&#x2F;队列满了，尝试去和最早的竞争，也不会抛出异常！</p><p>可以画一个图，具体理解7大参数的意思</p><p><a href="https://imgchr.com/i/sOdBJH"><img src="https://s3.ax1x.com/2021/01/25/sOdBJH.jpg"></a></p><blockquote><p>手写线程池</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 手动创建线程池<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 最大线程到底该如何定义</span><br><span class="hljs-comment">// 1、CPU 密集型，几核，就是几\*2，可以保持CPu的效率最高！</span><br><span class="hljs-comment">// 2、IO 密集型 &gt; 判断你程序中十分耗IO的线程，</span><br><span class="hljs-comment">// 程序 15个大型任务 io十分占用资源！</span><br>System.out.println(Runtime.getRuntime().availableProcessors());<br><span class="hljs-comment">//ThreadPoolExecutor的构造方法</span><br>/\*\*<br>\* 七大参数<br>\* <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">\* <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">\* <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">\* TimeUnit unit,</span><br><span class="hljs-params">\* BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">\* ThreadFactory threadFactory)</span> &#123;<br>\* <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>\* threadFactory, defaultHandler);<br>\* &#125;<br>\*<br>\*<br>\* 四种拒绝策略<br>\* A handler <span class="hljs-keyword">for</span> rejected tasks that <span class="hljs-keyword">throws</span> a<br>\* &#123;<span class="hljs-meta">@code</span> RejectedExecutionException&#125;. 不处理，抛异常<br>\* AbortPolicy<br>\*<br>\* A handler <span class="hljs-keyword">for</span> rejected tasks that runs the rejected task<br>\* directly in the calling thread of the &#123;<span class="hljs-meta">@code</span> execute&#125; method,<br>\* unless the executor has been shut down, in which <span class="hljs-keyword">case</span> the task<br>\* is discarded. 哪来的去哪里！<br>\* 用于拒绝任务的处理程序，可以直接在方法的调用线程中运行被拒绝的任务\*除非执行器已被关闭，否则这种情况下该任务将被丢弃。<br>\* CallerRunsPolicy<br>\*<br>\* A handler <span class="hljs-keyword">for</span> rejected tasks that discards the oldest unhandled<br>\* request and then retries &#123;<span class="hljs-meta">@code</span> execute&#125;, unless the executor<br>\* is shut down, in which <span class="hljs-keyword">case</span> the task is discarded.<br>\* 拒绝任务的处理程序，它丢弃&lt;p&gt;最旧&lt;/p&gt;的未处理\*请求，然后重试，除非执行程序\*被关闭，在这种情况下，该任务将被丢弃。<br>\* DiscardOldestPolicy<br>\*<br>\* A handler <span class="hljs-keyword">for</span> rejected tasks that silently discards the<br>\* rejected task. 直接抛弃<br>\* DiscardPolicy<br>\*<br>\*<br>\*<br>\*<br>\*<br>\*/<br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br><span class="hljs-number">2</span>,<br><span class="hljs-number">5</span>,<br><span class="hljs-number">3</span>,<br>TimeUnit.SECONDS,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">3</span>), <span class="hljs-comment">//阻塞队列实现</span><br>Executors.defaultThreadFactory(), <span class="hljs-comment">//默认线程工厂</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>.DiscardPolicy() <span class="hljs-comment">//拒绝策略</span><br>);<br>/\*\*<br>\* 最大承载：max+deque<br>\* 超过RejectedExecutionException<br>\*/<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>threadPoolExecutor.execute(() -&gt; &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; OK&quot;</span>);<br>&#125;);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>threadPoolExecutor.shutdown();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>线程池的大小如何设置?</p></blockquote><p>IO密集型，CPU密集型：（调优）</p><p>通过Runtime.getRuntime().availableProcessors()拿到机器的逻辑处理器数量，即为线程池最大线程数</p><h2 id="12-四大函数式接口"><a href="#12-四大函数式接口" class="headerlink" title="12.四大函数式接口"></a>12.四大函数式接口</h2><blockquote><p>函数式接口：只有一个方法的接口</p><p>目的：提供了基础编程模型，简化编程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-comment">//泛型、枚举、反射</span><br><span class="hljs-comment">//lambda表达式，链式编程，函数式接口，Stream流式计算</span><br><span class="hljs-comment">//FunctionalInterface</span><br></code></pre></td></tr></table></figure><blockquote><p>Function函数式接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Represents a function that accepts one argument and produces a result.<br>\*<br>\* &lt;p&gt;This is a &lt;a href=<span class="hljs-string">&quot;package-summary.html&quot;</span>&gt;functional interface&lt;/a&gt;<br>\* whose functional method is &#123;<span class="hljs-meta">@link</span> #apply(Object)&#125;.<br>\*<br>\* <span class="hljs-meta">@param</span> &lt;T&gt; the type of the input to the function<br>\* <span class="hljs-meta">@param</span> &lt;R&gt; the type of the result of the function<br>\*<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">1.8</span><br>\*/<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Function</span>&lt;T, R&gt; &#123;<br>/\*\*<br>\* Applies <span class="hljs-built_in">this</span> function to the given argument.<br>\*<br>\* <span class="hljs-meta">@param</span> t the function argument<br>\* <span class="hljs-meta">@return</span> the function result<br>\*/<br>R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure><p>T为传入参数的类型，R为返回参数的类型</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Function 函数型接口，有一个输入参数，一个输出<br>\* 只要是函数型接口 可以用lambda表达简化<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Function function = new Function&lt;String,String&gt;() &#123;</span><br><span class="hljs-comment">// @Override</span><br><span class="hljs-comment">// public String apply(String str) &#123;</span><br><span class="hljs-comment">// return str;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">//使用lambda简化</span><br><span class="hljs-type">Function</span> <span class="hljs-variable">function</span> <span class="hljs-operator">=</span> (str)-&gt;&#123;<span class="hljs-keyword">return</span> str;&#125;;<br>System.out.println(function.apply(<span class="hljs-string">&quot;1223&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>断定型接口：有一个输入参数，返回值只能是布尔值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Represents a <span class="hljs-title function_">predicate</span> <span class="hljs-params">(<span class="hljs-type">boolean</span>-valued function)</span> of one argument.<br>\*<br>\* &lt;p&gt;This is a &lt;a href=<span class="hljs-string">&quot;package-summary.html&quot;</span>&gt;functional interface&lt;/a&gt;<br>\* whose functional method is &#123;<span class="hljs-meta">@link</span> #test(Object)&#125;.<br>\*<br>\* <span class="hljs-meta">@param</span> &lt;T&gt; the type of the input to the predicate<br>\*<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">1.8</span><br>\*/<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Predicate</span>&lt;T&gt; &#123;<br>/\*\*<br>\* Evaluates <span class="hljs-built_in">this</span> predicate on the given argument.<br>\*<br>\* <span class="hljs-meta">@param</span> t the input argument<br>\* <span class="hljs-meta">@return</span> &#123;<span class="hljs-meta">@code</span> <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">if</span> the input argument matches the predicate,<br>\* otherwise &#123;<span class="hljs-meta">@code</span> <span class="hljs-literal">false</span>&#125;<br>\*/<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 断定型接口：有一个输入参数，返回值只能是一个 <span class="hljs-type">boolean</span><br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Predicate&lt;String&gt; predicate = new Predicate&lt;String&gt;() &#123;</span><br><span class="hljs-comment">// @Override</span><br><span class="hljs-comment">// public boolean test(String str) &#123;</span><br><span class="hljs-comment">// return str.isEmpty();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;;</span><br>Predicate&lt;String&gt; predicate = (str)-&gt;&#123;<span class="hljs-keyword">return</span> str.isEmpty();&#125;;<br>System.out.println(predicate.test(<span class="hljs-string">&quot;a&quot;</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Consumer消费性接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Represents an operation that accepts a single input argument and returns no<br>\* result. Unlike most other functional interfaces, &#123;<span class="hljs-meta">@code</span> Consumer&#125; is expected<br>\* to operate via side-effects.<br>\*<br>\* &lt;p&gt;This is a &lt;a href=<span class="hljs-string">&quot;package-summary.html&quot;</span>&gt;functional interface&lt;/a&gt;<br>\* whose functional method is &#123;<span class="hljs-meta">@link</span> #accept(Object)&#125;.<br>\*<br>\* <span class="hljs-meta">@param</span> &lt;T&gt; the type of the input to the operation<br>\*<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">1.8</span><br>\*/<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&lt;T&gt; &#123;<br>/\*\*<br>\* Performs <span class="hljs-built_in">this</span> operation on the given argument.<br>\*<br>\* <span class="hljs-meta">@param</span> t the input argument<br>\*/<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(T t)</span>;<br></code></pre></td></tr></table></figure><p><strong>只有输入，无返回值</strong></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Consumer 消费型接口：只要输入，无返回值<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Consumer&lt;String&gt; consumer = new Consumer&lt;String&gt;() &#123;</span><br><span class="hljs-comment">// @Override</span><br><span class="hljs-comment">// public void accept(String s) &#123;</span><br><span class="hljs-comment">// System.out.println(s);</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;;</span><br><span class="hljs-comment">// consumer.accept(&quot;aaaa&quot;);</span><br>Consumer&lt;String&gt; consumer =(s)-&gt;&#123;<br>System.out.println(s);<br>&#125;;<br>consumer.accept(<span class="hljs-string">&quot;aaa&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Supplier 供给型接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Represents a supplier of results.<br>\*<br>\* &lt;p&gt;There is no requirement that a <span class="hljs-keyword">new</span> <span class="hljs-title class_">or</span> distinct result be returned each<br>\* time the supplier is invoked.<br>\*<br>\* &lt;p&gt;This is a &lt;a href=<span class="hljs-string">&quot;package-summary.html&quot;</span>&gt;functional interface&lt;/a&gt;<br>\* whose functional method is &#123;<span class="hljs-meta">@link</span> #get()&#125;.<br>\*<br>\* <span class="hljs-meta">@param</span> &lt;T&gt; the type of results supplied by <span class="hljs-built_in">this</span> supplier<br>\*<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">1.8</span><br>\*/<br><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Supplier</span>&lt;T&gt; &#123;<br>/\*\*<br>\* Gets a result.<br>\*<br>\* <span class="hljs-meta">@return</span> a result<br>\*/<br>T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>无参数，只有返回值</strong></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Supplier 供给型接口：没有参数，只有返回<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// Supplier&lt;Integer&gt; supplier = new Supplier&lt;Integer&gt;() &#123;</span><br><span class="hljs-comment">// @Override</span><br><span class="hljs-comment">// public Integer get() &#123;</span><br><span class="hljs-comment">// return 1024;</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// &#125;;</span><br>Supplier&lt;Integer&gt; supplier = ()-&gt;&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;&#125;;<br>System.out.println(supplier.get());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="13-Stream流式计算"><a href="#13-Stream流式计算" class="headerlink" title="13.Stream流式计算"></a>13.Stream流式计算</h2><blockquote><p>什么是Stream？</p></blockquote><p>这里说的Stream不是IO里的输入输出流，Stream流是一个集合元素的函数模型(处理的步骤方法)，它并不是集合，也不是数据结构，其本身并不存储任何元素（或其地址值）。</p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 题目要求：一分钟内完成此题，只能用一行代码实现！<br>\* 现在有<span class="hljs-number">5</span>个用户！筛选：<br>\* <span class="hljs-number">1</span>、ID 必须是偶数<br>\* <span class="hljs-number">2</span>、年龄必须大于<span class="hljs-number">23</span>岁<br>\* <span class="hljs-number">3</span>、用户名转为大写字母<br>\* <span class="hljs-number">4</span>、用户名字母倒着排序<br>\* <span class="hljs-number">5</span>、只输出一个用户！<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">21</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">22</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">u3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;c&quot;</span>,<span class="hljs-number">23</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">u4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-number">24</span>);<br><span class="hljs-type">User</span> <span class="hljs-variable">u5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">6</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-number">25</span>);<br><span class="hljs-comment">//转集合 方便操作</span><br>List&lt;User&gt; list = Arrays.asList(u1, u2, u3, u4, u5);<br><span class="hljs-comment">//stream</span><br>list.stream()<br>.filter((u)-&gt;&#123;<span class="hljs-keyword">return</span> u.getId()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>;&#125;)<br>.filter((u)-&gt;&#123;<span class="hljs-keyword">return</span> u.getAge()&gt;<span class="hljs-number">23</span>;&#125;)<br>.map((u)-&gt;&#123;<span class="hljs-keyword">return</span> u.getName().toUpperCase();&#125;)<br>.sorted((uu1,uu2)-&gt;&#123;<span class="hljs-keyword">return</span> uu2.compareTo(uu1);&#125;)<br>.limit(<span class="hljs-number">1</span>).forEach(System.out::println);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-ForkJoin"><a href="#14-ForkJoin" class="headerlink" title="14.ForkJoin"></a>14.ForkJoin</h2><blockquote><p>什么是ForkJoin</p></blockquote><p>ForkJoin在JDK1.7，并行执行任务！提高效率！</p><p><img src="https://i.loli.net/2021/01/26/Mq7gxTiZkLWP6No.jpg"></p><p>查看JDK1.8帮助文档：</p><p><img src="https://i.loli.net/2021/01/26/BAacq5SvRrGVUke.jpg"></p><p><img src="https://i.loli.net/2021/01/26/j946zWAKDEobUML.jpg"></p><p><img src="https://i.loli.net/2021/01/26/6I2r9zU7DXOhYSf.png"></p><p>可以看到，这是类似一个分任务递归的去执行，根据需求可以选择无返回值和有返回值的方法</p><p>可以写个测试例子，对比三种求和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* ForkJoin分支合并<br>\* 使用方法：<br>\* <span class="hljs-number">1.</span>forkJoinPool 通过它执行<br>\* <span class="hljs-number">2.</span>计算任务 forkjoinPool.execute(ForkJoinTask task)<br>\* <span class="hljs-number">3.</span>计算类要继承 ForkJoinTask<br>\* 求和任务 计算<span class="hljs-number">1</span>-<span class="hljs-number">10</span>亿的和<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkJoinDemo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecursiveTask</span>&lt;Long&gt; &#123;<br><span class="hljs-keyword">private</span> Long start;<br><span class="hljs-keyword">private</span> Long end;<br><span class="hljs-comment">//临界值</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Long</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000L</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ForkJoinDemo</span><span class="hljs-params">(Long start, Long end)</span> &#123;<br><span class="hljs-built_in">this</span>.start = start;<br><span class="hljs-built_in">this</span>.end = end;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Long <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> ((end-start)&lt;temp)&#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">Long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>sum += i;<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//forkjoin递归</span><br><span class="hljs-type">long</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (start + end) / <span class="hljs-number">2</span>;<br><span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(start , middle);<br>task1.fork(); <span class="hljs-comment">// 拆分任务，把任务压入线程队列</span><br><span class="hljs-type">ForkJoinDemo</span> <span class="hljs-variable">task2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(middle+<span class="hljs-number">1</span> , end);<br>task2.fork(); <span class="hljs-comment">// 拆分任务，把任务压入线程队列</span><br><span class="hljs-keyword">return</span> task1.join() + task2.join();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 测试<span class="hljs-number">3</span>种求和方式的性能<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><span class="hljs-comment">//test1(); //sum=500000000500000000 花费时间：8366</span><br><span class="hljs-comment">//test2(); // sum=500000000500000000 花费时间：8599</span><br>test3(); <span class="hljs-comment">//sum=500000000500000000 花费时间：238</span><br>&#125;<br><span class="hljs-comment">//1.直接for循环求</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">Long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>; i &lt;= <span class="hljs-number">10</span>\_0000\_0000; i++) &#123;<br>sum +=i;<br>&#125;<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot; 花费时间：&quot;</span>+(end-start));<br>&#125;<br><span class="hljs-comment">//2.forJoin</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-type">ForkJoinPool</span> <span class="hljs-variable">forkJoinPool</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinPool</span>();<br>ForkJoinTask&lt;Long&gt; task = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkJoinDemo</span>(<span class="hljs-number">0L</span>, <span class="hljs-number">10</span>\_0000\_0000L);<br>ForkJoinTask&lt;Long&gt; submit = forkJoinPool.submit(task);<br><span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> submit.get();<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot; 花费时间：&quot;</span>+(end-start));<br>&#125;<br><span class="hljs-comment">//3.Stream并行流操作</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><span class="hljs-comment">//Stream 并行流</span><br><span class="hljs-type">Long</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> LongStream.rangeClosed(<span class="hljs-number">0L</span>, <span class="hljs-number">10</span>\_0000\_0000L).parallel().reduce(<span class="hljs-number">0</span>,Long::sum);<br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;sum=&quot;</span>+sum+<span class="hljs-string">&quot; 花费时间：&quot;</span>+(end-start));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到Stream的计算巨快！</p><p>这里也只是讲解下ForkJoin的思想，Stream的相关的API在JDK帮助文档中写的很清楚，当遇到某个需求时，可以直接去查阅即可，这里就不过多阐述。</p><h2 id="15-异步回调"><a href="#15-异步回调" class="headerlink" title="15.异步回调"></a>15.异步回调</h2><blockquote><p>Future设计的初衷：对将来的某个事件的结果进行建模</p></blockquote><p><img src="https://i.loli.net/2021/01/26/8XYHUZA6eumQSLJ.png"></p><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 异步调用：CompletableFuture<br>\* 类似Ajax Success error<br>\* 异步执行<br>\* 成功回调<br>\* 失败回调<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><span class="hljs-comment">//无返回值的runAsync 异步回调</span><br><span class="hljs-comment">// CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="hljs-comment">// try &#123;</span><br><span class="hljs-comment">// TimeUnit.SECONDS.sleep(2);</span><br><span class="hljs-comment">// &#125; catch (InterruptedException e) &#123;</span><br><span class="hljs-comment">// e.printStackTrace();</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// System.out.println(Thread.currentThread().getName()+&quot;runAsync=&gt;Void&quot;);</span><br><span class="hljs-comment">// &#125;);</span><br><span class="hljs-comment">// System.out.println(&quot;111&quot;);</span><br><span class="hljs-comment">// completableFuture.get(); //获取回调结果</span><br><span class="hljs-comment">//有返回值的回调</span><br>CompletableFuture&lt;Integer&gt; completableFuture = CompletableFuture.supplyAsync(()-&gt;&#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;supplyAsync=&gt;Integer&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>&#125;);<br>completableFuture.whenComplete((t,u)-&gt;&#123;<br>System.out.println(<span class="hljs-string">&quot;t====&gt;&quot;</span>+t); <span class="hljs-comment">//正确的返回结果</span><br>System.out.println(<span class="hljs-string">&quot;u====&gt;&quot;</span>+u); <span class="hljs-comment">//错误的返回结果</span><br>&#125;).exceptionally((e)-&gt;&#123; <span class="hljs-comment">//错误的返回函数</span><br>System.out.println(e.getMessage()); <span class="hljs-comment">//CompletionException</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">233</span>;<br>&#125;).get();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="16-JMM"><a href="#16-JMM" class="headerlink" title="16.JMM"></a>16.JMM</h2><blockquote><p>Volatile的理解</p></blockquote><p>Volatile 是 Java 虚拟机提供<strong>轻量级的同步机制</strong></p><p>1、保证可见性</p><p>2、不保证原子性</p><p>3、禁止指令重排</p><blockquote><p>JMM是什么？</p></blockquote><p>Java的并发采用的是共享内存模型</p><p><strong>关于JMM的一些同步约定：</strong></p><p>1.线程解锁前，必须把共享变量立刻刷回主存；</p><p>2.线程加锁前，必须读取主存中的最新值到工作内存中；</p><p>3.加锁和解锁是同一把锁。</p><blockquote><p>什么是工作内存？什么是主存？</p></blockquote><p><img src="https://i.loli.net/2021/01/26/qYidJoawj3S7L5e.jpg"></p><p><a href="https://imgchr.com/i/sXts0S"><img src="https://s3.ax1x.com/2021/01/26/sXts0S.jpg"></a></p><p><strong>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类</strong></p><p><strong>型的变量来说，load、store、read和write操作在某些平台上允许例外）</strong></p><ul><li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li><li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li><li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li><li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li><li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li><li>write （写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul><p><strong>JMM对这八种指令的使用，制定了如下规则：</strong></p><ul><li><p>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</p></li><li><p>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</p></li><li><p>不允许一个线程将没有assign的数据从工作内存同步回主内存</p></li><li><p>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是对变量实施use、store操作之前，必须经过assign和load操作</p></li><li><p>一个变量同一时间只有一个线程能对其进行lock。<strong>多次lock后，必须执行相同次数的unlock才能解锁</strong></p></li><li><p>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</p></li><li><p>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量对一个变量进行unlock操作之前，必须把此变量同步回主内存</p><p>​</p></li></ul><p>写个测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Volatile的可见性<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">20</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JMMDemo1</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//主存中num已经置为10 但线程中未得到信息 陷入死循环</span><br><span class="hljs-comment">//加入Volatile 保证可见性</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(()-&gt;&#123;<br><span class="hljs-keyword">while</span> (num == <span class="hljs-number">0</span>)&#123;<br>&#125;<br>&#125;).start();<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">2</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>num = <span class="hljs-number">10</span>;<br>System.out.println(<span class="hljs-string">&quot;num:&quot;</span>+num);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>main线程中把num置为10了，但新开的线程由于不知道到把num置为10，一直在while循环中跳不出来，程序出现死循环，解决的办法就是在num的声明中加入volatile，保证线程之间的可见性！</p><p>关于volatile具体的理解和测试，将在下一篇文章进行详细讲解。</p>]]></content>
    
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发编程系列（二）</title>
    <link href="/2021/01/25/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/01/25/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JUC并发编程系列（二）"><a href="#JUC并发编程系列（二）" class="headerlink" title="JUC并发编程系列（二）"></a>JUC并发编程系列（二）</h1><h2 id="6-八锁问题"><a href="#6-八锁问题" class="headerlink" title="6.八锁问题"></a>6.八锁问题</h2><blockquote><p>1.两个sync <strong>锁的对象是方法的调用者</strong>，按顺序调用 发短信 打电话</p><p>2.发短信休眠4S 依旧一样 按顺序调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-number">8</span>锁，关于锁的<span class="hljs-number">8</span>个问题<br>\* <span class="hljs-number">1.</span>两个sync 锁的对象是方法的调用者，按顺序调用 发短信 打电话<br>\* <span class="hljs-number">2.</span>发短信休眠4S 依旧一样 按顺序调用<br>\* 核心： 对象！！！<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Phone</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><span class="hljs-type">Phone</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone.sendMes();<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone.call();<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone1.call();<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>3.增加一个普通方法，该方法不会受sync的限制，优先执行</p><p>4.两个对象，两个同步方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-number">3.</span>增加一个普通方法 该方法不受同步锁限制 会先执行<br>\* <span class="hljs-number">4.</span>两个对象 两个同步方法<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//两个对象，两把锁，那就按时间先后执行</span><br><span class="hljs-type">Phone2</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone2</span>();<br><span class="hljs-type">Phone2</span> <span class="hljs-variable">phone2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone2</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone1.sendMes();<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-comment">// 捕获</span><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone2.call();<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;发短信&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;打电话&quot;</span>);<br>&#125;<br><span class="hljs-comment">//一个不加锁的同步方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=====&gt;hello&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>把普通方法和sync方法放一起执行，由于sync执行需要拿到锁才能执行，但普通方法不受锁的影响，所以优先执行；</p></li><li><p>两个对象，去操作sync方法，会发现没有进行线程休眠的call()先运行，因为两个对象就是两把锁了，会按时间先后进行了。</p><p>​</p></li></ul><blockquote><p>5.两个静态sync方法，一个对象去调用</p><p>6.两个静态sync方法，两个对象去调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-number">5.</span>增加两个静态方法 一个对象 发短信 打电话<br>\* <span class="hljs-number">6.</span>两个对象 两个静态的同步方法 发短信 打电话<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//两个对象的class类模板只有一个，statis锁的是class</span><br><span class="hljs-type">Phone3</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone3</span>();<br><span class="hljs-type">Phone3</span> <span class="hljs-variable">phone2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone3</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone1.sendMes();<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-comment">// 捕获</span><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone2.call();<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone3</span> &#123;<br><span class="hljs-comment">//静态的同步方法 锁的是 class类模板</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li><p>需要注意的是static是类的修饰，意是在类加载时就创建了，用static去修设sync方法，此时就不是锁的方法的调用者了，是锁的整个类了，故当一个对象去调用时，按调用次序的先后执行。</p></li><li><p>类锁与资源对象的多少无关，多个资源对象共享一个类锁</p><p>​</p></li></ul><blockquote><p>7.一个静态的同步方法，一个普通的同步方法 一个对象 打电话 发短信</p><p>8.一个静态的同步方法，一个普通的同步方法 两个个对象 打电话 发短信</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-number">7.</span>一个静态的同步方法 一个普通的同步方法 一个对象 打电话 发短信<br>\* <span class="hljs-number">8.</span>一个静态的同步方法 一个普通的同步方法 两个对象 打电话 发短信<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Phone4</span> <span class="hljs-variable">phone1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone4</span>();<br><span class="hljs-type">Phone4</span> <span class="hljs-variable">phone2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone4</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone1.sendMes();<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-comment">// 捕获</span><br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>phone2.call();<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMes</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">4</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>类锁和对象锁互不干扰，由于sendMes() 是类锁，要等4秒，而call()和它不是一类锁，所以先执行。</p><p><strong>总结：</strong></p><p>1、当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</p><p>2、Java 中的每一个对象都可以作为锁；<strong>普通同步方法锁 this，静态同步方法锁 Class</strong>，同步方法块锁括号；</p><p>3、只要<strong>锁的对象不是同一个</strong>，就直接按照线程执行的<strong>快慢来决定</strong>；<strong>锁的对象是同一个</strong>，就按照线程进入的先<strong>后顺序决定</strong>。</p><h2 id="7-集合类不安全"><a href="#7-集合类不安全" class="headerlink" title="7.集合类不安全"></a>7.集合类不安全</h2><blockquote><p>List不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-comment">//java.util.ConcurrentModificationException</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//测试并发下的ArraysList 不安全 java.util.ConcurrentModificationException</span><br>/\*\*<br>\* 解决方案：<br>\* <span class="hljs-number">1.</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>() 线程安全<br>\* <span class="hljs-number">2.</span>Collections.synchronizedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>\* <span class="hljs-number">3.</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArrayList</span>&lt;&gt;();<br>\*/<br><span class="hljs-comment">//CopyOnWrite 写入时复制 COW 计算机程序设计领域的一种优化策略</span><br><span class="hljs-comment">//多线程调用时，list，读取的时候，固定的，写入覆盖</span><br><span class="hljs-comment">//再写入的时候避免覆盖，造成数据问题</span><br><span class="hljs-comment">//读写分离</span><br><span class="hljs-comment">//CopyOnWriteArray 底层是数组复制 Voctor的add底层是sync 效率较低</span><br>List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();<br><span class="hljs-comment">// List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</span><br><span class="hljs-comment">// List&lt;Object&gt; list = new CopyOnWriteArrayList&lt;&gt;();</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>list.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>list.forEach(System.out::println);<br>&#125;, String.valueOf(i)).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Map不安全</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 测试HashMap<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-comment">//java.util.ConcurrentModificationException</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//map</span><br>/\*\*<br>\* 解决方案<br>\* <span class="hljs-number">1.</span> Collections.synchronizedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br>\* <span class="hljs-number">2.</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br>\*/<br><span class="hljs-comment">//默认等价于什么？ new HashMap(16,0.75);</span><br><span class="hljs-comment">// Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="hljs-comment">// Map&lt;String, Object&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</span><br>Map&lt;Object, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>System.out.println(map);<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HashMap面试绝对会问底层实现和如何插入重复key，后面会单独写一篇关于HashMap的文章！</p><blockquote><p>Set测试</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 测试HashSet<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-comment">//java.util.ConcurrentModificationException</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//Set&lt;String&gt; set = new HashSet&lt;&gt;();</span><br><span class="hljs-comment">//HashSet 底层就是HashMap</span><br>/\*\*<br>\* 解决方案：<br>\* <span class="hljs-number">1.</span>Collections.synchronizedSet(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>\* <span class="hljs-number">2.</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>\*/<br><span class="hljs-comment">// Set&lt;Object&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</span><br>Set&lt;Object&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>set.add(UUID.randomUUID().toString().substring(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>));<br>System.out.println(set);<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>hashSet底层是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HashMap&lt;E,Object&gt; map;<br><span class="hljs-comment">// Dummy value to associate with an Object in the backing Map</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">PRESENT</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>/\*\*<br>\* Constructs a <span class="hljs-keyword">new</span>, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has<br>\* <span class="hljs-keyword">default</span> initial <span class="hljs-title function_">capacity</span> <span class="hljs-params">(<span class="hljs-number">16</span>)</span> and load <span class="hljs-title function_">factor</span> <span class="hljs-params">(<span class="hljs-number">0.75</span>)</span>.<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//好家伙，底层之间new的HashMap()</span><br>map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br>/\*\*<br>\* Constructs a <span class="hljs-keyword">new</span> <span class="hljs-title class_">set</span> containing the elements in the specified<br>\* collection. The &lt;tt&gt;HashMap&lt;/tt&gt; is created with <span class="hljs-keyword">default</span> load factor<br>\* (<span class="hljs-number">0.75</span>) and an initial capacity sufficient to contain the elements in<br>\* the specified collection.<br>\*<br>\* <span class="hljs-meta">@param</span> c the collection whose elements are to be placed into <span class="hljs-built_in">this</span> set<br>\* <span class="hljs-meta">@throws</span> NullPointerException <span class="hljs-keyword">if</span> the specified collection is <span class="hljs-literal">null</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">(Collection&lt;? extends E&gt; c)</span> &#123;<br>map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(Math.max((<span class="hljs-type">int</span>) (c.size()/<span class="hljs-number">.75f</span>) + <span class="hljs-number">1</span>, <span class="hljs-number">16</span>));<br>addAll(c);<br>&#125;<br>/\*\*<br>\* Constructs a <span class="hljs-keyword">new</span>, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has<br>\* the specified initial capacity and the specified load factor.<br>\*<br>\* <span class="hljs-meta">@param</span> initialCapacity the initial capacity of the hash map<br>\* <span class="hljs-meta">@param</span> loadFactor the load factor of the hash map<br>\* <span class="hljs-meta">@throws</span> IllegalArgumentException <span class="hljs-keyword">if</span> the initial capacity is less<br>\* than zero, or <span class="hljs-keyword">if</span> the load factor is nonpositive<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> &#123;<br>map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(initialCapacity, loadFactor);<br>&#125;<br>/\*\*<br>\* Constructs a <span class="hljs-keyword">new</span>, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has<br>\* the specified initial capacity and <span class="hljs-keyword">default</span> load <span class="hljs-title function_">factor</span> <span class="hljs-params">(<span class="hljs-number">0.75</span>)</span>.<br>\*<br>\* <span class="hljs-meta">@param</span> initialCapacity the initial capacity of the hash table<br>\* <span class="hljs-meta">@throws</span> IllegalArgumentException <span class="hljs-keyword">if</span> the initial capacity is less<br>\* than zero<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashSet</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(initialCapacity);<br>&#125;<br>/\*\*<br>\* Constructs a <span class="hljs-keyword">new</span>, empty linked hash set. (This <span class="hljs-keyword">package</span> <span class="hljs-keyword">private</span><br>\* constructor is only used by LinkedHashSet.) The backing<br>\* HashMap instance is a LinkedHashMap with the specified initial<br>\* capacity and the specified load factor.<br>\*<br>\* <span class="hljs-meta">@param</span> initialCapacity the initial capacity of the hash map<br>\* <span class="hljs-meta">@param</span> loadFactor the load factor of the hash map<br>\* <span class="hljs-meta">@param</span> dummy <span class="hljs-title function_">ignored</span> <span class="hljs-params">(distinguishes <span class="hljs-built_in">this</span></span><br><span class="hljs-params">\* constructor from other <span class="hljs-type">int</span>, <span class="hljs-type">float</span> constructor.)</span><br>\* <span class="hljs-meta">@throws</span> IllegalArgumentException <span class="hljs-keyword">if</span> the initial capacity is less<br>\* than zero, or <span class="hljs-keyword">if</span> the load factor is nonpositive<br>\*/<br>HashSet(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor, <span class="hljs-type">boolean</span> dummy) &#123;<br>map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;(initialCapacity, loadFactor);<br>&#125;<br>/\*\*<br>\* Returns an iterator over the elements in <span class="hljs-built_in">this</span> set. The elements<br>\* are returned in no particular order.<br>\*<br>\* <span class="hljs-meta">@return</span> an Iterator over the elements in <span class="hljs-built_in">this</span> set<br>\* <span class="hljs-meta">@see</span> ConcurrentModificationException<br>\*/<br><span class="hljs-keyword">public</span> Iterator&lt;E&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> map.keySet().iterator();<br>&#125;<br>/\*\*<br>\* Returns the number of elements in <span class="hljs-built_in">this</span> <span class="hljs-title function_">set</span> <span class="hljs-params">(its cardinality)</span>.<br>\*<br>\* <span class="hljs-meta">@return</span> the number of elements in <span class="hljs-built_in">this</span> <span class="hljs-title function_">set</span> <span class="hljs-params">(its cardinality)</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> map.size();<br>&#125;<br>/\*\*<br>\* Returns &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set contains no elements.<br>\*<br>\* <span class="hljs-meta">@return</span> &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set contains no elements<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> map.isEmpty();<br>&#125;<br>/\*\*<br>\* Returns &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set contains the specified element.<br>\* More formally, returns &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> and only <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set<br>\* contains an element &lt;tt&gt;e&lt;/tt&gt; such that<br>\* &lt;tt&gt;(o==<span class="hljs-literal">null</span>&amp;nbsp;?&amp;nbsp;e==<span class="hljs-literal">null</span>&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.<br>\*<br>\* <span class="hljs-meta">@param</span> o element whose presence in <span class="hljs-built_in">this</span> set is to be tested<br>\* <span class="hljs-meta">@return</span> &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set contains the specified element<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(Object o)</span> &#123;<br><span class="hljs-keyword">return</span> map.containsKey(o);<br>&#125;<br>/\*\*<br>\* Adds the specified element to <span class="hljs-built_in">this</span> set <span class="hljs-keyword">if</span> it is not already present.<br>\* More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to <span class="hljs-built_in">this</span> set <span class="hljs-keyword">if</span><br>\* <span class="hljs-built_in">this</span> set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that<br>\* &lt;tt&gt;(e==<span class="hljs-literal">null</span>&amp;nbsp;?&amp;nbsp;e2==<span class="hljs-literal">null</span>&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.<br>\* If <span class="hljs-built_in">this</span> set already contains the element, the call leaves the set<br>\* unchanged and returns &lt;tt&gt;<span class="hljs-literal">false</span>&lt;/tt&gt;.<br>\*<br>\* <span class="hljs-meta">@param</span> e element to be added to <span class="hljs-built_in">this</span> set<br>\* <span class="hljs-meta">@return</span> &lt;tt&gt;<span class="hljs-literal">true</span>&lt;/tt&gt; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> set did not already contain the specified<br>\* element<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br><span class="hljs-comment">//map 和 set的区别 若之前存在的key是不能再加入set的，返回false</span><br><span class="hljs-comment">//map则会覆盖</span><br><span class="hljs-keyword">return</span> map.put(e, PRESENT)==<span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-常用辅助类"><a href="#8-常用辅助类" class="headerlink" title="8.常用辅助类"></a>8.常用辅助类</h2><h3 id="8-1-CountDownLatch"><a href="#8-1-CountDownLatch" class="headerlink" title="8.1.CountDownLatch"></a><strong>8.1.CountDownLatch</strong></h3><p><a href="https://imgchr.com/i/sLpdnH"><img src="https://s3.ax1x.com/2021/01/25/sLpdnH.jpg"></a></p><p>JDK1.8官方文档已经说的很清楚了，CountDownLatch起一个线程同步辅助的作用，类似一个计数器，已经给出示例代码，我们可以写测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CountDownLatch 计数器<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CountDownLatchDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//有线程任务的时候，可以使用！</span><br><span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">countDownLatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">6</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>countDownLatch.countDown();<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; Go out&quot;</span>+<span class="hljs-string">&quot;当前计数器==&gt;&quot;</span>+countDownLatch.getCount());<br>&#125;, String.valueOf(i)).start();<br>&#125;<br>countDownLatch.await();<br>System.out.println(<span class="hljs-string">&quot;Close Door&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>countDownLatch.countDown(); &#x2F;&#x2F;数量-1</p><p>countDownLatch.await(); &#x2F;&#x2F;等待计数器归零，然后再向下执行</p><p>每次有线程调用 countDown() 数量-1，假设计数器变为0，countDownLatch.await() 就会被唤醒，继续</p><p>执行！</p><h3 id="8-2-CyclicBarrier"><a href="#8-2-CyclicBarrier" class="headerlink" title="8.2.CyclicBarrier"></a><strong>8.2.CyclicBarrier</strong></h3><p><a href="https://imgchr.com/i/sLB7vR"><img src="https://s3.ax1x.com/2021/01/25/sLB7vR.jpg"></a></p><p>加法计算器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* CyclicBarrier 加法计数器<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CyclicbarrierDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>/\*\*<br>\* 集齐<span class="hljs-number">7</span>颗龙珠，召唤神龙<br>\*/<br><span class="hljs-type">CyclicBarrier</span> <span class="hljs-variable">cyclicBarrier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CyclicBarrier</span>(<span class="hljs-number">7</span>, () -&gt; &#123;<br>System.out.println(<span class="hljs-string">&quot;召唤神龙成功！&quot;</span>);<br>&#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;拿到&quot;</span> + temp + <span class="hljs-string">&quot;龙珠&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>cyclicBarrier.await();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (BrokenBarrierException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试发现，当线程预期没有达到计数器的初始值时，<strong>都会阻塞</strong>，等待下一个线程，直到满足期望才会执行最终的方法。</p><h3 id="8-3-Semaphore"><a href="#8-3-Semaphore" class="headerlink" title="8.3.Semaphore"></a><strong>8.3.Semaphore</strong></h3><p>信号量</p><p><a href="https://imgchr.com/i/sL6STP"><img src="https://s3.ax1x.com/2021/01/25/sL6STP.jpg"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SemaphoreDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//线程数量：停车位！限流！</span><br><span class="hljs-type">Semaphore</span> <span class="hljs-variable">semaphore</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Semaphore</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>semaphore.acquire(); <span class="hljs-comment">//获取</span><br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;抢到了车位&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;离开了车位&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>semaphore.release(); <span class="hljs-comment">//释放</span><br>&#125;<br>&#125;, String.valueOf(i)).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><p>2抢到了车位<br>3抢到了车位<br>1抢到了车位<br>1离开了车位<br>3离开了车位<br>4抢到了车位<br>2离开了车位<br>6抢到了车位<br>5抢到了车位<br>6离开了车位<br>4离开了车位<br>5离开了车位</p><p>可以看到在同一时间，只有<strong>三辆车停着的</strong>，与Semaphore初始值相同，符合预期！</p><p>semaphore.acquire() 获得，假设如果已经满了，等待直到被释放为止</p><p>semaphore.release() 释放，会将当前的信号量释放+1.然后唤醒等待的线程！</p><p>作用：<strong>多个共享资源互斥的使用！并发限流，控制最大的线程数！</strong></p><h2 id="9-读写锁"><a href="#9-读写锁" class="headerlink" title="9.读写锁"></a>9.读写锁</h2><p><a href="https://imgchr.com/i/sLg0Ld"><img src="https://s3.ax1x.com/2021/01/25/sLg0Ld.jpg"></a></p><p>可以看到读写锁是把<strong>lock更细粒度的分化</strong>，读可以被多个线程同时读，但写的时候只能一个线程去写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 独占锁（写锁） 一次只能被一个线程占用<br>\* 共享锁（读锁） 多个线程可以同时占用<br>\* ReadWriteLock<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadWriteLockDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// MyCache myCache = new MyCache();</span><br><span class="hljs-type">MyCacheLock</span> <span class="hljs-variable">myCache</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCacheLock</span>();<br><span class="hljs-comment">//测试写</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>myCache.write(temp + <span class="hljs-string">&quot;&quot;</span>, temp + <span class="hljs-string">&quot;&quot;</span>);<br>&#125;, String.valueOf(i)).start();<br>&#125;<br><span class="hljs-comment">//测试读取</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>myCache.read(temp + <span class="hljs-string">&quot;&quot;</span>);<br>&#125;, String.valueOf(i)).start();<br>&#125;<br>&#125;<br>&#125;<br>/\*\*<br>\* 自定义缓存---不加锁<br>\*/<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCache</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(String key, Object o)</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入Key&quot;</span> + key);<br>map.put(key, o);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入完成&quot;</span> + key);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String key)</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取key&quot;</span> + key);<br>map.get(key);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取成功&quot;</span> + key);<br>&#125;<br>&#125;<br>/\*\*<br>\* 自定义缓存--&gt;加入读写锁 ReadWriteLock 比lock 粒度更细<br>\*/<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCacheLock</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">private</span> <span class="hljs-type">ReadWriteLock</span> <span class="hljs-variable">readWriteLock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">(String key, Object o)</span> &#123;<br>readWriteLock.writeLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入Key&quot;</span> + key);<br>map.put(key, o);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;写入完成&quot;</span> + key);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>readWriteLock.writeLock().unlock();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">(String key)</span> &#123;<br>readWriteLock.readLock().lock();<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取key&quot;</span> + key);<br>map.get(key);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;读取成功&quot;</span> + key);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>readWriteLock.readLock().unlock();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里在写测试类的时候，写了两个自定义缓存类，一个不加锁，一个加锁</p><p>不加锁的结果如下：</p><p><a href="https://imgchr.com/i/sLRlU1"><img src="https://s3.ax1x.com/2021/01/25/sLRlU1.jpg"></a></p><p>以发现在线程1写入key1的时候，线程5也在写入key5，然后线程4直接就把key4写入完成了，这很明显不符合多线程的要求，很容易出现线程不安全（key1还没写入完成，后面有插队线程执行写入key1，直接就把key1的值覆盖了）。</p><p>加如读写锁的结果：</p><p><a href="https://imgchr.com/i/sLWFqH"><img src="https://s3.ax1x.com/2021/01/25/sLWFqH.jpg"></a></p><p>可以看到，写入是时候只有一个线程，必须等该线程写入完毕后，其它线程才能继续写入，保证了线程安全！</p><h2 id="10-阻塞队列"><a href="#10-阻塞队列" class="headerlink" title="10.阻塞队列"></a>10.阻塞队列</h2><p><a href="https://imgchr.com/i/sLfFpV"><img src="https://s3.ax1x.com/2021/01/25/sLfFpV.png"></a></p><p><a href="https://imgchr.com/i/sLfMfx"><img src="https://s3.ax1x.com/2021/01/25/sLfMfx.jpg"></a></p><p><a href="https://imgchr.com/i/sLhvIs"><img src="https://s3.ax1x.com/2021/01/25/sLhvIs.jpg"></a></p><p>阻塞队列的使用场景：并发处理，线程池</p><p>学会使用队列的四组API</p><table><thead><tr><th>方法</th><th>抛出异常</th><th>有返回值，不抛出异常</th><th>阻塞等待</th><th>等待超时</th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer</td><td>put</td><td>offer</td></tr><tr><td>移除</td><td>remove</td><td>poll</td><td>take</td><td>poll</td></tr><tr><td>检查队首元素</td><td>element</td><td>peek</td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* ArrayBlockingQueue四组API的使用<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlockingQueueDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>test4();<br>&#125;<br>/\*\*<br>\* 抛出异常<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ArrayBlockingQueue</span> <span class="hljs-variable">blockingQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.add(<span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-comment">//java.lang.IllegalStateException: Queue full</span><br><span class="hljs-comment">//System.out.println(blockingQueue.add(&quot;d&quot;));</span><br>System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br>System.out.println(blockingQueue.remove());<br>System.out.println(blockingQueue.remove());<br>System.out.println(blockingQueue.remove());<br><span class="hljs-comment">//java.util.NoSuchElementException</span><br><span class="hljs-comment">// System.out.println(blockingQueue.remove());</span><br>&#125;<br>/\*\*<br>\* 有返回值，不抛出异常<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ArrayBlockingQueue</span> <span class="hljs-variable">blockingQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-comment">//超出队列容量 返回false</span><br><span class="hljs-comment">//System.out.println(blockingQueue.offer(&quot;c&quot;));</span><br>System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br><span class="hljs-comment">//队列为空 继续poll 返回null</span><br>System.out.println(blockingQueue.poll());<br>&#125;<br>/\*\*<br>\* 阻塞等待<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">ArrayBlockingQueue</span> <span class="hljs-variable">blockingQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;a&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;b&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-comment">//超出队列容量 阻塞ing</span><br><span class="hljs-comment">//blockingQueue.put(&quot;a&quot;);</span><br>System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br>System.out.println(blockingQueue.take());<br>System.out.println(blockingQueue.take());<br>System.out.println(blockingQueue.take());<br><span class="hljs-comment">//队列已空，继续出队，阻塞ing</span><br><span class="hljs-comment">//System.out.println(blockingQueue.take());</span><br>&#125;<br>/\*\*<br>\* 等待，阻塞（超时等待）<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">ArrayBlockingQueue</span> <span class="hljs-variable">blockingQueue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;a&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;b&quot;</span>));<br>System.out.println(blockingQueue.offer(<span class="hljs-string">&quot;c&quot;</span>));<br><span class="hljs-comment">//队列已满，若继续入队，则触发超时等待，2秒后结束程序</span><br><span class="hljs-comment">// blockingQueue.offer(&quot;d&quot;,2, TimeUnit.SECONDS);</span><br>System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br>System.out.println(blockingQueue.poll());<br><span class="hljs-comment">//队列已空，若继续出队，则触发超时等待，3秒后结束程序</span><br><span class="hljs-comment">//System.out.println(blockingQueue.poll(3,TimeUnit.SECONDS));</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这个很简单，和数据结构的队列大同小异。</p><blockquote><p>SynchronousQueue 同步队列</p></blockquote><p>每个插入操作必须等待另一个线程相应的删除操作，反之亦然。 同步队列没有任何内部容量，甚至没有一个容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 同步队列<br>\* 和其他的BlockingQueue不一样，SynchronousQueue不存储元素<br>\* put一个元素，必须从里面取出来，否则不能put<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">19</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronousQueueDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>BlockingQueue&lt;String&gt; blockingQueue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;&gt;();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;put 1&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;1&quot;</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;put 2&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;2&quot;</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;put 3&quot;</span>);<br>blockingQueue.put(<span class="hljs-string">&quot;3&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;T1&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + blockingQueue.take());<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + blockingQueue.take());<br>TimeUnit.SECONDS.sleep(<span class="hljs-number">3</span>);<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + blockingQueue.take());<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;T2&quot;</span>).start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JUC并发编程系列（一）</title>
    <link href="/2021/01/24/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/01/24/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%B3%BB%E5%88%97%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="JUC并发编程系列（一）"><a href="#JUC并发编程系列（一）" class="headerlink" title="JUC并发编程系列（一）"></a>JUC并发编程系列（一）</h1><p><strong>会写四篇多线程和JUC相关的知识，干活满满，手把手调试，保姆级待遇！</strong></p><h2 id="1-什么是JUC？"><a href="#1-什么是JUC？" class="headerlink" title="1.什么是JUC？"></a>1.什么是JUC？</h2><p>有着多线程的基础，就进一步学习Java关于并发操作封装的工具类，查看<strong>JDK1.8</strong>帮助文档可知：</p><p><a href="https://imgchr.com/i/sHsUQ1"><img src="https://s3.ax1x.com/2021/01/24/sHsUQ1.jpg"></a></p><h2 id="2-回顾多线程知识"><a href="#2-回顾多线程知识" class="headerlink" title="2.回顾多线程知识"></a>2.回顾多线程知识</h2><p><strong>创建线程的方法</strong></p><p><strong>1.继承Thread类，重写run()方法，调用start()</strong></p><p>通过继承Thread实现的线程类，多个线程间无法共享线程类的实例变量。（需要创建不同Thread对象，自然不共享）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\*创建线程的方法：<span class="hljs-number">1.</span>继承Thread类，重写run()方法，调用start()<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">23</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo01</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run方法 线程体</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在写博客-----&gt;&quot;</span>+i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//main 主线程</span><br><span class="hljs-comment">//创建一个线程对象，调用start(),开启线程</span><br><span class="hljs-type">Demo01</span> <span class="hljs-variable">demo01</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo01</span>();<br><span class="hljs-comment">//demo01.run(); //只有主线程一条执行路径</span><br>demo01.start(); <span class="hljs-comment">//多线程，主线程和子线程交替执行</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我在复习多线程---&gt;&quot;</span>+i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sHyJ78"><img src="https://s3.ax1x.com/2021/01/24/sHyJ78.jpg"></a></p><p><strong>2.实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start方法</strong></p><p>此Thread对象才是真正的线程对象。通过实现Runnable接口的线程类，是互相共享资源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 创建线程的方法<span class="hljs-number">2</span>：实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start方法<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">23</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo02</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我还是在写代码----&gt;&quot;</span>+i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//创建Runnable接口实现类的对象</span><br><span class="hljs-type">Demo02</span> <span class="hljs-variable">demo02</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Demo02</span>();<br><span class="hljs-comment">//创建线程对象，通过线程对象来开启我们的线程，----&gt;代理</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(demo02);<br>thread.start();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;我还是在写博客---&gt;&quot;</span>+i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3.创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。</strong></p><p>Callable与Runnable的功能大致相似，Callable中有一个call()函数，<strong>但是call()函数有返回值</strong>，而Runnable的run()函数不能将结果返回给客户程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 创建线程的方法<span class="hljs-number">3</span>：创建Callable接口的实现类，并实现call()方法，该call()方法将作为线程执行体，并且有返回值。<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableTets</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br><span class="hljs-comment">// new Thread().start(); //怎么启动Callable</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br><span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(thread);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask,String.valueOf(i)).start();<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----&gt;进来了&quot;</span>);<br>&#125;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> (Integer) futureTask.get(); <span class="hljs-comment">//get 可能会产生阻塞 放到最后</span><br><span class="hljs-comment">// 或者使用异步</span><br>System.out.println(o);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>System.out.println(<span class="hljs-string">&quot;call()&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">1024</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>创建线程的三种方式的对比：</strong></p><p><a href="https://imgchr.com/i/sHyInx"><img src="https://s3.ax1x.com/2021/01/24/sHyInx.jpg"></a></p><p>1、采用实现Runnable、Callable接口的方式创建多线程时，</p><p>优势是：</p><p>线程类只是实现了Runnable接口或Callable接口，还可以继承其他类。</p><p>在这种方式下，多个线程可以共享同一个target对象，所以非常适合多个相同线程来处理同一份资源的情况，从而可以将CPU、代码和数据分开，形成清晰的模型，较好地体现了面向对象的思想。</p><p>劣势是：</p><p>编程稍微复杂，如果要访问当前线程，则必须使用Thread.currentThread()方法。</p><p>2、使用继承Thread类的方式创建多线程时，</p><p>优势是：</p><p>编写简单，如果需要访问当前线程，则无需使用Thread.currentThread()方法，直接使用this即可获得当前线程。</p><p>劣势是：</p><p>线程类已经继承了Thread类，所以不能再继承其他父类。</p><p>3、Runnable和Callable的区别</p><p>(1) Callable规定（重写）的方法是call()，Runnable规定（重写）的方法是run()。</p><p>(2) Callable的任务执行后可返回值，而Runnable的任务是不能返回值的。</p><p>(3) call方法可以抛出异常，run方法不可以。</p><p>(4) 运行Callable任务可以拿到一个Future对象，表示异步计算的结果。它提供了检查计算是否完成的方法，以等待计算的完成，并检索计算的结果。通过Future对象可以了解任务执行情况，可取消任务的执行，还可获取执行结果。</p><h2 id="3-线程和进程"><a href="#3-线程和进程" class="headerlink" title="3.线程和进程"></a><strong>3.线程和进程</strong></h2><ul><li>**进程：**进程在操作系统中可以独立运行，作为资源分配的基本单位。表示运行中的程序。</li><li>**线程：**线程是进程中的一个实例，作为系统调度和分派的基本单位。是进程中的一段序列，能够完成进程中的一个功能。</li></ul><p><strong>进程和线程的区别：</strong></p><p>（1）同一个进程可以包含多个线程，一个进程中至少包含一个线程，一个线程只能存在于一个进程中。</p><p>（2）同一个进程下的所有线程能够共享该进程下的资源。（系统运行时会为每个进程分配不同的内存区域，但不会为线程分配内存。线程只能共享它所属进程的资源。）</p><p>（3）进程结束后，该进程下的所有线程将销毁，而一个线程的结束不会影响同一进程下的其他线程。</p><p>（4）线程是轻量级的进程，它的创建和销毁所需要的时间比进程小得多，所有操作系统的执行功能都是通过创建线程去完成的。</p><p>（5）线程在执行时是同步和互斥的，因为他们共享同一个进程下的资源。</p><p>（6）在操作系统中，进程是拥有系统资源的独立单元，它可以拥有自己的资源。一般而言，线程不能拥有自己的资源，但是它能够访问其隶属进程的资源。</p><p><strong>举个栗子：</strong></p><p>**进程：**一个程序，QQ，QQ游戏，lol等程序的集合</p><p>一个进程往往可以包含多个线程，至少包含一个！</p><p>Java默认有几个线程？2个 Main、GC</p><p>线程：QQ发信息，传文件</p><p>对于Java而言：Thread、Runnable、Callable</p><p>Java是不能操作线程的，底层调用C++</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>/\*\*<br>\* This method is not invoked <span class="hljs-keyword">for</span> the main method thread or <span class="hljs-string">&quot;system&quot;</span><br>\* group threads created/set up by the VM. Any <span class="hljs-keyword">new</span> <span class="hljs-title class_">functionality</span> added<br>\* to <span class="hljs-built_in">this</span> method in the future may have to also be added to the VM.<br>\*<br>\* A zero status value corresponds to state <span class="hljs-string">&quot;NEW&quot;</span>.<br>\*/<br><span class="hljs-keyword">if</span> (threadStatus != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>/\* Notify the group that <span class="hljs-built_in">this</span> thread is about to be started<br>\* so that it can be added to the group<span class="hljs-string">&#x27;s list of threads</span><br><span class="hljs-string">\* and the group&#x27;</span>s unstarted count can be decremented. \*/<br>group.add(<span class="hljs-built_in">this</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">started</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">try</span> &#123;<br>start0();<br>started = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (!started) &#123;<br>group.threadStartFailed(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Throwable ignore) &#123;<br>/\* <span class="hljs-keyword">do</span> nothing. If start0 threw a Throwable then<br>it will be passed up the call stack \*/<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><blockquote><p>并行和并发</p></blockquote><p>并发编程：并发、并行</p><p>并发（多个线程操作同一个资源）</p><p>老师让两个同学去办公室谈话。如果这两同学(进程)是并列跨过办公室门(CPU)的，那么就是并行。如果同学A先进同学B后进入(或者先B后A)，或者两人并列同时进入，但是在办公室外的路人甲(用户)看来，同学A和同学B同时都在办公室内，这是并发。</p><p><a href="https://imgchr.com/i/s7cN3d"><img src="https://s3.ax1x.com/2021/01/23/s7cN3d.jpg"></a></p><p>如果举例要精确一点，那么大概是这样的：进办公室有两个门(两CPU)，如果两同学分别从不同的门进入，不管先后性，两者互相独立，那么是并行；如果两同学不管以什么方式进入，在路人甲看来，他两同时都在办公室内，就是并发。</p><p><a href="https://imgchr.com/i/s7cUgA"><img src="https://s3.ax1x.com/2021/01/23/s7cUgA.jpg"></a></p><p><a href="https://www.cnblogs.com/f-ck-need-u/p/11161481.html">这篇博客讲的很清楚</a></p><p>并发编程的本质：<strong>充分利用CPU资源</strong></p><blockquote><p>线程的状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a thread which has not yet started.<br>\*/<br>NEW,<br><span class="hljs-comment">//看的出来，这是属于一个已经创建的线程，但是还没有调用start方法启动的线程所处的状态。</span><br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a runnable thread. A thread in the runnable<br>\* state is executing in the Java virtual machine but it may<br>\* be waiting <span class="hljs-keyword">for</span> other resources from the operating system<br>\* such as processor.<br>\*/<br>RUNNABLE,<br><span class="hljs-comment">//正如JDK中介绍，该状态包含两种可能。有可能正在运行，或者正在等待CPU资源。总体上就是当我们创建线程并且启动之后，就属于Runnable状态。</span><br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a thread blocked waiting <span class="hljs-keyword">for</span> a monitor lock.<br>\* A thread in the blocked state is waiting <span class="hljs-keyword">for</span> a monitor lock<br>\* to enter a <span class="hljs-keyword">synchronized</span> block/method or<br>\* reenter a <span class="hljs-keyword">synchronized</span> block/method after calling<br>\* &#123;<span class="hljs-meta">@link</span> Object#wait() Object.wait&#125;.<br>\*/<br>BLOCKED,<br><span class="hljs-comment">//阻塞状态，当线程准备进入synchronized同步块或同步方法的时候，需要申请一个监视器锁而进行的等待，会使线程进入BLOCKED状态。</span><br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a waiting thread.<br>\* A thread is in the waiting state due to calling one of the<br>\* following methods:<br>\* &lt;ul&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;<br>\* &lt;/ul&gt;<br>\*<br>\* &lt;p&gt;A thread in the waiting state is waiting <span class="hljs-keyword">for</span> another thread to<br>\* perform a particular action.<br>\*<br>\* For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;<br>\* on an object is waiting <span class="hljs-keyword">for</span> another thread to call<br>\* &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on<br>\* that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;<br>\* is waiting <span class="hljs-keyword">for</span> a specified thread to terminate.<br>\*/<br>WAITING,<br><span class="hljs-comment">//该状态的出现是因为调用了Object.wait（）或者Thread.join（）或者LockSupport.park（）。处于该状态下的线程在等待另一个线程 执行一些其余action来将其唤醒。</span><br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a waiting thread with a specified waiting time.<br>\* A thread is in the timed waiting state due to calling one of<br>\* the following methods with a specified positive waiting time:<br>\* &lt;ul&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> Object#wait(<span class="hljs-type">long</span>) Object.wait&#125; with timeout&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> #join(<span class="hljs-type">long</span>) Thread.join&#125; with timeout&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;<br>\* &lt;li&gt;&#123;<span class="hljs-meta">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;<br>\* &lt;/ul&gt;<br>\*/<br>TIMED\_WAITING,<br><span class="hljs-comment">//该状态和上一个状态其实是一样的，是不过其等待的时间是明确的。</span><br>/\*\*<br>\* Thread state <span class="hljs-keyword">for</span> a terminated thread.<br>\* The thread has completed execution.<br>\*/<br>TERMINATED;<br><span class="hljs-comment">// 消亡状态比较容易理解，那就是线程执行结束了，run方法执行结束表示线程处于消亡状态了。</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>多线程编程中常用的函数比较</strong></p></blockquote><p><strong>sleep 和 wait 的区别：</strong></p><ul><li>sleep方法：是Thread类的静态方法，当前线程将睡眠n毫秒，线程进入阻塞状态。当睡眠时间到了，会解除阻塞，进入可运行状态，等待CPU的到来。睡眠不释放锁（如果有的话）。</li><li>wait方法：是Object的方法，必须与synchronized关键字一起使用，线程进入阻塞状态，当notify或者notifyall被调用后，会解除阻塞。但是，只有<strong>重新占用互斥锁</strong>之后才会进入可运行状态。睡眠时，会释放互斥锁。</li><li>join方法：当前线程调用，则其它线程全部停止，等待当前线程执行完毕，接着执行。</li><li>yield方法：该方法使得线程放弃当前分得的 CPU 时间。但是不使线程阻塞，即线程仍处于可执行状态，随时可能再次分得 CPU 时间。</li></ul><p><strong>主要考察：</strong> sleep和wait方法所处的类是哪个，并且考察其在休眠的时候<strong>对于互斥锁</strong>的处理。</p><p>上面是牛客的面试题总结，下面自己分析两个方法的区别：</p><p><strong>1、来自不同的类</strong></p><p>wait &#x3D;&gt; Object</p><p>sleep &#x3D;&gt; Thread</p><p><strong>2、关于锁的释放：</strong></p><p>wait 会释放锁，sleep 睡觉了，抱着锁睡觉，不会释放！</p><p>3、使用的范围不同</p><p>wait必须在同步代码块中，在sync(){}中</p><h2 id="4-Lock锁"><a href="#4-Lock锁" class="headerlink" title="4.Lock锁"></a>4.Lock锁</h2><blockquote><p>传统Synchronized （后面为简化书写，统一写为sync）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 卖票<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">17</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//并发多个线程 操作同一个资源</span><br><span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><span class="hljs-comment">// @FunctionalInterface 函数式接口，jdk1.8 lambda表达式 (参数)-&gt;&#123; 代码 &#125;</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span> &#123;<br><span class="hljs-comment">//属性</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">tikcketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-comment">//加入同步锁</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleTicket</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span> (tikcketNums &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了&quot;</span> + (tikcketNums--) + <span class="hljs-string">&quot;还剩&quot;</span> + tikcketNums);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>两个地方需要注意：</p><ul><li><p>在售票的方法里加入sync同步方法，否则会出现线程不安全的问题；</p></li><li><p>创建线程使用的lambda表达式简化操作；</p></li><li><p>oop的思想，线程是一个单独的资源类（属性和方法），不会写在一起，降低耦合。</p><p>​</p></li></ul><blockquote><p>Lock接口</p></blockquote><p>JDK1.8文档对它的定义：</p><blockquote><p><strong>Interface Lock</strong></p><p>所有已知实现类：</p><p>ReentrantLock ReentrantReadWriteLock.WriteRead ReentrantReadWriteLock.WriteLock</p><p>public interface Lock</p><p><code>Lock</code>实现提供比使用<code>synchronized</code>方法和语句可以获得的更广泛的锁定操作。</p><p>它们允许更灵活的结构化，可能具有完全不同的属性，并且可以支持多个相关联的对象Condition 。</p><p>锁是用于通过多个线程控制对共享资源的访问的工具。 通常，锁提供对共享资源的独占访问：一次只能有一个线程可以获取锁，并且对共享资源的所有访问都要求首先获取锁。 但是，一些锁可能允许并发访问共享资源，如<strong>ReadWriteLock</strong>的读锁。</p><p>​ 使用<code>synchronized</code>方法或语句提供对与每个对象相关联的隐式监视器锁的访问，但是<strong>强制所有锁获取和释放以块结构的方式发生：当获取多个锁时，它们必须以相反的顺序被释放，并且所有的锁都必须被释放在与它们相同的词汇范围内</strong>。</p><p>​ 虽然<code>synchronized</code>方法和语句的范围机制使得使用监视器锁更容易编程，并且有<strong>助于避免涉及锁的许多常见编程错误，但是有时您需要以更灵活的方式处理锁</strong>。 例如，用于遍历并发访问的数据结构的一些算法需要使用“手动”或“链锁定”：您获取节点A的锁定，然后获取节点B，然后释放A并获取C，然后释放B并获得D等。 所述的实施方式中<code>Lock</code>接口通过允许获得并在不同的范围释放的锁，并允许获得并以任何顺序释放多个锁使得能够使用这样的技术。</p><p>​ 随着这种增加的灵活性，额外的责任。 没有块结构化锁定会删除使用<code>synchronized</code>方法和语句发生的锁的自动释放。 在大多数情况下，应使用以下<strong>惯用语</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">Lock l = ...; l.lock(); try &#123; // access the resource protected by this lock &#125; finally &#123; l.unlock(); &#125;<br></code></pre></td></tr></table></figure><p>当在不同范围内<strong>发生锁定和解锁时，必须注意确保在锁定时执行的所有代码由try-finally或try-catch保护，以确保在必要时释放锁定。</strong></p><p>​ <code>Lock</code>实现提供了使用<code>synchronized</code>方法和语句的附加功能，通过提供非阻塞尝试来获取锁 tryLock()，尝试获取可被中断的锁lockInterruptibly() ，以及尝试获取可以超时（tryLock(long, TimeUnit）。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">一个`Lock`类还可以提供与隐式监视锁定的行为和语义完全不同的行为和语义，例如保证排序，非重入使用或死锁检测。 如果一个实现提供了这样的专门的语义，那么实现必须记录这些语义。<br></code></pre></td></tr></table></figure><p>​ 请注意， <code>Lock</code>实例只是普通对象，它们本身可以用作<code>synchronized</code>语句中的目标。 获取<code>Lock</code>实例的监视器锁与调用该实例的任何lock()方法没有特定关系。 建议为避免混淆，您不要以这种方式使用<code>Lock</code>实例，除了在自己的实现中。</p><p>除非另有说明，传递任何参数的<code>null</code>值将导致NullPointerException被抛出。</p></blockquote><p>文档已经说的相当清楚了，sync在获取锁时是获取所有锁以及释放以块的形式释放，并且当多个锁需要被释放时，是以相反的顺序，且都要被sync的代码块{}包裹。</p><p>Lock相比sync更灵活，手动加锁和释放锁，并且可以提供更多操作等等，Lock锁的模板也已经给出，下面直接测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">17</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo02</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//并发多个线程 操作同一个资源</span><br><span class="hljs-type">Ticket2</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket2</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>ticket.saleTicket();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-comment">//lock三部曲</span><br><span class="hljs-comment">//1 new ReentrantLock();</span><br><span class="hljs-comment">//2 Lock.lock(); 加锁</span><br><span class="hljs-comment">//3 finally=&gt; lock.unlock(); 解锁</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket2</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">tikcketNums</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleTicket</span><span class="hljs-params">()</span> &#123;<br>lock.lock(); <span class="hljs-comment">//加锁</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (tikcketNums &gt; <span class="hljs-number">0</span>) &#123;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出了&quot;</span> + (tikcketNums--) + <span class="hljs-string">&quot;还剩&quot;</span> + tikcketNums);<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock(); <span class="hljs-comment">//解锁</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到创建Lock锁是先new了一个ReentrantLock() 可重入锁，翻阅源码有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Creates an instance of &#123;<span class="hljs-meta">@code</span> ReentrantLock&#125;.<br>\* This is equivalent to using &#123;<span class="hljs-meta">@code</span> ReentrantLock(<span class="hljs-literal">false</span>)&#125;.<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//可重入锁默认是非公平锁</span><br>sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br>/\*\*<br>\* Creates an instance of &#123;<span class="hljs-meta">@code</span> ReentrantLock&#125; with the<br>\* given fairness policy.<br>\*<br>\* <span class="hljs-meta">@param</span> fair &#123;<span class="hljs-meta">@code</span> <span class="hljs-literal">true</span>&#125; <span class="hljs-keyword">if</span> <span class="hljs-built_in">this</span> lock should use a fair ordering policy<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> &#123;<br>sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到new ReentrantLock() ，不传参数，走的无参构造，默认是NonfairSync() 非公平锁，若要指定为公平锁需要new ReentrantLock()的有参构造，传入true即可。</p><p><strong>问题来了，什么是公平锁和非公平锁？</strong></p><p>公平锁：十分公平，遵守先来后到</p><p>非公平锁：十分不公平，线程可以插队（默认）</p><p>可重入锁涉及的知识很多，后面再讲。</p><blockquote><p>sync 和 Lock区别</p></blockquote><p>1、Synchronized 内置的Java关键字， Lock 是一个Java类<br>2、Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁<br>3、Synchronized 会自动释放锁，lock 必须要手动释放锁！如果不释放锁，死锁<br>4、Synchronized 线程 1（获得锁，阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下<br>去；<br>5、Synchronized 可重入锁，不可以中断的，非公平；Lock ，可重入锁，可以 判断锁，非公平（可以<br>自己设置）；<br>6、Synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码！</p><h2 id="5-生产者和消费者问题"><a href="#5-生产者和消费者问题" class="headerlink" title="5.生产者和消费者问题"></a>5.生产者和消费者问题</h2><blockquote><p>生产者和消费者问题 sync版</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 线程之间的通信问题：生产者和消费者问题<br>\* 线程交替执行 A B 操作同一变量 num = <span class="hljs-number">0</span><br>\*A num+<span class="hljs-number">1</span><br>\*B num-<span class="hljs-number">1</span><br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//线程资源类</span><br><span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.increment();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.decrement();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.increment();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.decrement();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-comment">//等待，业务，通知</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//+1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//用if判断 会产生虚假唤醒</span><br><span class="hljs-keyword">if</span> (number != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-built_in">this</span>.wait();<br>&#125;<br>number++;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，+1完毕</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br><span class="hljs-comment">//-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">if</span> (number == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-built_in">this</span>.wait();<br>&#125;<br>number--;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，-1完毕</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的意思是定义了两个方法，一个负责num+1，一个负责num-1，由于加入sync，并且加了num是否为0的判断，所以按道理应该是线程进来，一个生成+1，一个消费-1，但运行结合出现：</p><p>D&#x3D;&gt;0<br>C&#x3D;&gt;1<br>A&#x3D;&gt;2<br>C&#x3D;&gt;3</p><p>很明显还是出现线程不安全的问题，查阅JDK帮助文档的wait方法，发现：</p><p><a href="https://imgchr.com/i/sHB4wF"><img src="https://s3.ax1x.com/2021/01/24/sHB4wF.jpg"></a></p><p>wait存在虚假唤醒，需要用把<strong>if改成while</strong>，实现类似自旋锁的功能，始终去判断！</p><p>故原来的代码可以改成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//等待，业务，通知</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//+1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-comment">//用if判断 会产生虚假唤醒</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-built_in">this</span>.wait();<br>&#125;<br>number++;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，+1完毕</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br><span class="hljs-comment">//-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-keyword">while</span> (number == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br><span class="hljs-built_in">this</span>.wait();<br>&#125;<br>number--;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，-1完毕</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试通过！</p><blockquote><p>图解生产者和消费者</p></blockquote><p><a href="https://imgchr.com/i/sHDZTg"><img src="https://s3.ax1x.com/2021/01/24/sHDZTg.jpg"></a></p><p>通过Lock找到Codition</p><p><a href="https://imgchr.com/i/sHDW9A"><img src="https://s3.ax1x.com/2021/01/24/sHDW9A.jpg"></a></p><p>可以发现，Lock版的生产者和消费者问题可以new 一个ReentrantLock实例，用它的实例去创建condition，然后再去实现线程之间的通信（生产者和消费者问题的本质）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* JUC的Lock替代Sync<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Data2</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data2</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.increment();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.decrement();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.increment();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>data.decrement();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;, <span class="hljs-string">&quot;D&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data2</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-comment">//+1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//业务代码</span><br><span class="hljs-comment">//用if判断 会产生虚假唤醒</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br>condition.await();<br>&#125;<br>number++;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，+1完毕</span><br>condition.signalAll();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><span class="hljs-comment">//-1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decrement</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//用if判断 会产生虚假唤醒</span><br><span class="hljs-keyword">while</span> (number == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-comment">//等待</span><br>condition.await();<br>&#125;<br>number--;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;=&gt;&quot;</span> + number);<br><span class="hljs-comment">//通知其他线程，-1完毕</span><br>condition.signalAll();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么到这，可能你会问？sync就可以实现生产者和消费者问题，为啥还要用Lock呢？代码明显增多了</p><blockquote><p>Condition 实现精准的通知和唤醒线程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* JUC的精准通知和唤醒线程<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">18</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Data3</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data3</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>data.printA();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;A&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>data.printB();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;B&quot;</span>).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>data.printC();<br>&#125;<br>&#125;, <span class="hljs-string">&quot;C&quot;</span>).start();<br>&#125;<br>&#125;<br><span class="hljs-comment">//资源类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data3</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition1</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition2</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition3</span> <span class="hljs-operator">=</span> lock.newCondition();<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printA</span><span class="hljs-params">()</span> &#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//业务</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">1</span>) &#123;<br>condition1.await();<br>&#125;<br>number = <span class="hljs-number">2</span>;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;BBBBB&quot;</span>);<br><span class="hljs-comment">//精准唤醒</span><br>condition2.signal();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printB</span><span class="hljs-params">()</span> &#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//业务</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">2</span>) &#123;<br>condition2.await();<br>&#125;<br>number = <span class="hljs-number">3</span>;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;CCCCCC&quot;</span>);<br><span class="hljs-comment">//精准唤醒</span><br>condition3.signal();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printC</span><span class="hljs-params">()</span> &#123;<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//业务</span><br><span class="hljs-keyword">while</span> (number != <span class="hljs-number">3</span>) &#123;<br>condition3.await();<br>&#125;<br>number = <span class="hljs-number">1</span>;<br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;AAAAAA&quot;</span>);<br><span class="hljs-comment">//精准唤醒</span><br>condition1.signal();<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>lock.unlock();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sHs9Mt"><img src="https://s3.ax1x.com/2021/01/24/sHs9Mt.jpg"></a></p>]]></content>
    
    
    
    <tags>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot集成JSR303</title>
    <link href="/2021/01/23/SpringBoot%E9%9B%86%E6%88%90JSR303/"/>
    <url>/2021/01/23/SpringBoot%E9%9B%86%E6%88%90JSR303/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成JSR303"><a href="#SpringBoot集成JSR303" class="headerlink" title="SpringBoot集成JSR303"></a>SpringBoot集成JSR303</h1><p>JSR-303 是 JAVA EE 6 中的一项子规范，叫做 <strong>Bean Validation</strong>，官方参考实现是<strong>Hibernate Validator</strong>。</p><p>此实现与 Hibernate ORM 没有任何关系。 JSR 303 用于对 Java Bean 中的字段的值进行验证。<br>Spring MVC 3.x 之中也大力支持 JSR-303，可以在控制器中对表单提交的数据方便地验证。</p><p>下面，我使用SpringBoot来详细讲解如何使用JSR303做数据校验</p><h2 id="1-maven依赖"><a href="#1-maven依赖" class="headerlink" title="1.maven依赖"></a>1.maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--JSR303--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里就不连数据库了，我们的目的只是验证数据是否能得到校验。</p><h2 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h2><p>使用JSR303主要就是用它提供的<strong>注解</strong>，下面是注解讲解：</p><p><strong>空检查</strong></p><ul><li>@Null 验证对象是否为null</li><li>@NotNull 验证对象是否不为null, 无法查检长度为0的字符串</li><li>@NotBlank 检查约束字符串是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格.</li><li>@NotEmpty 检查约束元素是否为NULL或者是EMPTY.</li></ul><p><strong>Booelan检查</strong></p><ul><li>@AssertTrue 验证 Boolean，对象是否为 true</li><li>@AssertFalse 验证 Boolean，对象是否为 false</li></ul><p><strong>长度检查</strong></p><ul><li>@Size(min&#x3D;, max&#x3D;) 验证对象（Array,Collection,Map,String）长度是否在给定的范围之内</li><li>@Length(min&#x3D;, max&#x3D;) 验证约束字符串是否包含在最小和最大之间。</li></ul><p><strong>日期检查</strong></p><ul><li>@Past 验证 Date和 Calendar，对象是否在当前时间之前，验证成立的话被注释的元素一定是一个过去的日期</li><li>@Future 验证 Date和 Calendar对象是否在当前时间之后，验证成立的话被注释的元素一定是一个将来的日期</li><li>@Pattern 验证 String对象是否符合正则表达式的规则，被注释的元素符合制定的正则表达式，regexp:正则表达式 flags: 指定 Pattern.Flag 的数组，表示正则表达式的相关选项。</li></ul><p><strong>数值检查</strong><br>建议使用在Stirng,Integer类型，不建议使用在 int 类型上，因为表单值为 空 时无法转换为int，</p><ul><li>@Min 验证 Number</li><li>和 String 对象是否大等于指定的值</li><li>@Max 验证 Number和 String 对象是否小等于指定的值</li><li>@DecimalMax 被标注的值必须不大于约束中指定的最大值.这个约束的参数是一个通过BigDecimal定义的最大值的字符串表示. 小数存在精度（ Double,float, BigDecimal ）</li><li>@DecimalMin 被标注的值必须不小于约束中指定的最小值.这个约束的参数是一个通过BigDecimal定义的最小值的字符串表示. 小数存在精度</li><li>@Digits 验证 Number和 String 的构成是否合法</li><li>@Digits(integer&#x3D;,fraction&#x3D;) 验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。</li><li>@Range(min&#x3D;, max&#x3D;) 被指定的元素必须在合适的范围内</li><li>@Range(min&#x3D;10000,max&#x3D;50000,message&#x3D;”range.bean.wage”)</li><li>@Valid 递归的对关联对象进行校验,如果关联对象是个集合或者数组,那么对其中的元素进行递归校验,如果是一个map,则对其中的值部分进行校验.(是否进行递归验证)</li><li>@CreditCardNumber 信用卡验证</li><li>@Email 验证是否是邮件地址，如果为null,不进行验证，算通过验证。</li><li>@ScriptAssert(lang&#x3D; ,script&#x3D;, alias&#x3D;)</li><li>@URL(protocol&#x3D;,host&#x3D;, port&#x3D;,regexp&#x3D;, flags&#x3D;)</li></ul><h2 id="3-表单校验"><a href="#3-表单校验" class="headerlink" title="3.表单校验"></a>3.表单校验</h2><p><strong>User.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 用户实体类<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">23</span><br>\*/<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> Integer uid; <span class="hljs-comment">//主键</span><br><span class="hljs-meta">@NotEmpty(message = &quot;姓名不能为空&quot;)</span><br><span class="hljs-meta">@Length(min = 1,max = 10,message = &quot;长度必须在1-10之间&quot;)</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br><span class="hljs-meta">@NotBlank</span><br><span class="hljs-meta">@Pattern(regexp = &quot;^134[0-8]\\d&#123;7&#125;$|^13[^4]\\d&#123;8&#125;$|^14[5-9]\\d&#123;8&#125;$|^15[^4]\\d&#123;8&#125;$|^16[6]\\d&#123;8&#125;$|^17[0-8]\\d&#123;8&#125;$|^18[\\d]&#123;9&#125;$|^19[8,9]\\d&#123;8&#125;$&quot;, message = &quot;电话号码格式不正确&quot;)</span><br><span class="hljs-keyword">private</span> String tel; <span class="hljs-comment">//电话</span><br><span class="hljs-meta">@Email(message = &quot;邮件格式不正确&quot;)</span><br><span class="hljs-meta">@NotEmpty</span><br><span class="hljs-keyword">private</span> String mail; <span class="hljs-comment">//邮箱</span><br><span class="hljs-meta">@NotBlank</span><br><span class="hljs-meta">@Pattern(regexp = &quot;[1-9][0-9]&#123;4,14&#125;&quot;, message = &quot;qq格式不正确&quot;)</span><br><span class="hljs-keyword">private</span> String qq; <span class="hljs-comment">//qq</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在属性是加上合适的注解，即可实现校验，对于电话，qq等等可以用正则表达式进行校验。</p><p><strong>UserController.Java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 用户注册<br>\* <span class="hljs-meta">@param</span> user<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/user&quot;)</span><br><span class="hljs-comment">//@Valid 加入参数校验</span><br><span class="hljs-comment">// @Validated 两者基本使用无区别</span><br>/\*\*<br>\* <span class="hljs-meta">@Valid</span>----<br>\* <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Valid &#123;<br>\* &#125;<br>\*<br>\* <span class="hljs-meta">@Validated</span>-----<br>\* <span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Validated &#123;<br>\* Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br>\* &#125;<br>\*<br>\*/<br><span class="hljs-keyword">public</span> BaseResponse&lt;Integer&gt; <span class="hljs-title function_">insUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Valid</span> User user)</span>&#123;<br>log.info(<span class="hljs-string">&quot;表单传值====&gt;&quot;</span>+user);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> userService.registerUser(user);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;注册成功&quot;</span>,integer);<br>&#125;<br></code></pre></td></tr></table></figure><p>在校验@RequestBody注解的数据时,可以使用@Validated和@Valid，两者有区别吗？</p><h3 id="3-1-所属包不同"><a href="#3-1-所属包不同" class="headerlink" title="3.1 所属包不同"></a>3.1 所属包不同</h3><p>可以看到@Validated属于<code>spring</code>，而@Valid属于<code>javax</code>。</p><ul><li>@Validated ：<code>org.springframework.validation.annotation.Validated</code></li><li>@Valid：<code>javax.validation.Valid</code></li></ul><h3 id="3-2-源码区别"><a href="#3-2-源码区别" class="headerlink" title="3.2 源码区别"></a>3.2 源码区别</h3><p>@Valid</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE\_USE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Valid &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Validated</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD, ElementType.PARAMETER&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Validated &#123;<br>Class&lt;?&gt;[] value() <span class="hljs-keyword">default</span> &#123;&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过源码可以看到@Validated可以<code>在类上面使用</code>，并且多了一个<code>value属性</code>。</p><p>@Validated提供了一个<code>分组功能</code>，在校验参数时，可以根据<code>不同的分组</code>采用<code>不同的校验机制</code>。没有添加分组属性时，默认验证没有分组的验证属性。</p><p>这里我们之间启动项目，利用Postman测试：</p><p><a href="https://imgchr.com/i/sTc0L6"><img src="https://s3.ax1x.com/2021/01/23/sTc0L6.jpg"></a></p><p><strong>提交不符合格式的数据，校验不通过，返回400请求失败</strong></p><p><a href="https://imgchr.com/i/sTcwsx"><img src="https://s3.ax1x.com/2021/01/23/sTcwsx.png"></a></p><p>可以看到SpringMVC的通过注解实现了校验@RequestBody中的数据，测试通过！</p><h2 id="4-分组校验"><a href="#4-分组校验" class="headerlink" title="4.分组校验"></a>4.分组校验</h2><p>上面的表单提交，有一个问题就是不能分情况去提交数据，比如用户在修在电话号码的时候，需要在请求中传入用户名，邮箱等等信息，否则也会返回400，数据冗余，所以就当产生这种需求时，我们就可以使用@Validated的分组校验功能。</p><p><strong>编写分组校验接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 分组校验<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">23</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatedGroup</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Add</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Delete</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Update</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span> &#123;&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Query</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Default</span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改造下之前的User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">23</span><br>\*/<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUser</span> &#123;<br><span class="hljs-keyword">private</span> Integer uid; <span class="hljs-comment">//主键</span><br><span class="hljs-meta">@NotEmpty(groups = &#123;ValidatedGroup.Add.class&#125;,message = &quot;更新不能为空&quot;)</span><br><span class="hljs-meta">@Length(min = 1,max = 10,message = &quot;长度必须在1-10之间&quot;)</span><br><span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br><span class="hljs-meta">@NotBlank(groups = &#123;ValidatedGroup.Add.class&#125;,message = &quot;更新电话号码不能为空&quot;)</span><br><span class="hljs-meta">@Pattern(regexp = &quot;^134[0-8]\\d&#123;7&#125;$|^13[^4]\\d&#123;8&#125;$|^14[5-9]\\d&#123;8&#125;$|^15[^4]\\d&#123;8&#125;$|^16[6]\\d&#123;8&#125;$|^17[0-8]\\d&#123;8&#125;$|^18[\\d]&#123;9&#125;$|^19[8,9]\\d&#123;8&#125;$&quot;, message = &quot;电话号码格式不正确&quot;)</span><br><span class="hljs-keyword">private</span> String tel; <span class="hljs-comment">//电话</span><br><span class="hljs-meta">@Email(message = &quot;邮件格式不正确&quot;)</span><br><span class="hljs-meta">@NotBlank(groups = &#123;ValidatedGroup.Add.class&#125; , message = &quot;更新邮箱不能为空&quot;)</span><br><span class="hljs-keyword">private</span> String mail; <span class="hljs-comment">//邮箱</span><br><span class="hljs-meta">@NotBlank(groups = &#123;ValidatedGroup.Update.class,ValidatedGroup.Add.class&#125;,message = &quot;更新和新增的qq不能为空&quot;)</span><br><span class="hljs-meta">@Pattern(regexp = &quot;[1-9][0-9]&#123;4,14&#125;&quot;, message = &quot;qq格式不正确&quot;)</span><br><span class="hljs-keyword">private</span> String qq; <span class="hljs-comment">//qq</span><br>&#125;<br></code></pre></td></tr></table></figure><p>通过上面分析@Validated和@Valid注解的源码，我们知道@Validated还提供了分组校验，具体实现思路：</p><p>在实体类中的注解中说明需要校验的条件，如：</p><p>@NotBlank(groups &#x3D; {ValidatedGroup.Add.class},message &#x3D; “更新电话号码不能为空”)</p><p>此注解标明只有在新增的时候，才会校验电话号码，在controller中写明校验的条件即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 修改信息<br>\* <span class="hljs-meta">@param</span> testUser<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/updateUser&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Integer&gt; <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> <span class="hljs-meta">@Validated(value = ValidatedGroup.Update.class)</span> TestUser testUser)</span>&#123;<br>log.info(<span class="hljs-string">&quot;表单传值====&gt;&quot;</span>+testUser);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> userService.updateUser(testUser);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;修改成功&quot;</span>,integer);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用updateUser()方法时，由于在@Validated中加入了分组校验，只有在实体类中加入了Update分组的方法才会被进行参数校验，<strong>减少数据冗杂</strong>。</p><p><a href="https://imgchr.com/i/sTg2AU"><img src="https://s3.ax1x.com/2021/01/23/sTg2AU.jpg"></a></p><p>可以看到，只有校验qq格式的注解生效</p><p><a href="https://imgchr.com/i/sT2put"><img src="https://s3.ax1x.com/2021/01/23/sT2put.png"></a></p><p>测试通过！</p><h2 id="5-GitHub源码"><a href="#5-GitHub源码" class="headerlink" title="5.GitHub源码"></a>5.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-jsr303">springboot-jsr303</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之集成Redis</title>
    <link href="/2021/01/21/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90Redis/"/>
    <url>/2021/01/21/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90Redis/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot之集成Redis"><a href="#SpringBoot之集成Redis" class="headerlink" title="SpringBoot之集成Redis"></a>SpringBoot之集成Redis</h1><p><a href="https://imgchr.com/i/s4Bp5V"><img src="https://s3.ax1x.com/2021/01/21/s4Bp5V.png"></a></p><p><a href="https://redis.io/">Redis官网</a>对Redis的介绍：</p><blockquote><p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache, and message broker. Redis provides data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes, and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions, and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p></blockquote><p>简单的翻译下：Redis是一款基于内存的键值对数据库，用作数据库，缓存和消息代理。Redis提供数据结构，例如字符串，哈希，列表，集合，带范围查询的排序集合，位图，超日志，地理空间索引和流。总之很强大就是了。</p><h2 id="1-Redis介绍"><a href="#1-Redis介绍" class="headerlink" title="1.Redis介绍"></a>1.Redis介绍</h2><p>Redis是现在最受欢迎的NoSQL数据库之一，Redis是一个使用ANSI C编写的开源、包含多种数据结构、支持网络、基于内存、可选持久性的键值对存储数据库，其具备如下特性：</p><ul><li>基于内存运行，性能高效</li><li>支持分布式，理论上可以无限扩展</li><li>key-value存储系统</li><li>开源的使用ANSI C语言编写、遵守BSD协议、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库，并提供多种语言的API</li></ul><p>相比于其他数据库类型，Redis具备的特点是：</p><ul><li>C&#x2F;S通讯模型</li><li>单进程单线程模型</li><li>丰富的数据类型</li><li>操作具有原子性</li><li>持久化</li><li>高并发读写</li><li>支持lua脚本</li></ul><p>哪些大厂在使用Redis？</p><ul><li>github</li><li>twitter</li><li>Stack Overflow</li><li>阿里巴巴</li><li>美团</li></ul><p><strong>Redis的应用场景有哪些？</strong></p><p>Redis 的应用场景包括：缓存系统（“热点”数据：高频读、低频写）、计数器、消息队列系统、排行榜、社交网络和实时系统。</p><p>比如常见的电商场景，根据商品 ID 获取商品信息时，店铺信息和商品详情信息就可以缓存在 Redis，直接从 Redis 获取。 减少了去数据库查询的次数。但会出现新的问题，就是如何对缓存进行更新？这就是下面要讲的。</p><p><strong>Redis的数据类型及主要特性？</strong></p><p>Redis提供的数据类型主要分为5种自有类型和一种自定义类型，这5种自有类型包括：String类型、哈希类型、列表类型、集合类型和顺序集合类型。</p><h2 id="2-Redis更新策略"><a href="#2-Redis更新策略" class="headerlink" title="2.Redis更新策略"></a>2.Redis更新策略</h2><p>参考<a href="http://coolshell.cn/articles/17416.html">《缓存更新的套路》</a> ，缓存更新的模式有四种：</p><ol><li>Cache aside</li><li>Read through</li><li>Write through</li><li>Write behind caching</li></ol><p>这里我们使用的是 Cache Aside 策略，从三个维度：</p><ul><li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li>命中：应用程序从cache中取数据，取到后返回。</li><li>更新：先把数据存到数据库中，成功后，再让缓存失效。</li></ul><p>大致流程如下：</p><p>获取商品详情举例</p><ol><li>从商品 Cache 中获取商品详情，如果存在，则返回获取 Cache 数据返回。</li><li>如果不存在，则从商品 DB 中获取。获取成功后，将数据存到 Cache 中。则下次获取商品详情，就可以从 Cache 就可以得到商品详情数据。</li><li>从商品 DB 中更新或者删除商品详情成功后，则从缓存中删除对应商品的详情缓存</li></ol><p><a href="https://imgchr.com/i/s4DxhV"><img src="https://s3.ax1x.com/2021/01/21/s4DxhV.png"></a></p><h2 id="3-添加maven依赖"><a href="#3-添加maven依赖" class="headerlink" title="3.添加maven依赖"></a>3.添加maven依赖</h2><p>我们以Mybatis做数据访问层操作，Redis做缓存操作</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.4.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Java 工具类库：Hutool--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.57<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-配置application-properties"><a href="#4-配置application-properties" class="headerlink" title="4.配置application.properties"></a>4.配置application.properties</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8009</span><br><span class="hljs-comment">#pool</span><br><span class="hljs-attr">spring.datasorce.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driverClassName</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.dev.entity</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis-plus?useUnicode=true&amp;characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment">#关闭驼峰命名</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">logging.level.com.dev.mapper</span>=<span class="hljs-string">debug</span><br><span class="hljs-comment"># Redis数据库索引（默认为0）</span><br><span class="hljs-attr">spring.redis.database</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># Redis服务器地址</span><br><span class="hljs-attr">spring.redis.host</span>=<span class="hljs-string">127.0.0.1</span><br><span class="hljs-comment"># Redis服务器连接端口</span><br><span class="hljs-attr">spring.redis.port</span>=<span class="hljs-string">6379</span><br><span class="hljs-comment"># Redis服务器连接密码（默认为空）</span><br><span class="hljs-attr">spring.redis.password</span>=<span class="hljs-string"></span><br><span class="hljs-comment"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="hljs-attr">spring.redis.jedis.pool.max-active</span>=<span class="hljs-string">20</span><br><span class="hljs-comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="hljs-attr">spring.redis.jedis.pool.max-wait</span>=<span class="hljs-string">-1</span><br><span class="hljs-comment"># 连接池中的最大空闲连接</span><br><span class="hljs-attr">spring.redis.jedis.pool.max-idle</span>=<span class="hljs-string">10</span><br><span class="hljs-comment"># 连接池中的最小空闲连接</span><br><span class="hljs-attr">spring.redis.jedis.pool.min-idle</span>=<span class="hljs-string">0</span><br><span class="hljs-comment"># 连接超时时间（毫秒）</span><br><span class="hljs-attr">spring.redis.timeout</span>=<span class="hljs-string">1000</span><br></code></pre></td></tr></table></figure><h2 id="5-添加Redis序列化配置类"><a href="#5-添加Redis序列化配置类" class="headerlink" title="5.添加Redis序列化配置类"></a>5.添加Redis序列化配置类</h2><p>RedisTemplate 默认使用JDK的序列化机制, 存储二进制字节码, 所以自定义序列化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">5</span><br>\*/<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br><span class="hljs-comment">//读取默认的application.properties文件的redis的配置参数</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br><span class="hljs-comment">//设置序列化</span><br><span class="hljs-comment">//使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值（默认使用JDK的序列化方式）</span><br><span class="hljs-type">Jackson2JsonRedisSerializer</span> <span class="hljs-variable">jackson2JsonRedisSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonRedisSerializer</span>(Object.class);<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">om</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-comment">//指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public</span><br>om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON\_FINAL);<br>jackson2JsonRedisSerializer.setObjectMapper(om);<br><span class="hljs-comment">//配置redisTemplate</span><br>RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br><span class="hljs-comment">// 配置连接工厂</span><br>redisTemplate.setConnectionFactory(redisConnectionFactory);<br><span class="hljs-type">RedisSerializer</span> <span class="hljs-variable">stringSerializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringRedisSerializer</span>();<br>redisTemplate.setKeySerializer(stringSerializer);<span class="hljs-comment">//key序列化</span><br>redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<span class="hljs-comment">//value序列化</span><br>redisTemplate.setHashKeySerializer(stringSerializer);<span class="hljs-comment">//Hash key序列化</span><br>redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);<span class="hljs-comment">//Hash value序列化</span><br>redisTemplate.afterPropertiesSet();<br><span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CacheManager <span class="hljs-title function_">cacheManager</span><span class="hljs-params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;<br>RedisCacheManager.<span class="hljs-type">RedisCacheManagerBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> RedisCacheManager<br>.RedisCacheManagerBuilder<br>.fromConnectionFactory(redisConnectionFactory);<br><span class="hljs-keyword">return</span> builder.build();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-使用演示"><a href="#6-使用演示" class="headerlink" title="6.使用演示"></a>6.使用演示</h2><p>基于缓存更新策略，我们从三个维度测试Redis的失效，命中和更新</p><p>service.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Service<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">5</span><br>\*/<br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userDao;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br><span class="hljs-comment">//查所有用户</span><br><span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">queryAll</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> userDao.queryAll();<br>&#125;<br>/\*\*<br>\* 获取用户策略:先从缓存中获取用户，没有则读mysql数据，再将数据写入缓存<br>\*/<br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user\_&quot;</span>+id;<br>ValueOperations&lt;String,User&gt; operations = redisTemplate.opsForValue();<br><span class="hljs-comment">//判断redis中是否有键为key的缓存</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br><span class="hljs-keyword">if</span>(hasKey)&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> operations.get(key);<br>System.out.println(<span class="hljs-string">&quot;从缓存中获取数据:&quot;</span>+user.getUserName());<br>System.out.println(<span class="hljs-string">&quot;-----------------------------&quot;</span>);<br><span class="hljs-keyword">return</span> user;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDao.findUserById(id);<br><span class="hljs-keyword">if</span> (user != <span class="hljs-literal">null</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;查询数据库获取数据:&quot;</span>+user.getUserName());<br>System.out.println(<span class="hljs-string">&quot;------------写入缓存---------------------&quot;</span>);<br><span class="hljs-comment">//写入缓存</span><br>operations.set(key,user,<span class="hljs-number">5</span>, TimeUnit.HOURS);<br><span class="hljs-keyword">return</span> user;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//删除用户策略:删除数据表中数据，然后删除缓存</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteUserById</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDao.deleteUserById(id);<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user\_&quot;</span>+id;<br><span class="hljs-keyword">if</span>(result!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">hasKey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br><span class="hljs-keyword">if</span>(hasKey)&#123;<br>redisTemplate.delete(key);<br>System.out.println(<span class="hljs-string">&quot;删除了缓存中的key:&quot;</span>+key);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>/\*\*<br>\* 更新用户策略：先更新数据表，成功之后，删除原来的缓存，再更新缓存<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(User user)</span> &#123;<br>ValueOperations&lt;String, User&gt; operations = redisTemplate.opsForValue();<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userDao.updateUser(user);<br><span class="hljs-keyword">if</span> (result != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;user\_&quot;</span> + user.getId();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">haskey</span> <span class="hljs-operator">=</span> redisTemplate.hasKey(key);<br><span class="hljs-keyword">if</span> (haskey) &#123;<br>redisTemplate.delete(key);<br>System.out.println(<span class="hljs-string">&quot;删除缓存中的key-----------&gt; &quot;</span> + key);<br>&#125;<br><span class="hljs-comment">// 再将更新后的数据加入缓存</span><br><span class="hljs-type">User</span> <span class="hljs-variable">userNew</span> <span class="hljs-operator">=</span> userDao.findUserById(user.getId());<br><span class="hljs-keyword">if</span> (userNew != <span class="hljs-literal">null</span>) &#123;<br>operations.set(key, userNew, <span class="hljs-number">3</span>, TimeUnit.HOURS);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>一般我用封装的RedisTemplate类去操作缓存，其中设置缓存，更新缓存，删除缓存的操作在上面代码中有详细注释，这里就不过多参数。</p><p><a href="https://imgchr.com/i/s4soLQ"><img src="https://s3.ax1x.com/2021/01/21/s4soLQ.jpg"></a></p><p>利用Postman测试接口，在控制台即可看到缓存生效，测试成功！</p><h2 id="7-GitHub源码"><a href="#7-GitHub源码" class="headerlink" title="7.GitHub源码"></a>7.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-redis">springboot-redis</a></p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>Redis的用途远不及做缓存，还可以实现分布式锁、简单的mq和搭建高性能集群等等，这里只是简单的讲SpringBoot如何集成Redis，使得缓存生效！后面我还会详细讲Redis的应用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之集成Swagger2</title>
    <link href="/2021/01/21/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90Swagger2/"/>
    <url>/2021/01/21/SpringBoot%E4%B9%8B%E9%9B%86%E6%88%90Swagger2/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringBoot之集成Swagger2"><a href="#SpringBoot之集成Swagger2" class="headerlink" title="SpringBoot之集成Swagger2"></a>SpringBoot之集成Swagger2</h2><p>Swagger是一个简单但功能强大的API表达工具。它具有地球上最大的API工具生态系统，数以千计的开发人员， 使用几乎所有的现代编程语言，都在支持和使用Swagger。使用Swagger生成API，我们可以得到交互式文档， 自动生成代码的SDK以及API的发现特性等。</p><p>Swagger2可以利用注解快速、自动地生成接口文档页面，在前后端分离开发中起着重要作用，方便接口测试和调用！</p><p>效果图如下：</p><p>访问URL：</p><p><a href="http://127.0.0.1:8010/swagger-ui.htm">http://127.0.0.1:8010/swagger-ui.htm</a></p><p><a href="https://imgchr.com/i/shy45q"><img src="https://s3.ax1x.com/2021/01/21/shy45q.md.jpg"></a></p><p><a href="https://imgchr.com/i/sh6MQS"><img src="https://s3.ax1x.com/2021/01/21/sh6MQS.jpg"></a></p><p>可以看到API根据后端Controller分类，每个API都带有注释，详细注释了参数和响应体的内容，后端设计基于RESTful风格的API（之前已经讲到），开发效率是杠杠的。</p><h2 id="1-构建RESTful-API"><a href="#1-构建RESTful-API" class="headerlink" title="1.构建RESTful API"></a>1.构建RESTful API</h2><p>在使用Swagger2前我们需要有一个RESTful API的项目，SpringBoot创建RESTful API项目非常的方便和快速。</p><p>SpringBoot构建RESTful API极为简单，实际就是Spring MVC。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* &lt;p&gt;<br>\* 前端控制器<br>\* &lt;/p&gt;<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">21</span><br>\*/<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/goods&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GoodsController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> GoodsService goodsService;<br><span class="hljs-meta">@ApiOperation(&quot;列表显示&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;List&lt;Goods&gt;&gt; <span class="hljs-title function_">showGoodsList</span><span class="hljs-params">()</span>&#123;<br>List&lt;Goods&gt; list = goodsService.list(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;查询成功&quot;</span>,list);<br>&#125;<br><span class="hljs-meta">@ApiOperation(&quot;查询商品&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Goods&gt; <span class="hljs-title function_">selGood</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br><span class="hljs-type">Goods</span> <span class="hljs-variable">goods</span> <span class="hljs-operator">=</span> goodsService.getById(id);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;查询成功&quot;</span>,goods);<br>&#125;<br><span class="hljs-meta">@ApiOperation(&quot;新增商品&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Integer&gt; <span class="hljs-title function_">insGood</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Goods goods)</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">save</span> <span class="hljs-operator">=</span> goodsService.save(goods);<br><span class="hljs-keyword">if</span>(save == <span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;添加成功&quot;</span>,<span class="hljs-number">200</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;添加失败&quot;</span>,<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br><span class="hljs-meta">@ApiOperation(&quot;修改商品信息&quot;)</span><br><span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Integer&gt; <span class="hljs-title function_">updGood</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> Goods goods)</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> goodsService.updateById(goods);<br><span class="hljs-keyword">if</span>(update == <span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;修改成功&quot;</span>,<span class="hljs-number">200</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;修改失败&quot;</span>,<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br><span class="hljs-meta">@ApiOperation(&quot;删除商品&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Integer&gt; <span class="hljs-title function_">delGood</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer id)</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">delete</span> <span class="hljs-operator">=</span> goodsService.removeById(id);<br><span class="hljs-keyword">if</span>(delete == <span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>,<span class="hljs-string">&quot;修改成功&quot;</span>,<span class="hljs-number">200</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">false</span>,<span class="hljs-string">&quot;修改失败&quot;</span>,<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，详细讲下Swgger2环境的搭建和常用注解功能</p><h2 id="2-项目依赖"><a href="#2-项目依赖" class="headerlink" title="2.项目依赖"></a>2.项目依赖</h2><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--swagger--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.swagger<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.swagger<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-models<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--MySQL JDBC驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--Druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.velocity<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>velocity-engine-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>这里分享个自己踩过的坑:</strong></p><p>查阅官网，可以看到Swagger2依赖并没有这么多，但我在一次使用RESTful 开发API，利用Swagger生成接口文档时，发生报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java.lang.NumberFormatException: For input string: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>只要浏览器中一访问Swagger接口文档，就会发生这个报错，可以看到就是空字符串无法自动转换成数字类型造成的，原因很简单，请求Swagger的页面就发送了空的字符串参数，但{id}需要int，故发生报错。</p><p>分析和解决：</p><p><code>io.springfox:springfox-swagger2:2.9.2</code>中依赖了<code>swagger-models</code>的<strong>1.5.20</strong>版本，我们可以排除<code>springfox-swagger2</code>中的<code>swagger-models</code>依赖，导入<code>io.swagger:swagger-models</code>的<strong>1.5.21</strong>版本即可。</p><p><a href="https://imgchr.com/i/shWG8I"><img src="https://s3.ax1x.com/2021/01/21/shWG8I.md.jpg"></a></p><p>故映入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.swagger<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>swagger-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其次，引入MybatiesPlus简化操作，创建和配置好数据库，启动DevGenerator.java，自动生成后端基础环境。</p><h2 id="3-编写Swagger配置类"><a href="#3-编写Swagger配置类" class="headerlink" title="3.编写Swagger配置类"></a>3.编写Swagger配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br>/\*\*<br>\* Swagger配置<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">5</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;<br>/\*\*<br>\* 是否启用swagger文档<br>\*/<br><span class="hljs-meta">@Value(&quot;$&#123;swagger.enable&#125;&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enable;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">docket</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER\_2)<br>.enable(enable)<br>.apiInfo(apiInfo())<br>.select()<br>.apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))<br>.build();<br>&#125;<br><span class="hljs-comment">//配置swagger 信息 = apiInfo</span><br><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//作者信息</span><br><span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>(<span class="hljs-string">&quot;接口文档&quot;</span>, <span class="hljs-string">&quot;https://github.com/luffy997&quot;</span>, <span class="hljs-string">&quot;389783961@qq.com&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfo</span>(<span class="hljs-string">&quot;接口文档&quot;</span>,<br><span class="hljs-string">&quot;接口文档&quot;</span>,<br><span class="hljs-string">&quot;v1.0&quot;</span>,<br><span class="hljs-string">&quot;www.baidu.com&quot;</span>, contact,<br><span class="hljs-string">&quot;Appache2.0&quot;</span>,<br><span class="hljs-string">&quot;http://www.appache.org/licenses/LICENSE-2.0&quot;</span>,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Swagger2提供了一些注解来丰富接口的信息,常用的有:</p><p><strong>说明：</strong></p><ul><li>@Api：用在类上，说明该类的作用</li><li>@ApiOperation：用在方法上，说明方法的作用</li><li>@ApiImplicitParams：用在方法上包含一组参数说明</li><li>@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面<ul><li>paramType：参数放在哪个地方<ul><li>header–&gt;请求参数的获取：@RequestHeader</li><li>query–&gt;请求参数的获取：@RequestParam</li><li>path（用于restful接口）–&gt;请求参数的获取：@PathVariable</li><li>body（不常用）</li><li>form（不常用）</li></ul></li><li>name：参数名</li><li>dataType：参数类型</li><li>required：参数是否必须传</li><li>value：参数的意思</li><li>defaultValue：参数的默认值</li></ul></li><li>@ApiResponses：用于表示一组响应</li><li>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<ul><li>code：数字，例如400</li><li>message：信息，例如”请求参数没填好”</li><li>response：抛出异常的类</li></ul></li><li>@ApiModel：描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候）</li><li>@ApiModelProperty：描述一个model的属性</li></ul><p>以上这些就是最常用的几个注解了。</p><p>具体其他的注解，查看：</p><p><a href="https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodel">https://github.com/swagger-api/swagger-core/wiki/Annotations#apimodel</a></p><p>更多请参考<a href="http://docs.swagger.io/swagger-core/apidocs/com/wordnik/swagger/annotations/package-summary.html">Swagger注解文档</a></p><h2 id="4-参考文档"><a href="#4-参考文档" class="headerlink" title="4.参考文档"></a>4.参考文档</h2><ul><li><p><a href="https://www.xncoding.com/2017/07/08/spring/sb-swagger2.html">SpringBoot系列 - 集成Swagger2</a></p></li><li><p><a href="https://github.com/Yuicon/blog/issues/1">Spring Boot中使用Swagger2构建API文档</a></p><p>​</p></li></ul><h2 id="5-GitHub源码"><a href="#5-GitHub源码" class="headerlink" title="5.GitHub源码"></a>5.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-swagger">springboot-swagger</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之实现RESTful接口</title>
    <link href="/2021/01/20/SpringBoot%E4%B9%8B%E5%AE%9E%E7%8E%B0RESTful%E6%8E%A5%E5%8F%A3/"/>
    <url>/2021/01/20/SpringBoot%E4%B9%8B%E5%AE%9E%E7%8E%B0RESTful%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot之实现RESTful接口"><a href="#SpringBoot之实现RESTful接口" class="headerlink" title="SpringBoot之实现RESTful接口"></a>SpringBoot之实现RESTful接口</h1><p>REST，即Representational State Transfer的缩写，对这个词组的翻译是<code>表现层状态转化</code>。</p><p>RESTful是一种软件设计风格，就是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p><p>SpringMVC对RESTful风格的接口有着天然的支持，本篇将讲述如何在SpringBoot中怎样写。</p><h2 id="1-重要注解"><a href="#1-重要注解" class="headerlink" title="1.重要注解"></a>1.重要注解</h2><p>在讲述使用之前，想要理解SpringMVC的几个常用注解：</p><ol><li>@Controller：修饰class，用来创建处理http请求的对象</li><li>@RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。</li><li>@RequestMapping：配置url映射</li><li>@PostMapping: 这个是@RequestMapping+POST方法的简写</li><li>@RequestHeader: 请求Header参数</li><li>@PathVariable: URL路径参数，比如&#x2F;user&#x2F;{id}中的id参数</li><li>@RequestParam: URL请求参数，比如&#x2F;user?id&#x3D;1中的id参数</li><li>@RequestBody: 请求Body参数</li></ol><p>下面我们尝试使用Spring MVC来实现一组对User对象操作的RESTful API，配合注释详细说明在Spring MVC中如何映射HTTP请求、如何传参、如何编写单元测试。</p><h2 id="2-API设计"><a href="#2-API设计" class="headerlink" title="2.API设计"></a>2.API设计</h2><table><thead><tr><th>请求类型</th><th>URL</th><th>功能说明</th></tr></thead><tbody><tr><td>GET</td><td>&#x2F;uer&#x2F;</td><td>查询全部</td></tr><tr><td>POST</td><td>&#x2F;uer</td><td>插入数据</td></tr><tr><td>GET</td><td>&#x2F;uer&#x2F;{id}</td><td>根据id查询</td></tr><tr><td>PUT</td><td>&#x2F;uer&#x2F;{id}</td><td>根据id更新</td></tr><tr><td>DELETE</td><td>&#x2F;uer&#x2F;{id}</td><td>根据id删除</td></tr><tr><td>POST</td><td>&#x2F;user&#x2F;{id}</td><td>测试乐观锁</td></tr><tr><td>GET</td><td>&#x2F;user&#x2F;pageInfo&#x2F;{pageNo}</td><td>分页查询</td></tr></tbody></table><p>RESTful架构有一些典型的设计误区，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。 上面设计的API的URI中都是名词。</p><h2 id="3-定义实体"><a href="#3-定义实体" class="headerlink" title="3.定义实体"></a>3.定义实体</h2><p>这里我们使用MybatisPlus的代码生成器，简化操作，只需编写RESTful风格的API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* &lt;p&gt;<br>\*<br>\* &lt;/p&gt;<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">05</span><br>\*/<br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@EqualsAndHashCode(callSuper = false)</span><br><span class="hljs-meta">@Accessors(chain = true)</span><br><span class="hljs-meta">@ApiModel(value = &quot;Users&quot;, description = &quot;Users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;主键ID&quot;)</span><br><span class="hljs-meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span><br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;姓名&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;年龄&quot;)</span><br><span class="hljs-keyword">private</span> Integer age;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;邮箱&quot;)</span><br><span class="hljs-keyword">private</span> String email;<br><span class="hljs-meta">@Version</span><br><span class="hljs-keyword">private</span> Integer version;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;逻辑删除&quot;)</span><br><span class="hljs-meta">@TableLogic</span><br><span class="hljs-keyword">private</span> Integer deleted;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;创建时间&quot;)</span><br><span class="hljs-keyword">private</span> Date create\_time;<br><span class="hljs-meta">@ApiModelProperty(value = &quot;更新时间&quot;)</span><br><span class="hljs-keyword">private</span> Date update\_time;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-controller的编写"><a href="#4-controller的编写" class="headerlink" title="4.controller的编写"></a>4.controller的编写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* &lt;p&gt;<br>\* 前端控制器<br>\* &lt;/p&gt;<br>\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@since</span> <span class="hljs-number">2021</span>-<span class="hljs-number">01</span>-<span class="hljs-number">05</span><br>\*/<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br>/\*\*<br>\* 查询全部<br>\*<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;查询全部&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;List&lt;Users&gt;&gt; <span class="hljs-title function_">getAll</span><span class="hljs-params">()</span> &#123;<br>List&lt;Users&gt; list = userService.list(<span class="hljs-literal">null</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;查询成功&quot;</span>, list);<br>&#125;<br>/\*\*<br>\* 根据id查<br>\*<br>\* <span class="hljs-meta">@param</span> id<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;根据id查询&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Users&gt; <span class="hljs-title function_">getById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br><span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(id);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;查询成功&quot;</span>, user);<br>&#125;<br>/\*\*<br>\* 根据id删除<br>\*<br>\* <span class="hljs-meta">@param</span> id<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;根据id删除&quot;)</span><br><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">dellteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;<br>userService.removeById(id);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;删除成功&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>&#125;<br>/\*\*<br>\* 根据id更新<br>\*<br>\* <span class="hljs-meta">@param</span> id<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;根据id更新&quot;)</span><br><span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@ModelAttribute</span> Users user)</span> &#123;<br>userService.updateById(user);<br>log.info(<span class="hljs-string">&quot;更新成功&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;更新成功&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>&#125;<br>/\*\*<br>\* 插入数据<br>\*<br>\* <span class="hljs-meta">@param</span> user<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;插入数据&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;String&gt; <span class="hljs-title function_">insUser</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> Users user)</span> &#123;<br>userService.save(user);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;插入成功&quot;</span>, <span class="hljs-string">&quot;200&quot;</span>);<br>&#125;<br>/\*\*<br>\* 测试乐观锁<br>\*<br>\* <span class="hljs-meta">@param</span> id<br>\* <span class="hljs-meta">@param</span> user<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;测试乐观锁&quot;)</span><br><span class="hljs-meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;Users&gt; <span class="hljs-title function_">insUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@ModelAttribute</span> Users user)</span> &#123;<br><span class="hljs-comment">//先拿数据，再更新，乐观锁才起作用</span><br><span class="hljs-type">Users</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> userService.getById(id);<br>userService.updateById(user);<br><span class="hljs-type">Users</span> <span class="hljs-variable">userServiceById</span> <span class="hljs-operator">=</span> userService.getById(id);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;成功&quot;</span>, userServiceById);<br>&#125;<br>/\*\*<br>\* 分页显示<br>\*<br>\* <span class="hljs-meta">@param</span> pageNo<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@ApiOperation(&quot;分页查询&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/pageInfo/&#123;pageNo&#125;&quot;)</span><br><span class="hljs-keyword">public</span> BaseResponse&lt;List&lt;Users&gt;&gt; <span class="hljs-title function_">pageInfoUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> <span class="hljs-type">int</span> pageNo)</span> &#123;<br><span class="hljs-comment">//默认每页5个</span><br><span class="hljs-comment">// 参数一：当前页</span><br><span class="hljs-comment">// 参数二：页面大小</span><br>Page&lt;Users&gt; page = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(pageNo, <span class="hljs-number">5</span>);<br>userService.page(page, <span class="hljs-literal">null</span>);<br>List&lt;Users&gt; list = page.getRecords();<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseResponse</span>&lt;&gt;(<span class="hljs-literal">true</span>, <span class="hljs-string">&quot;查询成功&quot;</span>, list);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootRestfulApplicationTests</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><span class="hljs-comment">// 测试插入</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Users</span>();<br>user.setName(<span class="hljs-string">&quot;Alen&quot;</span>);<br>user.setAge(<span class="hljs-number">3</span>);<br>user.setEmail(<span class="hljs-string">&quot;1234@qq.com&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userMapper.insert(user); <span class="hljs-comment">// 帮我们自动生成id</span><br>System.out.println(result); <span class="hljs-comment">// 受影响的行数</span><br>System.out.println(user); <span class="hljs-comment">// 发现，id会自动回填</span><br>&#125;<br><span class="hljs-comment">//测试乐观锁</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testversion</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br><span class="hljs-comment">//修改</span><br>user.setName(<span class="hljs-string">&quot;最强的&quot;</span>);<br>user.setAge(<span class="hljs-number">11</span>);<br><span class="hljs-comment">//更新</span><br>userMapper.updateById(user);<br>&#125;<br><span class="hljs-comment">// 测试乐观锁失败！多线程下</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testOptimisticLocker2</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">// 线程 1</span><br><span class="hljs-type">Users</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>user.setName(<span class="hljs-string">&quot;Luffy11111&quot;</span>);<br>user.setEmail(<span class="hljs-string">&quot;134@qq.com&quot;</span>);<br><span class="hljs-comment">// 模拟另外一个线程执行了插队操作</span><br><span class="hljs-type">Users</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>user2.setName(<span class="hljs-string">&quot;Luffy22222&quot;</span>);<br>user2.setEmail(<span class="hljs-string">&quot;134@qq.com&quot;</span>);<br>userMapper.updateById(user2);<br><span class="hljs-comment">// 自旋锁来多次尝试提交！</span><br>userMapper.updateById(user); <span class="hljs-comment">// 如果没有乐观锁就会覆盖插队线程的值！</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用Postman测试Post，Delete，Put类型的接口，测试成功！</p><h2 id="6-GitHub源码"><a href="#6-GitHub源码" class="headerlink" title="6.GitHub源码"></a>6.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-restful">springboot-restful</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot集成Mybatis的使用</title>
    <link href="/2021/01/12/SpringBoot%E9%9B%86%E6%88%90Mybatis%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/01/12/SpringBoot%E9%9B%86%E6%88%90Mybatis%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot集成Mybatis的使用"><a href="#SpringBoot集成Mybatis的使用" class="headerlink" title="SpringBoot集成Mybatis的使用"></a>SpringBoot集成Mybatis的使用</h1><p><img src="https://s3.ax1x.com/2021/01/23/s7Z8xK.png"></p><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。 MyBatis 可以使用简单的 <strong>XML</strong> 或<strong>注解</strong>来配置和映射原生信息，将接口和 Java 的 POJOs映射成数据库中的记录。</p><p>这里我使用原生的Mybatis，不使用Mybatis插件，来讲解SpringBoot如何搭建Mybatis环境，并编写接口测试案例。</p><p>Mybatis中文官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><h2 id="1-Maven依赖"><a href="#1-Maven依赖" class="headerlink" title="1.Maven依赖"></a>1.Maven依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Spring Boot集成Mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-创建数据库表"><a href="#2-创建数据库表" class="headerlink" title="2.创建数据库表"></a>2.创建数据库表</h2><p>创建一个t_users的数据表，插入测试数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE TABLE</span> `t\_users` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> AUTO\_INCREMENT,<br>`username` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4\_general\_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4\_general\_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`salt` <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">CHARACTER SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4\_general\_ci <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>`<span class="hljs-keyword">create</span>\_time` datetime <span class="hljs-keyword">NOT NULL</span>,<br>`<span class="hljs-keyword">update</span>\_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (`id`) <span class="hljs-keyword">USING</span> BTREE<br>) ENGINE <span class="hljs-operator">=</span> InnoDB AUTO\_INCREMENT <span class="hljs-operator">=</span> <span class="hljs-number">6</span> <span class="hljs-keyword">CHARACTER SET</span> <span class="hljs-operator">=</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> <span class="hljs-operator">=</span> utf8mb4\_general\_ci <span class="hljs-type">ROW</span>\_FORMAT <span class="hljs-operator">=</span> Compact;<br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-comment">-- Records of t\_users</span><br><span class="hljs-comment">-- ----------------------------</span><br><span class="hljs-keyword">INSERT INTO</span> `t\_users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;路飞&#x27;</span>, <span class="hljs-string">&#x27;be59564e3e648e0f606e17d7bb5b7934&#x27;</span>, <span class="hljs-string">&#x27;noJmwJ7F&#x27;</span>, <span class="hljs-string">&#x27;2020-12-31 23:00:02&#x27;</span>, <span class="hljs-string">&#x27;2021-01-07 22:59:59&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> `t\_users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Alen&#x27;</span>, <span class="hljs-string">&#x27;99cdfcdb829c4c505acd92ed77f1b536&#x27;</span>, <span class="hljs-string">&#x27;7Vy^!Kjp&#x27;</span>, <span class="hljs-string">&#x27;2021-01-28 23:00:05&#x27;</span>, <span class="hljs-string">&#x27;2021-01-20 23:00:11&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> `t\_users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;小明&#x27;</span>, <span class="hljs-string">&#x27;7cdd798bd3ad0235cfb93f67e24aa485&#x27;</span>, <span class="hljs-string">&#x27;@4qpfdQS&#x27;</span>, <span class="hljs-string">&#x27;2021-01-27 23:00:08&#x27;</span>, <span class="hljs-string">&#x27;2021-01-23 23:00:15&#x27;</span>);<br><span class="hljs-keyword">INSERT INTO</span> `t\_users` <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;Luffy&#x27;</span>, <span class="hljs-string">&#x27;7cdd798bd3ad0235cfb93f67e24aa485&#x27;</span>, <span class="hljs-string">&#x27;3$^\*G)df&#x27;</span>, <span class="hljs-string">&#x27;2021-01-11 23:27:47&#x27;</span>, <span class="hljs-string">&#x27;2021-01-11 23:27:47&#x27;</span>);<br><span class="hljs-keyword">SET</span> <span class="hljs-keyword">FOREIGN</span>\_KEY\_CHECKS <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8031</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/shiro?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment">#实体类扫描</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.dev.entity</span><br><span class="hljs-comment">#开启驼峰命名</span><br><span class="hljs-attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">logging.level.com.dev.mapper</span>=<span class="hljs-string">debug</span><br><span class="hljs-attr">debug</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>需要注意的是：</p><p>mybatis.type-aliases-package 是实体类entiy位置存放的位置</p><p>mybatis.configuration.map-underscore-to-camel-case 驼峰命名的开启 默认不开启 这个看个人习惯</p><h2 id="4-实体类"><a href="#4-实体类" class="headerlink" title="4.实体类"></a>4.实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Users实体类<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Users</span> &#123;<br><span class="hljs-keyword">private</span> Integer id;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">private</span> String salt;<br><span class="hljs-keyword">private</span> Date create\_time;<br><span class="hljs-keyword">private</span> Date update\_time;<br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br><span class="hljs-built_in">this</span>.id = id;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br><span class="hljs-built_in">this</span>.username = username;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br><span class="hljs-built_in">this</span>.password = password;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSalt</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> salt;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalt</span><span class="hljs-params">(String salt)</span> &#123;<br><span class="hljs-built_in">this</span>.salt = salt;<br>&#125;<br><span class="hljs-keyword">public</span> Date getCreate\_time() &#123;<br><span class="hljs-keyword">return</span> create\_time;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> setCreate\_time(Date create\_time) &#123;<br><span class="hljs-built_in">this</span>.create\_time = create\_time;<br>&#125;<br><span class="hljs-keyword">public</span> Date getUpdate\_time() &#123;<br><span class="hljs-keyword">return</span> update\_time;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> setUpdate\_time(Date update\_time) &#123;<br><span class="hljs-built_in">this</span>.update\_time = update\_time;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Users&#123;&quot;</span> +<br><span class="hljs-string">&quot;id=&quot;</span> + id +<br><span class="hljs-string">&quot;, username=&#x27;&quot;</span> + username + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-string">&quot;, salt=&#x27;&quot;</span> + salt + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br><span class="hljs-string">&quot;, create\_time=&quot;</span> + create\_time +<br><span class="hljs-string">&quot;, update\_time=&quot;</span> + update\_time +<br><span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-持久层"><a href="#5-持久层" class="headerlink" title="5.持久层"></a>5.持久层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 持久层<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span><br>\*/<br><span class="hljs-meta">@Mapper</span><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsersMapper</span> &#123;<br><span class="hljs-comment">//测试增删改查</span><br><span class="hljs-meta">@Select(&quot;SELECT \* FROM t\_users&quot;)</span><br>List&lt;Users&gt; <span class="hljs-title function_">selAllUsers</span><span class="hljs-params">()</span>;<br><span class="hljs-meta">@Select(&quot;SELECT \* FROM t\_users WHERE username = #&#123;username&#125; &quot;)</span><br>Users <span class="hljs-title function_">selUser</span><span class="hljs-params">(String username)</span>;<br><span class="hljs-meta">@Insert(&quot;INSERT INTO t\_users VALUES(DEFAULT,#&#123;username&#125;,#&#123;password&#125;,#&#123;salt&#125;,now(),now())&quot;)</span><br>Integer <span class="hljs-title function_">insUser</span><span class="hljs-params">(Users users)</span>;<br><span class="hljs-meta">@Update(&quot;UPDATE t\_users SET username = #&#123;username&#125; WHERE id = &#123;id&#125;&quot;)</span><br>Integer <span class="hljs-title function_">updUser</span><span class="hljs-params">(String username,Integer id)</span>;<br><span class="hljs-meta">@Delete(&quot;DELETE FROM t\_users WHERE username =#&#123;username&#125;&quot;)</span><br>Integer <span class="hljs-title function_">delUser</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Mybatis支持XML和注解的方式编写SQL，XML编写有一点难度，但对于复杂的SQL需要用到XML来写。这里为了测试方便，我采用注解的方式来编写CRUD测试案例。</p><h2 id="6-service和service实现类"><a href="#6-service和service实现类" class="headerlink" title="6.service和service实现类"></a>6.service和service实现类</h2><p>service.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Users服务接口<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsersService</span> &#123;<br>List&lt;Users&gt; <span class="hljs-title function_">selAllUsers</span><span class="hljs-params">()</span>;<br>Users <span class="hljs-title function_">selUser</span><span class="hljs-params">(String username)</span>;<br>Integer <span class="hljs-title function_">insUser</span><span class="hljs-params">(Users users)</span>;<br>Integer <span class="hljs-title function_">updUser</span><span class="hljs-params">(String username,Integer id)</span>;<br>Integer <span class="hljs-title function_">delUser</span><span class="hljs-params">(String username)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>serviceImpl.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Users服务接口实现<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span><br>\*/<br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsersService</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UsersMapper usersMapper;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title function_">selAllUsers</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> usersMapper.selAllUsers();<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Users <span class="hljs-title function_">selUser</span><span class="hljs-params">(String username)</span> &#123;<br><span class="hljs-keyword">return</span> usersMapper.selUser(username);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">insUser</span><span class="hljs-params">(Users users)</span> &#123;<br><span class="hljs-keyword">return</span> usersMapper.insUser(users);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">updUser</span><span class="hljs-params">(String username, Integer id)</span> &#123;<br><span class="hljs-keyword">return</span> usersMapper.updUser(username,id);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">delUser</span><span class="hljs-params">(String username)</span> &#123;<br><span class="hljs-keyword">return</span> usersMapper.delUser(username);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-controller接口层"><a href="#7-controller接口层" class="headerlink" title="7.controller接口层"></a>7.controller接口层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* Users接口层<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2021</span>/<span class="hljs-number">1</span>/<span class="hljs-number">11</span><br>\*/<br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/users&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UsersController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UsersService usersService;<br>/\*\*<br>\* 显示所有用户<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@GetMapping(&quot;/showAll&quot;)</span><br><span class="hljs-keyword">public</span> List&lt;Users&gt; <span class="hljs-title function_">showAllUsers</span><span class="hljs-params">()</span>&#123;<br>List&lt;Users&gt; users = usersService.selAllUsers();<br><span class="hljs-keyword">return</span> users;<br>&#125;<br>/\*\*<br>\* 查询用户<br>\* <span class="hljs-meta">@param</span> username<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/selUser&quot;)</span><br><span class="hljs-keyword">public</span> Users <span class="hljs-title function_">selUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span> String username)</span>&#123;<br><span class="hljs-type">Users</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> usersService.selUser(username);<br><span class="hljs-keyword">return</span> users;<br>&#125;<br>/\*\*<br>\* 插入用户<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/insUser&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">insUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Users users)</span>&#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> usersService.insUser(users);<br><span class="hljs-keyword">if</span> (integer &gt; <span class="hljs-number">0</span> )&#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;success&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;failed&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<br>&#125;<br>/\*\*<br>\* 修改用户<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/updUser&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">updUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span>String username)</span>&#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> usersService.updUser(username,id);<br><span class="hljs-keyword">if</span> (integer &gt; <span class="hljs-number">0</span> )&#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;success&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;failed&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<br>&#125;<br>/\*\*<br>\* 删除用户<br>\* <span class="hljs-meta">@param</span> username<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@PostMapping(&quot;/delUser&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">delUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(value = &quot;username&quot;)</span> String username)</span>&#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> usersService.delUser(username);<br><span class="hljs-keyword">if</span> (integer &gt; <span class="hljs-number">0</span> )&#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">200</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;success&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>map.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">100</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;failed&quot;</span>);<br><span class="hljs-keyword">return</span> map;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里是SpringMVC的操作了，几个核心注解需要注意：</p><p>@RestController 是@Controller和@ResponseBody的整合，标明该类是接口，并把数据以JSON的格式返回</p><p>@RequestMapping 是接口映射地址，包含所有类型的请求，放在接口层最前面，把该接口的路径都规定为&#x2F;users&#x2F;*</p><p>@GetMapping GET请求的接口</p><p>@PostMapping POST请求的接口</p><p>@RequestParam POST请求需要在请求头中把Content-Type设置为application&#x2F;x-www-form-urlencoded，常见参数提交，也是默认Ajax和Axios默认的参数提交格式</p><p>@RequestBody POST请求需要在请求头中把Content-Type设置为application&#x2F;json，一般用于表单提交</p><h2 id="8-测试类"><a href="#8-测试类" class="headerlink" title="8.测试类"></a>8.测试类</h2><p>在测试类在注入UsersService，测试查询方法是否成功生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootMybatisApplicationTests</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SpringbootMybatisApplicationTests.class);<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UsersService usersService;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showAll</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//lambadas表达式</span><br>logger.info(<span class="hljs-string">&quot;-----------查询全部-------------&quot;</span>);<br>usersService.selAllUsers().forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/12/UjYBlEgXwi6ZJbq.jpg"></p><p>测试成功，返回数据。</p><h2 id="9-PostMan测试"><a href="#9-PostMan测试" class="headerlink" title="9.PostMan测试"></a>9.PostMan测试</h2><p>controller层采用前后端分离的模式，后端只处理业务逻辑，编写API，这里我们用PostMan测试API是否能成功返回数据</p><p><img src="https://i.loli.net/2021/01/12/btCmFzeYQVa6IRw.jpg"></p><p>测试POST提交参数</p><p><img src="https://i.loli.net/2021/01/12/V1NRcZEI8Uezwjy.jpg"></p><p>测试成功！</p><h2 id="10-GitHub源码"><a href="#10-GitHub源码" class="headerlink" title="10.GitHub源码"></a>10.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-mybatis">springboot-mybatis</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络学习笔记</title>
    <link href="/2021/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/01/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络学习笔记"><a href="#计算机网络学习笔记" class="headerlink" title="计算机网络学习笔记"></a>计算机网络学习笔记</h1><h2 id="1-TCP-IP四层模型，OSI七层模型的理解"><a href="#1-TCP-IP四层模型，OSI七层模型的理解" class="headerlink" title="1.TCP&#x2F;IP四层模型，OSI七层模型的理解"></a>1.TCP&#x2F;IP四层模型，OSI七层模型的理解</h2><p>为了增强通用性和兼容性，计算机网络都被设计成层次机构，每一层都遵守一定的规则。</p><p>因此有了OSI这样一个抽象的网络通信参考模型，按照这个标准使计算机网络系统可以互相连接。</p><ul><li><strong>物理层</strong>：通过网线、光缆等这种物理方式将电脑连接起来。传递的数据是<strong>比特流</strong>，0101010100。</li><li><strong>数据链路层</strong>：首先，把比特流封装成数据<strong>帧</strong>的格式，对0、1进行分组。电脑连接起来之后，数据都经过网卡来传输，而网卡上定义了全世界唯一的MAC地址。然后再通过广播的形式向局域网内所有电脑发送数据，再根据数据中MAC地址和自身对比判断是否是发给自己的。</li><li><strong>网络层</strong>：广播的形式太低效，为了区分哪些MAC地址属于同一个子网，网络层定义了IP和子网掩码，通过对IP和子网掩码进行与运算就知道是否是同一个子网，再通过路由器和交换机进行传输。IP协议属于网络层的协议。</li><li><strong>传输层</strong>：有了网络层的MAC+IP地址之后，为了确定数据包是从哪个进程发送过来的，就需要端口号，通过端口来建立通信，比如TCP和UDP属于这一层的协议。</li><li><strong>会话层</strong>：负责建立和断开连接</li><li><strong>表示层</strong>：为了使得数据能够被其他的计算机理解，再次将数据转换成另外一种格式，比如文字、视频、图片等。</li><li><strong>应用层</strong>：最高层，面对用户，提供计算机网络与最终呈现给用户的界面</li></ul><p><img src="https://i.loli.net/2021/01/11/nEM9Fk2QNpLur34.jpg"></p><p>TCP&#x2F;IP则是四层的结构，相当于是对OSI模型的简化。</p><ol><li>数据链路层，也有称作网络访问层、网络接口层。他包含了OSI模型的物理层和数据链路层，把电脑连接起来。</li><li>网络层，也叫做IP层，处理IP数据包的传输、路由，建立主机间的通信。</li><li>传输层，就是为两台主机设备提供端到端的通信。</li><li>应用层，包含OSI的会话层、表示层和应用层，提供了一些常用的协议规范，比如FTP、SMPT、HTTP等。</li></ol><p>总结下来，就是物理层通过物理手段把电脑连接起来，数据链路层则对比特流的数据进行分组，网络层来建立主机到主机的通信，传输层建立端口到端口的通信，应用层最终负责建立连接，数据格式转换，最终呈现给用户。</p><h2 id="2-TCP-3次握手的过程"><a href="#2-TCP-3次握手的过程" class="headerlink" title="2.TCP 3次握手的过程"></a>2.TCP 3次握手的过程</h2><p>建立连接前server端需要监听端口，所以初始状态是LISTEN。</p><ol><li>client端建立连接，发送一个SYN同步包，发送之后状态变成SYN_SENT</li><li>server端收到SYN之后，同意建立连接，返回一个ACK响应，同时也会给client发送一个SYN包，发送完成之后状态变为SYN_RCVD</li><li>client端收到server的ACK之后，状态变为ESTABLISHED，返回ACK给server端。server收到之后状态也变为ESTABLISHED，连接建立完成。</li></ol><p><img src="https://i.loli.net/2021/01/11/K7yV8h4Mu9bCkJF.jpg"></p><h2 id="3-为什么要3次？2次，4次不行吗？"><a href="#3-为什么要3次？2次，4次不行吗？" class="headerlink" title="3.为什么要3次？2次，4次不行吗？"></a>3.为什么要3次？2次，4次不行吗？</h2><p>因为TCP是双工传输模式，不区分客户端和服务端，连接的建立是双向的过程。</p><p>如果只有两次，无法做到双向连接的建立，从建立连接server回复的SYN和ACK合并成一次可以看出来，他也不需要4次。</p><p>挥手为什么要四次？因为挥手的ACK和FIN不能同时发送，因为数据发送的截止时间不同。</p><h2 id="4-TCP-4次挥手的过程？"><a href="#4-TCP-4次挥手的过程？" class="headerlink" title="4.TCP 4次挥手的过程？"></a>4.TCP 4次挥手的过程？</h2><ol><li>client端向server发送FIN包，进入FIN_WAIT_1状态，这代表client端已经没有数据要发送了</li><li>server端收到之后，返回一个ACK，进入CLOSE_WAIT等待关闭的状态，因为server端可能还有没有发送完成的数据</li><li>等到server端数据都发送完毕之后，server端就向client发送FIN，进入LAST_ACK状态</li><li>client收到ACK之后，进入TIME_WAIT的状态，同时回复ACK，server收到之后直接进入CLOSED状态，连接关闭。但是client要等待2MSL(报文最大生存时间)的时间，才会进入CLOSED状态。</li></ol><p><img src="https://i.loli.net/2021/01/11/iotQIj58BlxHTvy.jpg"></p><h2 id="5-为什么要等待2MSL的时间才关闭？"><a href="#5-为什么要等待2MSL的时间才关闭？" class="headerlink" title="5.为什么要等待2MSL的时间才关闭？"></a>5.为什么要等待2MSL的时间才关闭？</h2><ol><li>为了保证连接的可靠关闭。如果server没有收到最后一个ACK，那么就会重发FIN。</li><li>为了避免端口重用带来的数据混淆。如果client直接进入CLOSED状态，又用相同端口号向server建立一个连接，上一次连接的部分数据在网络中延迟到达server，数据就可能发生混淆了。</li></ol><h2 id="6-TCP怎么保证传输过程的可靠性？"><a href="#6-TCP怎么保证传输过程的可靠性？" class="headerlink" title="6.TCP怎么保证传输过程的可靠性？"></a>6.TCP怎么保证传输过程的可靠性？</h2><p><strong>校验和</strong>：发送方在发送数据之前计算校验和，接收方收到数据后同样计算，如果不一致，那么传输有误。</p><p><strong>确认应答，序列号</strong>：TCP进行传输时数据都进行了编号，每次接收方返回ACK都有确认序列号。</p><p><strong>超时重传</strong>：如果发送方发送数据一段时间后没有收到ACK，那么就重发数据。</p><p><strong>连接管理</strong>：三次握手和四次挥手的过程。</p><p><strong>流量控制</strong>：TCP协议报头包含16位的窗口大小，接收方会在返回ACK时同时把自己的即时窗口填入，发送方就根据报文中窗口的大小控制发送速度。</p><p><strong>拥塞控制</strong>：刚开始发送数据的时候，拥塞窗口是1，以后每次收到ACK，则拥塞窗口+1，然后将拥塞窗口和收到的窗口取较小值作为实际发送的窗口，如果发生超时重传，拥塞窗口重置为1。这样做的目的就是为了保证传输过程的高效性和可靠性。</p><h2 id="7-浏览器请求一个网址的过程？"><a href="#7-浏览器请求一个网址的过程？" class="headerlink" title="7.浏览器请求一个网址的过程？"></a>7.浏览器请求一个网址的过程？</h2><ol><li>首先通过DNS服务器把域名解析成IP地址，通过IP和子网掩码判断是否属于同一个子网</li><li>构造应用层请求http报文，传输层添加TCP&#x2F;UDP头部，网络层添加IP头部，数据链路层添加以太网协议头部</li><li>数据经过路由器、交换机转发，最终达到目标服务器，目标服务器同样解析数据，最终拿到http报文，按照对应的程序的逻辑响应回去。</li></ol><p><img src="https://i.loli.net/2021/01/11/TQ8FiMj5x9GYpqR.jpg"></p><h2 id="8-HTTPS的工作原理"><a href="#8-HTTPS的工作原理" class="headerlink" title="8.HTTPS的工作原理"></a>8.HTTPS的工作原理</h2><ol><li>用户通过浏览器请求https网站，服务器收到请求，选择浏览器支持的加密和hash算法，同时返回数字证书给浏览器，包含颁发机构、网址、公钥、证书有效期等信息。</li><li>浏览器对证书的内容进行校验，如果有问题，则会有一个提示警告。否则，就生成一个随机数X，同时使用证书中的公钥进行加密，并且发送给服务器。</li><li>服务器收到之后，使用私钥解密，得到随机数X，然后使用X对网页内容进行加密，返回给浏览器</li><li>浏览器则使用X和之前约定的加密算法进行解密，得到最终的网页内容</li></ol><p><img src="https://i.loli.net/2021/01/11/U9NBn17AEc4l5PI.jpg"></p><h2 id="9-负载均衡的实现方式？"><a href="#9-负载均衡的实现方式？" class="headerlink" title="9.负载均衡的实现方式？"></a>9.负载均衡的实现方式？</h2><p><strong>DNS</strong>：这是最简单的负载均衡的方式，一般用于实现地理级别的负载均衡，不同地域的用户通过DNS的解析可以返回不同的IP地址，这种方式的负载均衡简单，但是扩展性太差，控制权在域名服务商。</p><p><strong>Http重定向</strong>：通过修改Http响应头的Location达到负载均衡的目的，Http的302重定向。这种方式对性能有影响，而且增加请求耗时。</p><p><strong>反向代理</strong>：作用于应用层的模式，也被称作为<strong>七层负载均衡</strong>，比如常见的Nginx，性能一般可以达到万级。这种方式部署简单，成本低，而且容易扩展。</p><p><strong>IP</strong>：作用于网络层的和传输层的模式，也被称作<strong>四层负载均衡</strong>，通过对数据包的IP地址和端口进行修改来达到负载均衡的效果。常见的有LVS（Linux Virtual Server），通常性能可以支持10万级并发。</p><p>按照类型来划分的话，还可以分成DNS负载均衡、硬件负载均衡、软件负载均衡。</p><p>其中硬件负载均衡价格昂贵，性能最好，能达到百万级，软件负载均衡包括Nginx、LVS这种。</p><h2 id="10-参考文档"><a href="#10-参考文档" class="headerlink" title="10.参考文档"></a>10.参考文档</h2><p><a href="https://mp.weixin.qq.com/s/4d1ZHK558838RcWnB-zwjw">《我想进大厂》之网络篇夺命连环12问</a></p><p>以上是我学习王道的计算机网络后，再看的博主艾小仙整理的关于计网的面试题，加深理解。</p><p>最后，附上王道计网的整理笔记：</p><p><a href="https://blog.csdn.net/weixin_45067603/article/details/106974036">计算机网络笔记</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot之AOP的使用</title>
    <link href="/2021/01/06/SpringBoot%E4%B9%8BAOP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/01/06/SpringBoot%E4%B9%8BAOP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot之AOP的使用"><a href="#SpringBoot之AOP的使用" class="headerlink" title="SpringBoot之AOP的使用"></a>SpringBoot之AOP的使用</h1><p>spring核心思想分三大类：<strong>控制反转（IOC），依赖注入（DI）和面向切面（AOP）</strong></p><h2 id="1-什么是面向切面编程"><a href="#1-什么是面向切面编程" class="headerlink" title="1.什么是面向切面编程"></a>1.什么是面向切面编程</h2><ul><li><p>AOP简介</p><p>AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。</p></li><li><p>为什么使用AOP编程范式？</p><p>分离功能性需求和非功能性需求</p><p>集中处理某一关注点</p><p>侵入性少，增强代码可读性及可维护性</p></li><li><p>AOP应用场景</p><p>权限控制、缓存控制、事务控制、分布式追踪、异常处理等</p><p>总之，在程序运行时，动态地将代码切入到类的指定方法或位置上的思想，就是面向切面编程。</p><p>​</p></li></ul><h2 id="2-AOP常用术语"><a href="#2-AOP常用术语" class="headerlink" title="2.AOP常用术语"></a>2.AOP常用术语</h2><p>Spring的AOP中有几个重要概念搞清楚就行</p><ul><li>执行点（Executepoint） - 类初始化，方法调用。</li><li>连接点（Joinpoint） - 执行点+方位的组合，可确定Joinpoint，比如类开始初始化前，类初始化后，方法调用前，方法调用后。</li><li>切点（Pointcut） - 在众多执行点中，定位感兴趣的执行点。Executepoint相当于数据库表中的记录，而Pointcut相当于查询条件。</li><li>增强（Advice） - 织入到目标类连接点上的一段程序代码。除了一段程序代码外，还拥有执行点的方位信息。</li><li>目标对象（Target） - 增强逻辑的织入目标类</li><li>引介（Introduction） - 一种特殊的增强（advice），它为类添加一些额外的属性和方法，动态为业务类添加其他接口的实现逻辑，让业务类成为这个接口的实现类。</li><li>代理（Proxy） - 一个类被AOP织入后，产生一个结果类，它便是融合了原类和增强逻辑的代理类。</li><li>切面（Aspect） - 切面由切点（Pointcut）和增强（Advice&#x2F;Introduction）组成，既包括横切逻辑定义，也包括连接点定义。</li></ul><p>AOP工作重点：</p><ul><li>如何通过切点（Pointcut）和增强（Advice）定位到连接点（Jointpoint）上；</li><li>如何在增强（Advice）中编写切面的代码。</li></ul><h2 id="3-Advice-五种增强方式"><a href="#3-Advice-五种增强方式" class="headerlink" title="3.Advice-五种增强方式"></a>3.Advice-五种增强方式</h2><p>例如在执行某个特定方法的时候，我们可以选择不同的增强方式（如前置通知&#x2F;增强，在方法运行前执行），达到我们织入后的不同效果。</p><ul><li>前置通知:在我们执行目标方法之前运行(@Before)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;within(com.example.demo.Service.\*)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matchType</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-meta">@Before(&quot;matchType()&quot;)</span> <span class="hljs-comment">//可在此加入JoinPoint打印切点信息</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;------【前置通知】------&quot;</span> + joinPoint);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>后置通知:在我们目标方法运行结束之后 ,不管有没有异常(@After)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@After(value=&quot;execution(\* com.example.aspectJ.demo1.ProductDao.findAll(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;最终通知==================&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>返回通知:在我们的目标方法正常返回值后运行(@AfterReturning)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AfterReturning(value=&quot;execution(\* com.example.aspectJ.demo1.ProductDao.update(..))&quot; ,returning = &quot;result&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterReturning</span><span class="hljs-params">(Object result)</span>&#123; <span class="hljs-comment">//通过returning属性，定义方法返回值作为参数</span><br>System.out.println(<span class="hljs-string">&quot;后置通知=========&quot;</span>+result);<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sVsXeU"><img src="https://s3.ax1x.com/2021/01/06/sVsXeU.md.png" alt="sVsXeU.md.png"></a></p><ul><li>异常通知:在我们的目标方法出现异常后运行(@AfterThrowing)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过设置throwing属性，可以设置发生异常对象参数</span><br><span class="hljs-meta">@AfterThrowing(value = &quot;execution(\* com.example.aspectJ.demo1.ProductDao.findOne(..))&quot;,throwing = &quot;e&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterThrowing</span><span class="hljs-params">(Throwable e)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;抛出异常通知&quot;</span>+e.getMessage());<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>环绕通知:动态代理, 需要手动执行joinPoint.procced()(其实就是执行我们的目标方法执行之前相当于前置通知, 执行之后就相当于我们后置通知(@Around)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Around(value = &quot;execution(\* com.example.aspectJ.demo1.ProductDao.delete(..))&quot;)</span><br><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">around</span><span class="hljs-params">(ProceedingJoinPoint joinPoint)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>System.out.println(<span class="hljs-string">&quot;环绕前通知&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> joinPoint.proceed(); <span class="hljs-comment">//执行目标方法</span><br>System.out.println(<span class="hljs-string">&quot;环绕后通知&quot;</span>);<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sVsrid"><img src="https://s3.ax1x.com/2021/01/06/sVsrid.md.png" alt="sVsrid.md.png"></a></p><h2 id="4-SpringAOP使用详解"><a href="#4-SpringAOP使用详解" class="headerlink" title="4.SpringAOP使用详解"></a>4.SpringAOP使用详解</h2><p><strong>切面表达式</strong></p><p><a href="https://imgchr.com/i/sVcsJJ"><img src="https://s3.ax1x.com/2021/01/06/sVcsJJ.jpg" alt="sVcsJJ.jpg"></a></p><p><strong>excution表达式</strong></p><ul><li><p>execution(</p></li><li><p>修饰符pattern</p></li><li><p>返回值pattern</p></li><li><p>描述包名</p></li><li><p>方法名(参数)</p></li><li><p>方法抛出异常pattern</p><p>)</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Pointcut(&quot;execution(public \* com.example.controller.\*Controller.\*(..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">match</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-meta">@Before(&quot;match()&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//前置通知...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>within表达式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配StudentService类里所有方法</span><br><span class="hljs-meta">@Pointcut(&quot;within(com.example.service.StudentService)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matchType</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配com.example包及子包下所有类方法</span><br><span class="hljs-meta">@Pointcut(&quot;within(com.example..\*)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">matchPackage</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>对象匹配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">serviceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">service</span>\*/<br><span class="hljs-comment">//匹配AOP对象的目标对象为指定类型方法，即serviceImpl的aop代理对象方法</span><br><span class="hljs-meta">@Pointcut(&quot;this(com.example.serviceImpl)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">thisDemo</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配实现service接口的目标对象（非aop代理后的对象）方法，这里指的就是serviceImpl的方法</span><br><span class="hljs-meta">@Pointcut(&quot;target(com.example.service)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">targetDemo</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配所有以Service结尾的bean中方法</span><br><span class="hljs-meta">@Pointcut(&quot;bean(\*Service)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beanDemo</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>参数匹配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配任何以find开头且只有一个Long参数的方法</span><br><span class="hljs-meta">@Pointcut(&quot;execution(\* \*..find\*(Long))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">argsDemo1</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配任何只有一个Long参数的方法</span><br><span class="hljs-meta">@Pointcut(&quot;args(Long)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">argsDemo2</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配任何以find开头且第一个参数为Long的方法</span><br><span class="hljs-meta">@Pointcut(&quot;execution(\* \*..find\*(Long,..))&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">argsDemo3</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配第一个参数为Long的方法</span><br><span class="hljs-meta">@Pointcut(&quot;args(Long,..)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">argsDemo4</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>注解匹配（自定义注解）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//匹配方法注解有@AdminOnly的方法</span><br><span class="hljs-meta">@Pointcut(&quot;@annotation(com.example.security.AdminOnly)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annoDemo</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配注解有@Test1的类下所有方法，要求注解的RetentionPolicy级别为CLASS</span><br><span class="hljs-meta">@Pointcut(&quot;@within(com.example.annotation.Test1)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annoWithinDemo</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配注解有@Test2类下所有方法，要求注解的RetentionPolicy级别为RUNTIME</span><br><span class="hljs-meta">@Pointcut(&quot;@target(com.example.repository.Test2)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annoTargetDemo</span><span class="hljs-params">()</span>&#123;&#125;<br><span class="hljs-comment">//匹配传入参数类具有@Test3的注解的方法（例如student实体类有注解@Test3，只要方法传入student类就会被拦截）</span><br><span class="hljs-meta">@Pointcut(&quot;@args(org.example.repository.Test3)&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">annoArgsDemo</span><span class="hljs-params">()</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>两个aop切面类都工作了，顺序呢就是下面的：</p><p><a href="https://imgchr.com/i/sVrzxP"><img src="https://s3.ax1x.com/2021/01/06/sVrzxP.png" alt="sVrzxP.png"></a></p><p>spring aop就是一个同心圆，要执行的方法为圆心，最外层的order最小。从最外层按照AOP1、AOP2的顺序依次执行doAround方法，doBefore方法。然后执行method方法，最后按照AOP2、AOP1的顺序依次执行doAfter、doAfterReturn方法。也就是说对多个AOP来说，先before的，一定后after。</p><p>对于上面的例子就是，先外层的就是对所有controller的切面，内层就是自定义注解的。 那不同的切面，顺序怎么决定呢，尤其是同格式的切面处理，譬如两个execution的情况，那spring就是随机决定哪个在外哪个在内了。</p><p>所以大部分情况下，我们需要指定顺序，最简单的方式就是在Aspect切面类上加上@Order(1)注解即可，order越小最先执行，也就是位于最外层。像一些全局处理的就可以把order设小一点，具体到某个细节的就设大一点。</p><h2 id="5-参考文档"><a href="#5-参考文档" class="headerlink" title="5.参考文档"></a>5.参考文档</h2><p><a href="https://www.515code.com/posts/egs95cdu/">SpringAOP-什么是面向切面编程？</a></p><p><a href="https://www.xncoding.com/2017/07/24/spring/sb-aop.html">SpringBoot系列 - 使用AOP</a></p><h2 id="6-GitHub源码"><a href="#6-GitHub源码" class="headerlink" title="6.GitHub源码"></a>6.GitHub源码</h2><p><a href="https://github.com/luffy997/SpringBootBucket/tree/main/springboot-aop">springboot-aop</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JWT介绍和安全防范以及SpringBoot整合JWT实现接口权限认证</title>
    <link href="/2021/01/03/JWT%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%E4%BB%A5%E5%8F%8ASpringBoot%E6%95%B4%E5%90%88JWT%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/01/03/JWT%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E5%85%A8%E9%98%B2%E8%8C%83%E4%BB%A5%E5%8F%8ASpringBoot%E6%95%B4%E5%90%88JWT%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h1 id="JWT介绍和安全防范以及SpringBoot集成JWT实现接口权限认证"><a href="#JWT介绍和安全防范以及SpringBoot集成JWT实现接口权限认证" class="headerlink" title="JWT介绍和安全防范以及SpringBoot集成JWT实现接口权限认证"></a><strong>JWT介绍和安全防范以及SpringBoot集成JWT实现接口权限认证</strong></h1><p><img src="https://i.loli.net/2021/01/03/KRLVpsuZXa3rMH8.png"></p><h2 id="1-什么是JWT"><a href="#1-什么是JWT" class="headerlink" title="1.什么是JWT"></a>1.什么是JWT</h2><p>JSON Web Token (JWT) is an open standard (<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public&#x2F;private key pair using <strong>RSA</strong> or <strong>ECDSA</strong>.</p><p>​ —[摘自官网]</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.翻译</span><br><span class="hljs-bullet">-</span> 官网地址: https://jwt.io/introduction/<br><span class="hljs-bullet">-</span> 翻译: jsonwebtoken（JWT）是一个开放标准（rfc7519），它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密（使用HMAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名<br><span class="hljs-section"># 2.通俗解释</span><br><span class="hljs-bullet">-</span> JWT简称JSON Web Token,也就是通过JSON形式作为Web应用中的令牌,用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。<br></code></pre></td></tr></table></figure><h2 id="2-JWT能做什么"><a href="#2-JWT能做什么" class="headerlink" title="2.JWT能做什么"></a>2.JWT能做什么</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.授权</span><br><span class="hljs-bullet">-</span> 这是使用JWT的最常见方案。一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小并且可以在不同的域中轻松使用。<br><span class="hljs-section"># 2.信息交换</span><br><span class="hljs-bullet">-</span> JSON Web Token是在各方之间安全地传输信息的好方法。因为可以对JWT进行签名（例如，使用公钥/私钥对），所以您可以确保发件人是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此您还可以验证内容是否遭到篡改。<br></code></pre></td></tr></table></figure><h2 id="3-为什么是JWT"><a href="#3-为什么是JWT" class="headerlink" title="3.为什么是JWT"></a>3.为什么是JWT</h2><h3 id="基于传统的Session认证"><a href="#基于传统的Session认证" class="headerlink" title="基于传统的Session认证"></a>基于传统的Session认证</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.认证方式</span><br><span class="hljs-bullet">-</span> 我们知道，http协议本身是一种无状态的协议，而这就意味着如果用户向我们的应用提供了用户名和密码来进行用户认证，那么下一次请求时，用户还要再一次进行用户认证才行，因为根据http协议，我们并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储一份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样我们的应用就能识别请求来自哪个用户了,这就是传统的基于session认证。<br>t<br><span class="hljs-section"># 2.认证流程</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/7zc3ZTKaImx251p.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.暴露问题</span><br><span class="hljs-bullet">-</span> 1.每个用户经过我们的应用认证之后，我们的应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大<br><span class="hljs-bullet">-</span> 2.用户认证之后，服务端做认证记录，如果认证的记录被保存在内存中的话，这意味着用户下次请求还必须要请求在这台服务器上,这样才能拿到授权的资源，这样在分布式的应用上，相应的限制了负载均衡器的能力。这也意味着限制了应用的扩展能力。<br><span class="hljs-bullet">-</span> 3.因为是基于cookie来进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。<br><span class="hljs-bullet">-</span> 4.在前后端分离系统中就更加痛苦:如下图所示<br>也就是说前后端分离在应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session 每次携带sessionid 到服务 器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是CSRF（跨站伪造请求攻 击）攻击，session是基于cookie进行用户识别的, cookie如果被截获，用户就会很容易受到跨站请求伪造的攻击。还有就是 sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。 不方便集群应用。<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/ENP3ft6qbITsgXx.png"></p><h3 id="基于JWT认证"><a href="#基于JWT认证" class="headerlink" title="基于JWT认证"></a>基于JWT认证</h3><p><img src="https://i.loli.net/2021/01/03/oVvBmUdWECah5Nc.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.认证流程</span><br><span class="hljs-bullet">-</span> 首先，前端通过Web表单将自己的用户名和密码发送到后端的接口。这一过程一般是一个HTTP POST请求。建议的方式是通过SSL加密的传输（https协议），从而避免敏感信息被嗅探。<br><span class="hljs-bullet">-</span> 后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload（负载），将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。形成的JWT就是一个形同lll.zzz.xxx的字符串。 token head.payload.singurater<br><span class="hljs-bullet">-</span> 后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage或sessionStorage上，退出登录时前端删除保存的JWT即可。<br><span class="hljs-bullet">-</span> 前端在每次请求时将JWT放入HTTP Header中的Authorization位。(解决XSS和XSRF问题) HEADER<br><span class="hljs-bullet">-</span> 后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确；检查Token是否过期；检查Token的接收方是否是自己（可选）。<br><span class="hljs-bullet">-</span> 验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。<br><span class="hljs-section"># 2.jwt优势</span><br><span class="hljs-bullet">-</span> 简洁(Compact): 可以通过URL，POST参数或者在HTTP header发送，因为数据量小，传输速度也很快<br><span class="hljs-bullet">-</span> 自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库<br><span class="hljs-bullet">-</span> 因为Token是以JSON加密的形式保存在客户端的，所以JWT是跨语言的，原则上任何web形式都支持。<br><span class="hljs-bullet">-</span> 不需要在服务端保存会话信息，特别适用于分布式微服务。<br></code></pre></td></tr></table></figure><h2 id="4-JWT的结构是什么"><a href="#4-JWT的结构是什么" class="headerlink" title="4.JWT的结构是什么?"></a>4.JWT的结构是什么?</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">token string ====&gt; header.payload.singnature token<br><span class="hljs-section"># 1.令牌组成</span><br><span class="hljs-bullet">-</span> 1.标头(Header)<br><span class="hljs-bullet">-</span> 2.有效载荷(Payload)<br><span class="hljs-bullet">-</span> 3.签名(Signature)<br><span class="hljs-bullet">-</span> 因此，JWT通常如下所示:xxxxx.yyyyy.zzzzz Header.Payload.Signature<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.Header</span><br><span class="hljs-bullet">-</span> 标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。它会使用 Base64 编码组成 JWT 结构的第一部分。<br><span class="hljs-bullet">-</span> 注意:Base64是一种编码，也就是说，它是可以被翻译回原来的样子来的。它并不是一种加密过程。<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.Payload</span><br><span class="hljs-bullet">-</span> 令牌的第二部分是有效负载，其中包含声明。声明是有关实体（通常是用户）和其他数据的声明。同样的，它会使用 Base64 编码组成 JWT 结构的第二部分<br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 4.Signature</span><br><span class="hljs-bullet">-</span> 前面两部分都是使用 Base64 进行编码的，即前端可以解开知道里面的信息。Signature 需要使用编码后的 header 和 payload 以及我们提供的一个密钥，然后使用 header 中指定的签名算法（HS256）进行签名。签名的作用是保证 JWT 没有被篡改过<br><span class="hljs-bullet">-</span> 如:<br>HMACSHA256(base64UrlEncode(header) + &quot;.&quot; + base64UrlEncode(payload),secret);<br><span class="hljs-section"># 签名目的</span><br><span class="hljs-bullet">-</span> 最后一步签名的过程，实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。<br><span class="hljs-section"># 信息安全问题</span><br><span class="hljs-bullet">-</span> 在这里大家一定会问一个问题：Base64是一种编码，是可逆的，那么我的信息不就被暴露了吗？<br><span class="hljs-bullet">-</span> 是的。所以，在JWT中，不应该在负载里面加入任何敏感的数据。在上面的例子中，我们传输的是用户的User ID。这个值实际上不是什么敏 感内容，一般情况下被知道也是安全的。但是像密码这样的内容就不能被放在JWT中了。如果将用户的密码放在了JWT中，那么怀有恶意的第 三方通过Base64解码就能很快地知道你的密码了。因此JWT适合用于向Web应用传递一些非敏感信息。JWT还经常用于设计用户认证和授权系 统，甚至实现Web应用的单点登录。<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/ihK6jSt4N2ZdJBI.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 5.放在一起</span><br><span class="hljs-bullet">-</span> 输出是三个由点分隔的Base64-URL字符串，可以在HTML和HTTP环境中轻松传递这些字符串，与基于XML的标准（例如SAML）相比，它更紧凑。<br><span class="hljs-bullet">-</span> 简洁(Compact)<br>可以通过URL, POST 参数或者在 HTTP header 发送，因为数据量小，传输速度快<br><span class="hljs-bullet">-</span> 自包含(Self-contained)<br>负载中包含了所有用户所需要的信息，避免了多次查询数据库<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/yXNpgTKioFBeH41.png"></p><h2 id="5-攻击面"><a href="#5-攻击面" class="headerlink" title="5.攻击面"></a>5.攻击面</h2><h3 id="5-1敏感信息泄露"><a href="#5-1敏感信息泄露" class="headerlink" title="5.1敏感信息泄露"></a>5.1敏感信息泄露</h3><p>JWT中的header 和 payload 虽然看起来不可读，但实际上都只经过简单编码， 开发者可能误将敏感信息存储在里面。使用上述工具可以方便地解码JWT中前两部分的信息。</p><h3 id="5-2指定算法为none"><a href="#5-2指定算法为none" class="headerlink" title="5.2指定算法为none"></a>5.2指定算法为none</h3><p>上面提到算法 none 是JWT规范中强制要求实现的，但有些实现JWT的库直接将使用none 算法的token视为已经过校验。 这样攻击者就可以设置alg 为none ，使signature 部分为空，然后构造包含任意payload 的JWT来欺骗服务端。</p><h3 id="5-3将签名算法从非对称类型改为对称类型"><a href="#5-3将签名算法从非对称类型改为对称类型" class="headerlink" title="5.3将签名算法从非对称类型改为对称类型"></a>5.3将签名算法从非对称类型改为对称类型</h3><p>使用非对称加密算法（主要基于RSA、ECDSA，如S256）分发JWT的过程是使用私钥（private）加密生成JWT，使用公钥（public）解密验证。</p><p>使用对称加密算法（主要基于HMAC，如HS256）分发JWT的过程是使用同一个密钥（secret）生成和验证JWT。</p><p>如果服务端期待收到的算法类型为RS256，然后以RS256和public去验证JWT，而实际上收到的算法类型是HS256， 那么服务端就可能尝试把public当作secret，然后用HS256算法解密验证JWT。</p><p>由于RS256的public人人都可获得，攻击者可以预先以public为密钥，用HS256算法伪造包含任意payload 的JWT，从而成功通过服务端的验证。</p><h3 id="5-4爆破密钥"><a href="#5-4爆破密钥" class="headerlink" title="5.4爆破密钥"></a>5.4爆破密钥</h3><p>WT的安全性依赖于密钥的保密性，任何拥有密钥的人都可以构造任何内容的合法token。</p><p>当一个JSON Web Token 被分发出去，如果密钥不够强壮就存在被爆破的风险，而且整个爆破过程可以离线进行。</p><p>已经有人写了一些工具，推荐如下：</p><ul><li><a href="https://github.com/jmaxxz/jwtbrute">jwtbrute</a></li><li><a href="https://github.com/Sjord/jwtcrack/blob/master/crackjwt.py">Sjord’ python script</a></li><li><a href="https://github.com/magnumripper/JohnTheRipper">John the Ripper</a></li></ul><h3 id="5-5伪造密钥"><a href="#5-5伪造密钥" class="headerlink" title="5.5伪造密钥"></a>5.5伪造密钥</h3><p>时JWT采用header 中的kid 字段关联校验算法的密钥，这个密钥可能是对称加密的密钥，也可能是非对称加密的公钥。 如果能够猜测kid 和 密钥的关联性，攻击者就可能修改kid 来欺骗服务端，使其校验时使用攻击者可控的密钥， 于是攻击者就可以伪造任意内容的可通过校验的JWT。</p><h2 id="6-安全建议"><a href="#6-安全建议" class="headerlink" title="6.安全建议"></a>6.安全建议</h2><p>验证函数应忽略JWT中的algo 字段，预先就明确JWT使用的算法，如果需要使用多种算法，可以在header 中使用表示”key ID” 的kid 字段，查询每个kid 对应的算法。 JWT&#x2F;JWS 标准应该移除 header 中的algo 字段。JWT的许多安全缺陷都来自于开发者依赖这一客户端可控的字段。 开发者应升级相应库到最新版本，因为旧版本可能存在致命缺陷。</p><ol><li>不应该在jwt的payload部分存放敏感信息，因为该部分是客户端可解密的部分。</li><li>保护好secret私钥，该私钥非常重要。</li><li>请使用https的安全通道进行传输</li><li>验证函数应忽略JWT中的algo 字段，预先就明确JWT使用的算法，如果需要使用多种算法， 可以在header中使用表示”key ID”的kid字段，查询每个kid对应的算法。</li><li>JWT&#x2F;JWS 标准应该移除 header 中的algo 字段。JWT的许多安全缺陷都来自于开发者依赖这一客户端可控的字段。</li><li>开发者应升级相应库到最新版本，因为旧版本可能存在致命缺陷。</li></ol><h2 id="7-使用JWT"><a href="#7-使用JWT" class="headerlink" title="7.使用JWT"></a>7.使用JWT</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.引入依赖</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jwt--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.生成token</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Calendar</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>instance.add(Calendar.SECOND, <span class="hljs-number">90</span>);<br><span class="hljs-comment">//生成令牌</span><br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWT.create()<br>.withClaim(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>)<span class="hljs-comment">//设置自定义用户名</span><br>.withExpiresAt(instance.getTime())<span class="hljs-comment">//设置过期时间</span><br>.sign(Algorithm.HMAC256(<span class="hljs-string">&quot;token!Q2W#E$RW&quot;</span>));<span class="hljs-comment">//设置签名 保密 复杂</span><br><span class="hljs-comment">//输出令牌</span><br>System.out.println(token);<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 生成结果<br>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOlsicGhvbmUiLCIxNDMyMzIzNDEzNCJdLCJleHAiOjE1OTU3Mzk0NDIsInVzZXJuYW1lIjoi5byg5LiJIn0.aHmE3RNqvAjFr\<span class="hljs-emphasis">_dvyn\_</span>sD2VJ46P7EGiS5OBMO\<span class="hljs-emphasis">_TI5jg</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.根据令牌和签名解析数据</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">JWTVerifier</span> <span class="hljs-variable">jwtVerifier</span> <span class="hljs-operator">=</span> JWT.require(Algorithm.HMAC256(<span class="hljs-string">&quot;token!Q2W#E$RW&quot;</span>)).build();<br><span class="hljs-type">DecodedJWT</span> <span class="hljs-variable">decodedJWT</span> <span class="hljs-operator">=</span> jwtVerifier.verify(token);<br>System.out.println(<span class="hljs-string">&quot;用户名: &quot;</span> + decodedJWT.getClaim(<span class="hljs-string">&quot;username&quot;</span>).asString());<br>System.out.println(<span class="hljs-string">&quot;过期时间: &quot;</span>+decodedJWT.getExpiresAt());<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 4.常见异常信息</span><br><span class="hljs-bullet">-</span> SignatureVerificationException: 签名不一致异常<br><span class="hljs-bullet">-</span> TokenExpiredException: 令牌过期异常<br><span class="hljs-bullet">-</span> AlgorithmMismatchException: 算法不匹配异常<br><span class="hljs-bullet">-</span> InvalidClaimException: 失效的payload异常<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/FVD7cj2vuTghE6P.png" alt="image-20200805184517282.png"></p><h2 id="8-封装工具类"><a href="#8-封装工具类" class="headerlink" title="8. 封装工具类"></a>8. 封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JWTUtils</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;token!Q@W3e4r&quot;</span>;<br>/\*\*<br>\* 生成token<br>\* <span class="hljs-meta">@param</span> map <span class="hljs-comment">//传入payload</span><br>\* <span class="hljs-meta">@return</span> 返回token<br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">(Map&lt;String,String&gt; map)</span>&#123;<br>JWTCreator.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> JWT.create();<br>map.forEach((k,v)-&gt;&#123;<br>builder.withClaim(k,v);<br>&#125;);<br><span class="hljs-type">Calendar</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>instance.add(Calendar.SECOND,<span class="hljs-number">7</span>);<br>builder.withExpiresAt(instance.getTime());<br><span class="hljs-keyword">return</span> builder.sign(Algorithm.HMAC256(TOKEN)).toString();<br>&#125;<br>/\*\*<br>\* 验证token<br>\* <span class="hljs-meta">@param</span> token<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">verify</span><span class="hljs-params">(String token)</span>&#123;<br>JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);<br>&#125;<br>/\*\*<br>\* 获取token中payload<br>\* <span class="hljs-meta">@param</span> token<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DecodedJWT <span class="hljs-title function_">getToken</span><span class="hljs-params">(String token)</span>&#123;<br><span class="hljs-keyword">return</span> JWT.require(Algorithm.HMAC256(TOKEN)).build().verify(token);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-整合springboot"><a href="#9-整合springboot" class="headerlink" title="9.整合springboot"></a>9.整合springboot</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 0.搭建springboot+mybatis+jwt环境</span><br><span class="hljs-bullet">-</span> 引入依赖<br><span class="hljs-bullet">-</span> 编写配置<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入jwt--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.auth0<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>java-jwt<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.19<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--引入mysql--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.38<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8989</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">jwt</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/jwt?characterEncoding=UTF-8</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.baizhi.entity</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:com/baizhi/mapper/\*.xml</span><br><span class="hljs-attr">logging.level.com.baizhi.dao</span>=<span class="hljs-string">debug</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.开发数据库</span><br><span class="hljs-bullet">-</span> 这里采用最简单的表结构验证JWT使用<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/Gut2MTg6e8LpiPJ.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> `<span class="hljs-keyword">user</span>`;<br><span class="hljs-keyword">CREATE TABLE</span> `<span class="hljs-keyword">user</span>` (<br>`id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT NULL</span> AUTO\_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>`name` <span class="hljs-type">varchar</span>(<span class="hljs-number">80</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户名&#x27;</span>,<br>`password` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;用户密码&#x27;</span>,<br><span class="hljs-keyword">PRIMARY KEY</span> (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO\_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.开发entity</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Accessors(chain=true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><span class="hljs-keyword">private</span> String id;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/1L4jdvUKZWnNtSb.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.开发DAO接口和mapper.xml</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDAO</span> &#123;<br>User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/gyLSMHvw5rNUWYF.png" alt="image-20200805213603655.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.baizhi.dao.UserDAO&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;login&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;User&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;User&quot;</span>&gt;</span><br>select \* from user where name=#&#123;name&#125; and password = #&#123;password&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/irCLvOdeEsYZkRT.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 4.开发Service 接口以及实现类</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//登录接口</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/85eiXrKvPRV4Eqh.png" alt="image-20200805213648147.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserDAO userDAO;<br><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional(propagation = Propagation.SUPPORTS)</span><br><span class="hljs-keyword">public</span> User <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">userDB</span> <span class="hljs-operator">=</span> userDAO.login(user);<br><span class="hljs-keyword">if</span>(userDB!=<span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">return</span> userDB;<br>&#125;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;登录失败~~&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/58Yh6ZcsftpGwXl.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 5.开发controller</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserService userService;<br><span class="hljs-meta">@GetMapping(&quot;/user/login&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title function_">login</span><span class="hljs-params">(User user)</span> &#123;<br>Map&lt;String,Object&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>log.info(<span class="hljs-string">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());<br>log.info(<span class="hljs-string">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">userDB</span> <span class="hljs-operator">=</span> userService.login(user);<br>Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<span class="hljs-comment">//用来存放payload</span><br>map.put(<span class="hljs-string">&quot;id&quot;</span>,userDB.getId());<br>map.put(<span class="hljs-string">&quot;username&quot;</span>, userDB.getName());<br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> JWTUtils.getToken(map);<br>result.put(<span class="hljs-string">&quot;state&quot;</span>,<span class="hljs-literal">true</span>);<br>result.put(<span class="hljs-string">&quot;msg&quot;</span>,<span class="hljs-string">&quot;登录成功!!!&quot;</span>);<br>result.put(<span class="hljs-string">&quot;token&quot;</span>,token); <span class="hljs-comment">//成功返回token信息</span><br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>result.put(<span class="hljs-string">&quot;state&quot;</span>,<span class="hljs-string">&quot;false&quot;</span>);<br>result.put(<span class="hljs-string">&quot;msg&quot;</span>,e.getMessage());<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/3QL85NecUd2uwH6.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 6.数据库添加测试数据启动项目</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/eFZQzWXhUO9cpLR.png"></p><p><img src="https://i.loli.net/2021/01/03/fQtoqvOH4gmnd62.png" alt="image-20200805214424786.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 7.通过postman模拟登录失败</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/65xukczt3PUyEiv.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 8.通过postman模拟登录成功</span><br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/sGOpZEWBjRFIxXi.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 9.编写测试接口</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/test/test&quot;)</span><br><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(String token)</span> &#123;<br>Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">try</span> &#123;<br>JWTUtils.verify(token);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;验证通过~~~&quot;</span>);<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">true</span>);<br>&#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Token已经过期!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e)&#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;签名错误!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e)&#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;加密算法不匹配!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;无效token~~&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/01/03/aF7HtC3qgjOuNJo.png"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 10.通过postman请求接口</span><br></code></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/sp5yod"><img src="https://s3.ax1x.com/2021/01/03/sp5yod.png"></a><br><a href="https://imgchr.com/i/sp5sdH"><img src="https://s3.ax1x.com/2021/01/03/sp5sdH.png"></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 11.问题?</span><br><span class="hljs-bullet">-</span> 使用上述方式每次都要传递token数据,每个方法都需要验证token代码冗余,不够灵活? 如何优化<br><span class="hljs-bullet">-</span> 使用拦截器进行优化<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;token&quot;</span>);<br>Map&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">try</span> &#123;<br>JWTUtils.verify(token);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">catch</span> (TokenExpiredException e) &#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;Token已经过期!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (SignatureVerificationException e)&#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;签名错误!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (AlgorithmMismatchException e)&#123;<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;加密算法不匹配!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>map.put(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-literal">false</span>);<br>map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;无效token~~&quot;</span>);<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>().writeValueAsString(map);<br>response.setContentType(<span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>);<br>response.getWriter().println(json);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterceptorConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtTokenInterceptor</span>()).<br>excludePathPatterns(<span class="hljs-string">&quot;/user/\*\*&quot;</span>)<br>.addPathPatterns(<span class="hljs-string">&quot;/\*\*&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-参考文章"><a href="#10-参考文章" class="headerlink" title="10.参考文章"></a>10.参考文章</h2><ul><li><a href="https://www.jianshu.com/p/576dbf44b2ae">什么是 JWT – JSON WEB TOKEN</a></li><li><a href="https://findneo.github.io/180503jwt/">JSON Web Token的认识与攻击</a></li><li><a href="https://www.xncoding.com/2017/06/22/security/jwt.html">JWT介绍和安全防范</a></li></ul><h2 id="11-GitHub源码"><a href="#11-GitHub源码" class="headerlink" title="11.GitHub源码"></a>11.GitHub源码</h2><p><a href="https://github.com/luffy997/springboot-jwt">springboot-jwt</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM实现前后端分离，整合html作为视图引擎，解决跨域和拦截问题</title>
    <link href="/2020/12/21/SSM%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%EF%BC%8C%E6%95%B4%E5%90%88html%E4%BD%9C%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%BC%95%E6%93%8E%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E5%92%8C%E6%8B%A6%E6%88%AA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/12/21/SSM%E5%AE%9E%E7%8E%B0%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%EF%BC%8C%E6%95%B4%E5%90%88html%E4%BD%9C%E4%B8%BA%E8%A7%86%E5%9B%BE%E5%BC%95%E6%93%8E%EF%BC%8C%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E5%92%8C%E6%8B%A6%E6%88%AA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM实现前后端分离，整合html作为视图引擎，解决跨域和拦截问题"><a href="#SSM实现前后端分离，整合html作为视图引擎，解决跨域和拦截问题" class="headerlink" title="SSM实现前后端分离，整合html作为视图引擎，解决跨域和拦截问题"></a>SSM实现前后端分离，整合html作为视图引擎，解决跨域和拦截问题</h1><p>按照csdn查的说sping4.2以上的jar 跨域使用@CrosssOrgin注解就可以跨域了但我不知道为啥没有用。不过使用跨域过滤器工具类的方式解决的跨域问题，后端的json数据能够跨域被接收到。</p><h2 id="1-写CrossingFilter过滤器类，实现-Interfaces-本地ApacheTomcat的Filter接口"><a href="#1-写CrossingFilter过滤器类，实现-Interfaces-本地ApacheTomcat的Filter接口" class="headerlink" title="1. 写CrossingFilter过滤器类，实现(Interfaces)本地ApacheTomcat的Filter接口"></a>1. 写CrossingFilter过滤器类，实现(Interfaces)本地ApacheTomcat的Filter接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrossingFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isCross</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>isCross = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span><br><span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br><span class="hljs-keyword">if</span> (isCross) &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">httpServletRequest</span> <span class="hljs-operator">=</span> (HttpServletRequest) request;<br><span class="hljs-type">HttpServletResponse</span> <span class="hljs-variable">httpServletResponse</span> <span class="hljs-operator">=</span> (HttpServletResponse) response;<br>System.out.println(<span class="hljs-string">&quot;拦截请求: &quot;</span> + httpServletRequest.getServletPath());<br>httpServletResponse.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;\*&quot;</span>);<br><span class="hljs-comment">// httpServletResponse.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;\*&quot;); // 表示所有请求都有效</span><br>httpServletResponse.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>);<br>httpServletResponse.setHeader(<span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>httpServletResponse.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>,<br><span class="hljs-string">&quot;Origin, No-Cache, X-Requested-With, If-Modified-Since, Pragma, Last-Modified, Cache-Control, Expires, Content-Type, X-E4M-With,userId,token&quot;</span>);<br>httpServletResponse.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>httpServletResponse.setHeader(<span class="hljs-string">&quot;XDomainRequestAllowed&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>&#125;<br>chain.doFilter(request, response);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">isCrossStr</span> <span class="hljs-operator">=</span> filterConfig.getInitParameter(<span class="hljs-string">&quot;IsCross&quot;</span>);<br>isCross = isCrossStr.equals(<span class="hljs-string">&quot;true&quot;</span>) ? <span class="hljs-literal">true</span> : <span class="hljs-literal">false</span>;<br>System.out.println(<span class="hljs-string">&quot;跨域开启状态：&quot;</span> + isCrossStr);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-在web-xml文件中注册CrossingFilter过滤器"><a href="#2-在web-xml文件中注册CrossingFilter过滤器" class="headerlink" title="2. 在web.xml文件中注册CrossingFilter过滤器"></a>2. 在web.xml文件中注册CrossingFilter过滤器</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置跨域过滤器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CrossingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.dev.filter.CrossingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-name</span>&gt;</span>IsCross<span class="hljs-tag">&lt;/<span class="hljs-name">param-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">param-value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">param-value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">init-param</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>CrossingFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/\*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-配置web-xml，不拦截-html"><a href="#3-配置web-xml，不拦截-html" class="headerlink" title="3. 配置web.xml，不拦截.html"></a>3. 配置web.xml，不拦截.html</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--配置该段代码表示对html请求不阻挡--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>default<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>\*.html<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>总结：SSM我在学的时候就见识了它配置的复杂，这次接了的单子又是SSM+jQuery的，我还是一如既往的使用前后端分离，前端套的模板，就不得不解决跨域和配置html页面。（手动狗头）springboot是真香！</strong></p><blockquote><p>借鉴某老哥的博文解决问题，附上链接：</p><p><a href="https://my.oschina.net/u/4079187/blog/3160786">Java前后端分离SSM+Vue框架 后端解决跨域请求</a></p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>SSM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何实现文件的安全上传？</title>
    <link href="/2020/11/13/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8A%E4%BC%A0%EF%BC%9F/"/>
    <url>/2020/11/13/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%AE%89%E5%85%A8%E4%B8%8A%E4%BC%A0%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>项目中常会遇到需要文件上传和下载的地方，其中文件上传的安全问题不可忽视，下面是我考虑到的文件上传安全问题和用编码实现的过程</p><ul><li><p>对文件大小的判断，防止恶意上传大文件挤占服务器资源</p></li><li><p>对文件类型的判断，这里实现的是对图片的判断</p></li><li><p>对图片进行resize处理，防止图片嵌入恶意可执行的代码，通过压缩可以实现对嵌入可代码的破坏</p></li><li><p>文件保存的地址有两种，一个就是借助第三方服务器进行保存（七牛云），或者是放在自己的服务器，在成功读取文件后，进行保存的时候，可以对文件名进行修改，采用随机数，一定程度上提高了安全性</p></li><li><p>文件服务器和应用服务器的分开，避免对应用程序的直接破坏</p></li><li><p>文件夹权限的设置，对用户上传的文件夹设置只读权限，可以有效防止远端直接启动木马程序</p></li><li><p>当然，假如这个功能不需要，直接关闭文件上传功能是最安全的</p><hr><p>​</p></li></ul><h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>此Demo实现文件上传的读取保存，并在数据库中插入数据</p><p>项目目录</p><p><img src="https://i.loli.net/2020/11/13/6tvGmkhTRHSQq5f.png" alt="6.png"></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.dev<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-file-upload-download<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springboot-file-upload-download<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- springboot整合thymeleaf--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mysql连接--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--druid--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--fastjson--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.57<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--thumbnailator--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.coobird<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thumbnailator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.4.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>单文件上传的测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">/\*\*<br>\* 单文件上传<br>\* <span class="hljs-meta">@param</span> file 前端传文件的参数<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-meta">@RequestMapping(&quot;/upload&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file,HttpServletRequest request)</span> &#123;<br><span class="hljs-type">FileDoc</span> <span class="hljs-variable">fileDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDoc</span>();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件为空&quot;</span>;<br>&#125;<br><span class="hljs-comment">//获取大小</span><br><span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> file.getSize();<br>log.info(<span class="hljs-string">&quot;文件大小：&quot;</span> + size);<br><span class="hljs-comment">//判断文件上传大小</span><br><span class="hljs-keyword">if</span> (!FileUtils.checkFileSize(file, <span class="hljs-number">20</span>, <span class="hljs-string">&quot;M&quot;</span>)) &#123;<br>log.info(<span class="hljs-string">&quot;上传文件规定小于20MB&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传文件规定小于20MB&quot;</span>;<br>&#125;<br><span class="hljs-comment">//获取文件名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>log.info(<span class="hljs-string">&quot;上传的文件名为：&quot;</span> + filename);<br><span class="hljs-comment">//获取文件后缀名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">suffixName</span> <span class="hljs-operator">=</span> filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>log.info(<span class="hljs-string">&quot;文件的后后缀名：&quot;</span> + suffixName);<br><span class="hljs-comment">//若要判断文件上传的类型，</span><br><span class="hljs-comment">//生成新文件名 6位随机数+文件后缀名</span><br>fileDoc.setFile\_name(CodeGenerateUtil.generateVerCode(<span class="hljs-number">6</span>).toString()+suffixName);<br><span class="hljs-comment">//拿到ip地址</span><br>fileDoc.setIp\_addr(request.getRemoteAddr());<br><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FILEPATH+fileDoc.getFile\_name());<br><span class="hljs-comment">//检测目录是否存在</span><br><span class="hljs-keyword">if</span> (!dest.getParentFile().exists()) &#123;<br>dest.getParentFile().mkdirs(); <span class="hljs-comment">//新建文件夹</span><br>&#125;<br>file.transferTo(dest); <span class="hljs-comment">//文件写入</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> fileDocService.uploadFile(fileDoc);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件上传成功&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件上传失败&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传失败&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>FileUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.dev.util;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br>/\*\*<br>\* <span class="hljs-meta">@author</span> 路飞<br>\* <span class="hljs-meta">@create</span> <span class="hljs-number">2020</span>/<span class="hljs-number">11</span>/<span class="hljs-number">1</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUtils</span> &#123;<br>/\*\*<br>\*检查文件大小<br>\* <span class="hljs-meta">@param</span> file<br>\* <span class="hljs-meta">@param</span> size<br>\* <span class="hljs-meta">@param</span> unit<br>\* <span class="hljs-meta">@return</span><br>\*/<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">checkFileSize</span><span class="hljs-params">(MultipartFile file,<span class="hljs-type">int</span> size,String unit)</span>&#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> file.getSize();<br><span class="hljs-type">double</span> <span class="hljs-variable">fileSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;B&quot;</span>.equals(unit.toUpperCase()))&#123;<br>fileSize = len;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;k&quot;</span>.equals(unit.toUpperCase()))&#123;<br>fileSize = (<span class="hljs-type">double</span>)len / <span class="hljs-number">1024</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;M&quot;</span>.equals(unit.toUpperCase()))&#123;<br>fileSize = (<span class="hljs-type">double</span>)len / <span class="hljs-number">1048576</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;G&quot;</span>.equals(unit.toUpperCase()))&#123;<br>fileSize = (<span class="hljs-type">double</span>)len / <span class="hljs-number">1073741824</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (fileSize &gt; size)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://i.loli.net/2020/11/13/bHWRD5MVKsIwO6x.png" alt="7.png"></p><p><img src="https://i.loli.net/2020/11/13/huk9BKjNdFGzCi8.png" alt="8.png"></p><p>测试超过上传要求的文件</p><p><img src="https://i.loli.net/2020/11/13/A1CltTnEcI9osdK.png" alt="9.png"></p><p>测试多文件上传</p><p><img src="https://i.loli.net/2020/11/13/xoJy9XGELbH7p6s.png" alt="10.png"></p><p>在进行多文件上传的时候，会对每个文件进行校验，不符合上传要求的会直接返回</p><p><img src="https://i.loli.net/2020/11/13/9DhWgztXnkfKYSr.png" alt="11.png"></p><p>测试文件下载就不测试了，这里提供两种方法，第一种就是直接利用IO直接读取文件，进行数据传输，第二种就是直接利用springboot的资源映射配置类，把服务器的文件资源映射到互联网上，直接请求路径即可下载文件</p><p>WebMvcConfigurer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebMvcConfigurer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebMvcConfigurerAdapter</span> &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;<br><span class="hljs-comment">//和页面有关的静态目录都放在项目的static目录下</span><br>registry.addResourceHandler(<span class="hljs-string">&quot;/static/\*\*&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;classpath:/static/&quot;</span>);<br><span class="hljs-comment">//上传的图片在C盘下的image目录下，访问路径如：https://localhost:443/image/d3cf0281-bb7f-40e0-ab77-406db95ccf2c.jpg</span><br><span class="hljs-comment">//其中OTA表示访问的前缀。&quot;file:D:/OTA/&quot;是文件真实的存储路径</span><br>registry.addResourceHandler(<span class="hljs-string">&quot;/image/\*\*&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;file:C:/image/&quot;</span>);<br>registry.addResourceHandler(<span class="hljs-string">&quot;/lost/\*\*&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;file:C:/lost/&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后，是对图片上传的测试，这里引入<strong>谷歌的Thumbnailator</strong>，对图片进行压缩处理，破坏掉嵌入可执行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/uploadImage&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file, HttpServletRequest request)</span> &#123;<br><span class="hljs-type">FileDoc</span> <span class="hljs-variable">fileDoc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDoc</span>();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">if</span> (file.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件为空&quot;</span>;<br>&#125;<br><span class="hljs-comment">//获取大小</span><br><span class="hljs-type">long</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> file.getSize();<br>log.info(<span class="hljs-string">&quot;文件大小：&quot;</span> + size);<br><span class="hljs-comment">//判断文件上传大小</span><br><span class="hljs-keyword">if</span> (!FileUtils.checkFileSize(file, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;M&quot;</span>)) &#123;<br>log.info(<span class="hljs-string">&quot;上传文件规定小于10MB&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传文件规定小于10MB&quot;</span>;<br>&#125;<br><span class="hljs-comment">//获取文件名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> file.getOriginalFilename();<br>log.info(<span class="hljs-string">&quot;上传的文件名为：&quot;</span> + filename);<br><span class="hljs-comment">//获取文件后缀名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">suffixName</span> <span class="hljs-operator">=</span> filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>));<br>log.info(<span class="hljs-string">&quot;文件的后后缀名：&quot;</span> + suffixName);<br><span class="hljs-comment">//判断文件是否为图片</span><br><span class="hljs-keyword">if</span> (!ImageTypeUtils.checkImageUtils(suffixName))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;请上传图片格式为jpg,png,gif的图片&quot;</span>;<br>&#125;<br><span class="hljs-comment">//生成新文件名 6位随机数+文件后缀名</span><br>fileDoc.setFile\_name(CodeGenerateUtil.generateVerCode(<span class="hljs-number">6</span>).toString()+suffixName);<br><span class="hljs-comment">//拿到ip地址</span><br>fileDoc.setIp\_addr(request.getRemoteAddr());<br><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(FILEPATH+fileDoc.getFile\_name());<br><span class="hljs-comment">//检测目录是否存在</span><br><span class="hljs-keyword">if</span> (!dest.getParentFile().exists()) &#123;<br>dest.getParentFile().mkdirs(); <span class="hljs-comment">//新建文件夹</span><br>&#125;<br>file.transferTo(dest); <span class="hljs-comment">//文件写入</span><br><span class="hljs-comment">//利用Thumbnails对图片进行resize</span><br>Thumbnails.of(FILEPATH+fileDoc.getFile\_name())<br>.scale(<span class="hljs-number">1f</span>)<br>.outputQuality(<span class="hljs-number">0.7F</span>)<br>.toFile(FILEPATH+fileDoc.getFile\_name());<br>log.info(<span class="hljs-string">&quot;图片压缩成功&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> fileDocService.uploadFile(fileDoc);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件上传成功&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件上传失败&quot;</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (IllegalStateException e) &#123;<br>e.printStackTrace();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传失败&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Thumbnails的使用方法</p><p>scale: 按照比例进行缩放。范围：0.0~N。<br>scale(0.5) 宽高比例都是50%缩放 , scale(1,0.5) 宽不变，高为50%缩放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Thumbnails.of(<span class="hljs-string">&quot;原图文件的路径&quot;</span>)<br>.scale(<span class="hljs-number">1F</span>) <span class="hljs-comment">//1F不缩放</span><br>.outputQuality(<span class="hljs-number">0.7F</span>) <span class="hljs-comment">//图片品质 0-1 靠近1质量越高</span><br>.watermark(Positions.BOTTOM\_RIGHT, ImageIO.read(水印), <span class="hljs-number">0.5f</span>)<br>.toFile(<span class="hljs-string">&quot;转换后文件的路径&quot;</span>);<br></code></pre></td></tr></table></figure><p>格式的校验</p><p><img src="https://i.loli.net/2020/11/13/3sAU7TO5h8iYVNI.png" alt="12.png"></p><p>成功上传后会对图片进行压缩</p><p><img src="https://i.loli.net/2020/11/13/W2lPQuxYpR9XqAN.png" alt="13.png"></p><p>自己写的一个简单的Demo，未考虑的安全问题还有很多，对Java初学者应该会很有帮助。</p><p>详细代码见Github：</p><p><a href="https://github.com/luffy997/springboot-file-upload-download">Github项目地址</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>网安</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>api-design-demo 后端快速开发脚手架</title>
    <link href="/2020/10/31/api-design-demo-%E5%90%8E%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    <url>/2020/10/31/api-design-demo-%E5%90%8E%E7%AB%AF%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><ul><li><strong>api-design-demo</strong>是我对之前所学框架的一个整合，基于SpringBoot整合Mybatis,Redis,Shiro，融合Swagger做接口文档，运用JSR303做数据校验,利用MybatisPlus简化数据访问层的操作，利用AutoGenerator自动代码生成器，减少代码的编写，更加专注业务逻辑的实现，从而提高开发效率。</li><li>自定义全局异常处理器，使<strong>controller</strong>层始终能返回给前端标准响应状态</li></ul><h1 id="2-项目结构"><a href="#2-项目结构" class="headerlink" title="2.项目结构"></a>2.项目结构</h1><p><strong>api-design-demo</strong> —-<strong>src</strong> — <strong>config</strong></p><p>​ <strong>enums</strong></p><p>​ <strong>handler</strong></p><p>​ <strong>exception</strong></p><p>​ <strong>handler</strong></p><p>​ <strong>shiro</strong></p><p>​ <strong>util</strong></p><p>​ <strong>vo</strong></p><p>​ <strong>resources</strong></p><p>​ <strong>test</strong></p><h1 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3.使用方式"></a>3.使用方式</h1><ul><li>在resources的sql下找到数据库文件users.sql，导入数据库</li><li>在resources的application-dev.properties下配置Mysql和Redis</li><li>配置scr下的util里的DevGenerator类中的数据源参数，运行该类即可自动生成实体类，数据访问层，服务层，服务实现层，控制器层</li><li>config包下配置了跨域，Druid，全局异常处理，MybatisPlus，Redis，响应状态处理，Shrio，Swagger，可以根据业务需求，开启是否使用他们</li></ul><h1 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h1><ol><li>测试查询数据</li></ol><p><img src="https://i.loli.net/2020/11/01/aZkHCBVlXN7ohQb.png"></p><p>​ 2. 测试添加数据</p><p><img src="https://i.loli.net/2020/11/01/HpjCSVZrt9uhGwc.png"></p><p>​ 当添加是数据不满足格式时，则会返回校验结果</p><p><img src="https://i.loli.net/2020/11/01/85KTlUbW2sV1uaB.png"></p><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h1><p>自此整个后端接口基本体系就构建完毕了</p><ul><li>通过Validator + 自动抛出异常来完成了方便的参数校验</li><li>通过全局异常处理 + 自定义异常完成了异常操作的规范</li><li>通过数据统一响应完成了响应数据的规范</li><li>多个方面组装非常优雅的完成了后端接口的协调，让开发人员有更多的经历注重业务逻辑代码，轻松构建后端接口</li><li>整合Mybatis，Redis，Shiro，帮你快速搭建开发环境</li></ul><p>项目体系该怎么构建、后端接口该怎么写都没有一个绝对统一的标准，不是说一定要按照本文的来才是最好的，你怎样都可以。</p><p>最后在这里放上此项目的<a href="https://github.com/luffy997/api-design-demo">github地址</a>，clone到本地即可直接运行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云部署SpringBoot项目(内置Tomcat)，配置https，配置邮箱端口465，成功部署发布</title>
    <link href="/2020/10/15/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%AETomcat-%EF%BC%8C%E9%85%8D%E7%BD%AEhttps%EF%BC%8C%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E7%AB%AF%E5%8F%A3465%EF%BC%8C%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83/"/>
    <url>/2020/10/15/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2SpringBoot%E9%A1%B9%E7%9B%AE-%E5%86%85%E7%BD%AETomcat-%EF%BC%8C%E9%85%8D%E7%BD%AEhttps%EF%BC%8C%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1%E7%AB%AF%E5%8F%A3465%EF%BC%8C%E6%88%90%E5%8A%9F%E9%83%A8%E7%BD%B2%E5%8F%91%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h2><p>我是阿里云的服务器，里面有个白嫖的SSL证书，申请成功后把它和域名绑定就行，再下载证书就行了。</p><p>因为我用的内置的Tomcat，所以下载的还是Tomcat的证书：</p><p><img src="https://i.loli.net/2020/10/16/H8lYFgCXKkQbPjw.png"></p><p>现在就是配项目配置https，我的springboot版本是1.5.10.RELEASE，2.0X版本的就不知道了，我这个配置很简单，放到resources是文件夹下就行了</p><p><img src="https://i.loli.net/2020/10/16/78kj2Fx635gilI4.png"></p><h2 id="在application-properties中加入如下配置，让项目加载ssl"><a href="#在application-properties中加入如下配置，让项目加载ssl" class="headerlink" title="在application.properties中加入如下配置，让项目加载ssl"></a>在application.properties中加入如下配置，让项目加载ssl</h2><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#https配置</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">443</span><br><span class="hljs-attr">server.ssl.key-store</span>=<span class="hljs-string">classpath:3904483\_www.XXXXX.top.pfx</span><br><span class="hljs-attr">server.ssl.key-store-password</span>=<span class="hljs-string">XXXXX</span><br><span class="hljs-attr">server.ssl.keyStoreType</span>=<span class="hljs-string">PKCS12</span><br><span class="hljs-attr">server.ssl.enabled</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p>就完成了，因为https协议默认是443端口所以我把项目端口改成443，这样就不用配置hhtp转https了。</p><p>其实到maven打包，就可以部署了，但项目里有个发送邮件的，默认是25端口，这个国内的服务器直接就禁用了25端口，这就需要我们改端口或者申请解封25端口，一个大学生申请没啥材料肯定是不会通过了，所以这里我们选择改端口就可以了。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#配置邮箱</span><br><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">your maill</span><br><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string"></span><br><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string"></span><br><span class="hljs-comment">#SSL证书Socket工厂</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.class</span>=<span class="hljs-string">javax.net.ssl.SSLSocketFactory</span><br><span class="hljs-comment">#使用SMTPS协议465端口</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.socketFactory.port</span>=<span class="hljs-string">465</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.required</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h2 id="创建一个SSLSocketFactory"><a href="#创建一个SSLSocketFactory" class="headerlink" title="创建一个SSLSocketFactory"></a>创建一个SSLSocketFactory</h2><p>之前就没有，所以就没有把端口号改成465,这样我们的项目就完成配置https，修改邮件端口，最后打包发布就行了;</p><p><img src="https://i.loli.net/2020/10/16/HYPjROv9mCcrI3S.png"></p><h2 id="把域名交给前端-微信小程序-：https-自己的域名"><a href="#把域名交给前端-微信小程序-：https-自己的域名" class="headerlink" title="把域名交给前端(微信小程序)：https:&#x2F;&#x2F;自己的域名"></a>把域名交给前端(微信小程序)：https:&#x2F;&#x2F;自己的域名</h2><p>这里收藏一篇好的博文：<a href="https://blog.csdn.net/weixin_40593587/article/details/89812619?utm_medium=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-OPENSEARCH-1.nonecase">springboot使用465端口发送邮件</a></p><p>注：阿里云的端口几乎都是被防火墙关闭了的，开启端口需要配置相应实例的安全组，不然会访问不到的。</p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo常用命令</title>
    <link href="/2020/10/14/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/10/14/hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h1><ol><li>初始化hexo</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"># hexo init<br></code></pre></td></tr></table></figure><ol start="2"><li>启动hexo</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"># hexo s<br></code></pre></td></tr></table></figure><ol start="3"><li>清楚缓存</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"># hexo clean<br></code></pre></td></tr></table></figure><ol start="4"><li>生成静态网站</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"># hexo g<br></code></pre></td></tr></table></figure><ol start="5"><li>将现在的文件部署到远端</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain"># hexo d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/10/10/hello-world/"/>
    <url>/2020/10/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
